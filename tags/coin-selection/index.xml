<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>coin selection on ₿itcoin Transcripts</title><link>https://btctranscripts.com/tags/coin-selection/</link><description>Recent content in coin selection on ₿itcoin Transcripts</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 20 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://btctranscripts.com/tags/coin-selection/index.xml" rel="self" type="application/rss+xml"/><item><title>Privacy Metrics for Coin Selection</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/privacy-metrics/</link><pubDate>Wed, 20 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/privacy-metrics/</guid><description>Goal: Get privacy consciousness into coin selection Configurability Privacy vs cost (waste) Privacy: weighted on a 0-5 scale Cost: weighted on a 0-5 scale Convert privacy preference (0-5) into satoshis to make it compatible with the waste score Combined score = PrivacyScoreWeight x PrivacyScore + CostWeight x WasteMetric 20-30 sats per privacy point as a gut feeling Privacy score example: sending to different script type than inputs of transaction We already match the change type to the recipient type, but that can still mean that we have differently typed inputs than outputs If we have two input sets, where one has the same type and the other has a different type, the one with the same type inputs should be preferred by the privacy metric Privacy score example: Preferring spending UTXOs of similar age E.</description></item><item><title>Discussion on open Coin Selection matters</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/wallet-coin-selection/</link><pubDate>Tue, 19 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/wallet-coin-selection/</guid><description>Topic: review of https://github.com/bitcoin/bitcoin/pull/27601 Problem statement: when doing manual RBF (without using bumpfee RPC) we treat previous change output as a receiver and thus create two outputs to the same address Proposal: combine amount on outputs to the same address What are valid use-cases for having the same address for change and output? Consolidation with payment Alternative: Use sendall with two outputs one with an amount and yours without an amount Payment and send at least X to yourself Consolidate with automatic coin selection of at least X Alternative: Implement &amp;ldquo;Send at least&amp;rdquo; as a separate and explicitly feature Consider just giving an error if change destination is the same with one of the outputs Should we do the enforcement only at RPC level?</description></item><item><title>Coin Selection Algorithms</title><link>https://btctranscripts.com/tabconf/2021/coin-selection-algorithms/</link><pubDate>Fri, 05 Nov 2021 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/tabconf/2021/coin-selection-algorithms/</guid><description>Introduction Hi, I&amp;rsquo;m Andrew Chow. I&amp;rsquo;m an engineer at Blockstream and I work on Bitcoin Core in the wallet and on various things in the wallet. So, today I&amp;rsquo;m going to be talking about coin selection and generally how you can pick your inputs better for when you&amp;rsquo;re making a transaction. To start off, what happens when you make a transaction? Well, first, you type in, you copy and paste in your address, you type in the amount that you want to send and you click the send button and your wallet does some stuff in the background and out comes a transaction, right?</description></item><item><title>Enterprise Wallets/UTXO Management</title><link>https://btctranscripts.com/chaincode-labs/chaincode-podcast/2020-11-09-enterprise-walletsutxo-management/</link><pubDate>Mon, 09 Nov 2020 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/chaincode-labs/chaincode-podcast/2020-11-09-enterprise-walletsutxo-management/</guid><description>Mark Erhardt: 00:00:00
Just to throw out a few numbers there, non-SegWit inputs cost almost 300 bytes, and native SegWit inputs cost slightly more than 100 bytes. There&amp;rsquo;s almost a reduction by two-thirds in fees if you switch from non-SegWit to native SegWit.
Introduction Caralie Chrisco: 00:00:29
Hi, everyone, welcome to the Chaincode podcast. My name is Caralie.
Adam Jonas: 00:00:32
And it&amp;rsquo;s Jonas.
Caralie Chrisco: 00:00:33
And we&amp;rsquo;re back!</description></item><item><title>Coin Selection</title><link>https://btctranscripts.com/edgedevplusplus/2018/coin-selection/</link><pubDate>Thu, 04 Oct 2018 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/edgedevplusplus/2018/coin-selection/</guid><description>https://twitter.com/kanzure/status/1047708247333859328
Introduction I am going to do a short talk on coin selection. Everyone calls me kalle. In Japanese, my name is kalle. Coin selection, what it is, how it works, and interestingly enough- in the latest version of Bitcoin Core released yesterday, they have changed the coin selection algorithm for the first time since a long time. They are now using something with more scientific rigor behind it (branch-and-bound coin selection), which is good news.</description></item></channel></rss>