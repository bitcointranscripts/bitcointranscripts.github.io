<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Developer Tools on ₿itcoin Transcripts</title><link>https://btctranscripts.com/tags/developer-tools/</link><description>Recent content in Developer Tools on ₿itcoin Transcripts</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 09 Apr 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://btctranscripts.com/tags/developer-tools/index.xml" rel="self" type="application/rss+xml"/><item><title>P2P Monitoring</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/p2p-monitoring/</link><pubDate>Tue, 09 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/p2p-monitoring/</guid><description>Slides
Started working on this about 2 years ago; in 2021. After we accidentally observed the address flooding anomaly/attack Primarily uses https://github.com/0xB10C/peer-observer to extract data from Bitcoin Core nodes with tracepoints. The infrastructure also includes a fork-observer connected to each node as well as an addrman-observer for each node. Additionally, detailed Bitcoin Core debug logs are avaliable. The main part are the Grafana dashboards. There’s a public version at public.peer.observer, which is redacted to not leak honeynode IP addresses.</description></item><item><title>Newsletter #292 Recap</title><link>https://btctranscripts.com/bitcoinops/newsletter-292-recap/</link><pubDate>Thu, 07 Mar 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoinops/newsletter-292-recap/</guid><description>Mark Erhardt: 00:03:57
We are complete. Maybe we can start. So good morning. This is Optech Newsletter #292 Recap. And as you can hear, Mike is not here today and I&amp;rsquo;m filling in as the main host. Today we have four news items, two releases and release candidates, and four PRs to talk about in our notable code and documentation changes. I&amp;rsquo;m Merch and I work at Chaincode Labs and bring you weekly this OpTec newsletter recap.</description></item><item><title>Fuzzing</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-27-fuzzing/</link><pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-27-fuzzing/</guid><description>Slides: https://docs.google.com/presentation/d/1NlTw_n60z9bvqziZqU3H3Jw7Xs5slnQoehYXhEKrzOE
Fuzzing Fuzzing is done continuously. Fuzz targets can pay off even years later by finding newly introduced bugs. Example in slide about libFuzzer fuzzing a parse_json function which might crash on some weird input but won’t report invalid json inputs that pass parsing. libFuzzer does coverage guided feedback loop + helps with exploring control flow. Bug Oracles Assertions - Adding assertions is tricky for network code. We add Assume() when continuing is not worse than crashing.</description></item><item><title>Demystifying and Understanding Bitcoin Core Development</title><link>https://btctranscripts.com/bitcoin-review-podcast/demystifying-and-understanding-bitcoin-core-development/</link><pubDate>Wed, 22 Feb 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-review-podcast/demystifying-and-understanding-bitcoin-core-development/</guid><description>Intro NVK: 00:00:40
Today, we&amp;rsquo;re going to be talking about Bitcoin Core development and trying to demystify it, maybe sort of like shed some light. So, some of the FUD goes away and new FUD comes in maybe, who knows?
Guest introductions NVK: 00:00:51
I have this awesome panel with me. I have a James O&amp;rsquo;Beirne. Hi James.
James O&amp;rsquo;Beirne: 00:00:56
Hi, good to be here.
NVK: 00:00:58
Thanks for coming.</description></item><item><title>Magical Bitcoin</title><link>https://btctranscripts.com/la-bitdevs/2020-05-21-alekos-filini-magical-bitcoin/</link><pubDate>Thu, 21 May 2020 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/la-bitdevs/2020-05-21-alekos-filini-magical-bitcoin/</guid><description>Magical Bitcoin site: https://magicalbitcoin.org/
Magical Bitcoin wallet GitHub: https://github.com/MagicalBitcoin/magical-bitcoin-wallet
sipa’s Miniscript site: http://bitcoin.sipa.be/miniscript/
Andrew Poelstra Miniscript presentation at London Bitcoin Devs: https://diyhpl.us/wiki/transcripts/london-bitcoin-devs/2020-02-04-andrew-poelstra-miniscript/
Andrew Poelstra Miniscript workshop at Advancing Bitcoin: https://diyhpl.us/wiki/transcripts/advancing-bitcoin/2020/2020-02-07-andrew-poelstra-miniscript/
Intro I am a developer, I work on Bitcoin. I came to Bitcoin pretty late compared to the people I work with. I started a couple of years ago working with Giacomo Zucco at BHB Network. I worked for a while at Blockstream and then I left.</description></item><item><title>Debugging Bitcoin Core Workshop</title><link>https://btctranscripts.com/advancing-bitcoin/2020/2020-02-07-fabian-jahr-debugging-workshop/</link><pubDate>Fri, 07 Feb 2020 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/advancing-bitcoin/2020/2020-02-07-fabian-jahr-debugging-workshop/</guid><description>Video: No video was posted online
Fabian presentation at Bitcoin Edge Dev++ 2019: https://diyhpl.us/wiki/transcripts/scalingbitcoin/tel-aviv-2019/edgedevplusplus/debugging-bitcoin/
Debugging Bitcoin Core doc: https://github.com/fjahr/debugging_bitcoin
Debugging Bitcoin Core Workshop: https://gist.github.com/fjahr/5bf65daaf9ff189a0993196195005386
Introduction First of all welcome to the debugging Bitcoin Core workshop. Everything I know more or less about using a debugger to learn from Bitcoin Core and to fix problems in Bitcoin Core. I didn’t go with traditional slides because I want to teach you how to use this tool, the debugger, in the context of Bitcoin Core.</description></item><item><title>Bitcoin Core Functional Test Framework</title><link>https://btctranscripts.com/edgedevplusplus/2019/bitcoin-core-functional-test-framework/</link><pubDate>Tue, 10 Sep 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/edgedevplusplus/2019/bitcoin-core-functional-test-framework/</guid><description>Slides: https://telaviv2019.bitcoinedge.org/files/test-framework-in-bitcoin-core.pdf
Transcript completed by: Bryan Bishop Edited by: Michael Folkson
https://twitter.com/kanzure/status/1171357556519952385
Introduction I am pretty sure you can tell but I am not James (Chiang). I am taking over the functional testing framework talk from James. He has already given several great talks. I took over this talk at very short notice from James. I’d like to give a hands on talk.
Content This is a brief introduction into the functional testing framework.</description></item><item><title>Going Beyond Coverage-Guided Fuzzing with Structured Fuzzing</title><link>https://btctranscripts.com/misc/2019-08-07-jonathan-metzman-structured-fuzzing/</link><pubDate>Wed, 07 Aug 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/misc/2019-08-07-jonathan-metzman-structured-fuzzing/</guid><description>Location: Black Hat USA 2019
Blackhat: https://www.blackhat.com/us-19/briefings/schedule/#going-beyond-coverage-guided-fuzzing-with-structured-fuzzing-16110
Slides: https://i.blackhat.com/USA-19/Wednesday/us-19-Metzman-Going-Beyond-Coverage-Guided-Fuzzing-With-Structured-Fuzzing.pdf
Transcript completed by: Michael Folkson
Intro Hi everyone. Thanks for coming to my talk. As I was introduced I’m Jonathan Metzman. I’m here to talk about how you can get more bugs with coverage guided fuzzing by adding structure awareness to your fuzzers.
Unstructured Fuzzing = Magic I first got into fuzzing while I was in college through AFL. I started using AFL to find bugs in my school projects and later I moved onto finding bugs in real software like sqlite with AFL.</description></item><item><title>Mempool Analysis &amp; Simulation</title><link>https://btctranscripts.com/breaking-bitcoin/2019/2019-06-08-mempool-analysis-simulation/</link><pubDate>Sat, 08 Jun 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/breaking-bitcoin/2019/2019-06-08-mempool-analysis-simulation/</guid><description>https://twitter.com/kanzure/status/1137342023063744512
slides: https://breaking-bitcoin.com/docs/slides/2019/mempoolAnalysis.pdf
Introduction Fun fact: I don&amp;rsquo;t think anyone knows this fact, but antpool is a miner and antpool is not mining replace-by-fee transactions. What I mean by that is that if you do a replace-by-fee transaction, they will ignore the second high fee transaction. There are cases where transactions are RBF-bumped to increase the fee to make it mined faster, so you RBF bump it, and then you have people spending the unconfirmed RBF version and then have a chain of transactions but then the original transaction is mined and not the other chained transactions.</description></item><item><title>Building Lightning Applications</title><link>https://btctranscripts.com/chaincode-labs/chaincode-residency/2018-10-22-alex-bosworth-building-lightning-applications/</link><pubDate>Mon, 22 Oct 2018 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/chaincode-labs/chaincode-residency/2018-10-22-alex-bosworth-building-lightning-applications/</guid><description>Slides: https://lightningresidency.com/assets/presentations/Bosworth_Building_Applications.pdf
https://twitter.com/kanzure/status/1116327230135836673
Intro Today I’m going to talk about building on lnd from the perspective of we want to have developers building on lnd. Developers, developers, developers. I just have so many slides today that let’s leave questions to the end if I have any time because I over made slides.
Design Philosophy So what is the big idea behind lnd? What are we thinking about when we’re developing lnd and what do we want lnd to be?</description></item><item><title>Bitcoin Core Testing</title><link>https://btctranscripts.com/greg-maxwell/2018-09-23-greg-maxwell-bitcoin-core-testing/</link><pubDate>Sun, 23 Sep 2018 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/greg-maxwell/2018-09-23-greg-maxwell-bitcoin-core-testing/</guid><description>I believe slower would potentially result in less testing and not likely result in more at this point.
If we had an issue that newly introduced features were turning out to frequently have serious bugs that are discovered shortly after shipping there might be a case that it would improve the situation to delay improvements more before putting them into critical operation&amp;hellip; but I think we&amp;rsquo;ve been relatively free of such issues.</description></item><item><title>Bitcoin CLI and Regtest</title><link>https://btctranscripts.com/austin-bitcoin-developers/2018-08-17-richard-bondi-bitcoin-cli-regtest/</link><pubDate>Fri, 17 Aug 2018 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/austin-bitcoin-developers/2018-08-17-richard-bondi-bitcoin-cli-regtest/</guid><description>Clone this repo to follow along: https://github.com/austin-bitcoin-developers/regtest-dev-environment
https://twitter.com/kanzure/status/1161266116293009408
Intro So the goal here as Justin said is to get the regtest environment set up. The advantages he mentioned, there is also the advantage that you can mine your own coins at will so you don’t have to mess around with testnet faucets. You can generate blocks as well so you don’t have to wait for six confirmations or whatever or even the ten minutes.</description></item><item><title>Tooling Panel</title><link>https://btctranscripts.com/building-on-bitcoin/2018/tooling/</link><pubDate>Tue, 03 Jul 2018 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/building-on-bitcoin/2018/tooling/</guid><description>https://twitter.com/kanzure/status/1014167542422822913
What kind of tools do we need to create, in order to facilitate building on bitcoin? We are going to open questions to the floor. The guys will be there to get your questions. The panel will be about 20 minutes long, and then we will go for food.
LN: I work at Blockstream. I work on low-level wallets and tooling for wallets.
ND: I am working on a library called Nbitcoin for programming bitcoin in C#.</description></item><item><title>BlockSci: a Platform for Blockchain Science and Exploration</title><link>https://btctranscripts.com/scalingbitcoin/stanford-2017/blocksci-platform/</link><pubDate>Sat, 04 Nov 2017 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/scalingbitcoin/stanford-2017/blocksci-platform/</guid><description>Alright well, my name is Harry Kalodner, I am a student at Princeton University and I am here to tell you about a tool I built alon with some colleagues at Princeton which could be used for analyzing the blockchain in different ways. So far most of the talks today have been constructive about new ways to use the blockchain and protocols to slightly modify bitcoin in roder to improve privacy or scaling.</description></item><item><title>Blockchain Testbed</title><link>https://btctranscripts.com/scalingbitcoin/montreal-2015/blockchain-testbed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/scalingbitcoin/montreal-2015/blockchain-testbed/</guid><description>A testbed for bitcoin scaling
I want to talk today about how to scale bitcoin. We want lower latency, we want higher throughput, more bandwidth and more transactions per second, and we want security. We can try to tune the parameters. In all of the plots, I have time going from left to right and these are blocks in rectangles. We have larger blocks which might give us more throughput. We could have shorter block length, and transactions would come faster on the chain and we have better throughput but we get forks and orphans when that happens.</description></item></channel></rss>