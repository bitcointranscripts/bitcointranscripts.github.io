<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>testing on ₿itcoin Transcripts</title><link>https://btctranscripts.com/tags/testing/</link><description>Recent content in testing on ₿itcoin Transcripts</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 07 Feb 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://btctranscripts.com/tags/testing/index.xml" rel="self" type="application/rss+xml"/><item><title>Debugging Workshop</title><link>https://btctranscripts.com/advancing-bitcoin/2020/2020-02-07-fabian-jahr-debugging-workshop/</link><pubDate>Fri, 07 Feb 2020 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/advancing-bitcoin/2020/2020-02-07-fabian-jahr-debugging-workshop/</guid><description>Topic: Debugging Bitcoin Core Workshop
Location: Advancing Bitcoin
Video: No video was posted online
Fabian presentation at Bitcoin Edge Dev++ 2019: https://diyhpl.us/wiki/transcripts/scalingbitcoin/tel-aviv-2019/edgedevplusplus/debugging-bitcoin/
Debugging Bitcoin Core doc: https://github.com/fjahr/debugging_bitcoin
Debugging Bitcoin Core Workshop: https://gist.github.com/fjahr/5bf65daaf9ff189a0993196195005386
Introduction First of all welcome to the debugging Bitcoin Core workshop. Everything I know more or less about using a debugger to learn from Bitcoin Core and to fix problems in Bitcoin Core. I didn’t go with traditional slides because I want to teach you how to use this tool, the debugger, in the context of Bitcoin Core.</description></item><item><title>Signet Workshop</title><link>https://btctranscripts.com/advancing-bitcoin/2020/2020-02-07-kalle-alm-signet-workshop/</link><pubDate>Fri, 07 Feb 2020 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/advancing-bitcoin/2020/2020-02-07-kalle-alm-signet-workshop/</guid><description>Topic: Signet Workshop
Location: Advancing Bitcoin
Video: No video posted online
Let’s prepare mkdir workspace cd workspace git clone https://github.com/bitcoin/bitcoin.git cd bitcoin git remote add kallewoof https://github.com/kallewoof/bitcoin.git git fetch kallewoof git checkout signet ./autogen.sh ./configure -C --disable-bench --disable-test --without-gui make -j5 When you try to run the configure part you are going to have some problems if you don’t have the dependencies. If you don’t have the dependencies Google your OS and “Bitcoin build”.</description></item><item><title>Signet Integration</title><link>https://btctranscripts.com/advancing-bitcoin/2020/2020-02-06-kalle-alm-signet-integration/</link><pubDate>Thu, 06 Feb 2020 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/advancing-bitcoin/2020/2020-02-06-kalle-alm-signet-integration/</guid><description>Topic: Signet Integration
Location: Advancing Bitcoin
Date: February 6th 2020
Slides: https://www.dropbox.com/s/6fqwhx7ugr3ppsg/Signet%20Integration%20V2.pdf
BIP 325: https://github.com/bitcoin/bips/blob/master/bip-0325.mediawiki
Signet on Bitcoin Wiki: https://en.bitcoin.it/wiki/Signet
Bitcoin dev mailing list: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-March/016734.html
Bitcoin Core PR 16411 (closed): https://github.com/bitcoin/bitcoin/pull/16411
Bitcoin Core PR 18267 (open): https://github.com/bitcoin/bitcoin/pull/18267
Intro I am going to talk about Signet. Do you guys know what Signet is? A few people know. I will explain it briefly. I have an elevator pitch, I have three actually depending on the height of the elevator.</description></item><item><title>Bitcoin Core Functional Test Framework</title><link>https://btctranscripts.com/edgedevplusplus/2019/bitcoin-core-functional-test-framework/</link><pubDate>Tue, 10 Sep 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/edgedevplusplus/2019/bitcoin-core-functional-test-framework/</guid><description>Slides: https://telaviv2019.bitcoinedge.org/files/test-framework-in-bitcoin-core.pdf
Transcript completed by: Bryan Bishop Edited by: Michael Folkson
https://twitter.com/kanzure/status/1171357556519952385
Introduction I am pretty sure you can tell but I am not James (Chiang). I am taking over the functional testing framework talk from James. He has already given several great talks. I took over this talk at very short notice from James. I’d like to give a hands on talk.
Content This is a brief introduction into the functional testing framework.</description></item><item><title>Structured Fuzzing</title><link>https://btctranscripts.com/misc/2019-08-07-jonathan-metzman-structured-fuzzing/</link><pubDate>Wed, 07 Aug 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/misc/2019-08-07-jonathan-metzman-structured-fuzzing/</guid><description>Topic: Going Beyond Coverage Guided Fuzzing with Structured Fuzzing
Location: Black Hat USA 2019
Blackhat: https://www.blackhat.com/us-19/briefings/schedule/#going-beyond-coverage-guided-fuzzing-with-structured-fuzzing-16110
Slides: https://i.blackhat.com/USA-19/Wednesday/us-19-Metzman-Going-Beyond-Coverage-Guided-Fuzzing-With-Structured-Fuzzing.pdf
Transcript completed by: Michael Folkson
Intro Hi everyone. Thanks for coming to my talk. As I was introduced I’m Jonathan Metzman. I’m here to talk about how you can get more bugs with coverage guided fuzzing by adding structure awareness to your fuzzers.
Unstructured Fuzzing = Magic I first got into fuzzing while I was in college through AFL.</description></item><item><title>Bitcoin Toolchain, Unit Testing And Deterministic Builds</title><link>https://btctranscripts.com/edgedevplusplus/2018/bitcoin-toolchain-unit-testing-and-deterministic-builds/</link><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/edgedevplusplus/2018/bitcoin-toolchain-unit-testing-and-deterministic-builds/</guid><description>https://twitter.com/kanzure/status/1048103693885759489
Introduction Just to continue on what James said about the build system on Bitcoin Core&amp;hellip; I am going to talk about deterministic builds. I am MarcoFalke and I also work at Chaincode Labs in NYC.
Bitcoin Core Build System The build system is based on autotools, so it should just work anywhere where autotools runs. Just run ./autogen.sh ./configure and then make, that&amp;rsquo;s it.
We recently added support for MSVC builds mostly for Windows developers to do native builds not having to switch between Linux and Windows all the time.</description></item><item><title>Bitcoin Core Testing</title><link>https://btctranscripts.com/greg-maxwell/2018-09-23-greg-maxwell-bitcoin-core-testing/</link><pubDate>Sun, 23 Sep 2018 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/greg-maxwell/2018-09-23-greg-maxwell-bitcoin-core-testing/</guid><description>Location: Bitcointalk
https://bitcointalk.org/index.php?topic=5035144.msg46080218#msg46080218
Bitcoin Core testing I believe slower would potentially result in less testing and not likely result in more at this point.
If we had an issue that newly introduced features were turning out to frequently have serious bugs that are discovered shortly after shipping there might be a case that it would improve the situation to delay improvements more before putting them into critical operation&amp;hellip; but I think we&amp;rsquo;ve been relatively free of such issues.</description></item><item><title>Bitcoin CLI and Regtest</title><link>https://btctranscripts.com/austin-bitcoin-developers/2018-08-17-richard-bondi-bitcoin-cli-regtest/</link><pubDate>Fri, 17 Aug 2018 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/austin-bitcoin-developers/2018-08-17-richard-bondi-bitcoin-cli-regtest/</guid><description>Clone this repo to follow along: https://github.com/austin-bitcoin-developers/regtest-dev-environment
https://twitter.com/kanzure/status/1161266116293009408
Intro So the goal here as Justin said is to get the regtest environment set up. The advantages he mentioned, there is also the advantage that you can mine your own coins at will so you don’t have to mess around with testnet faucets. You can generate blocks as well so you don’t have to wait for six confirmations or whatever or even the ten minutes.</description></item><item><title>libsecp256k1 testing</title><link>https://btctranscripts.com/greg-maxwell/2015-01-08-libsecp256k1-testing/</link><pubDate>Thu, 08 Jan 2015 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/greg-maxwell/2015-01-08-libsecp256k1-testing/</guid><description>Topic: libsecp256k1 testing
Location: Reddit
https://www.reddit.com/r/Bitcoin/comments/2rrxq7/on_why_010s_release_notes_say_we_have_reason_to/
libsecp256k1 testing Today OpenSSL de-embargoed CVE-2014-3570 &amp;ldquo;Bignum squaring may produce incorrect results&amp;rdquo;. That particular security advisory is not a concern for Bitcoin users, but it allows me to explain some of the context behind a slightly cryptic statement I made in the release notes for the upcoming Bitcoin Core 0.10: “we have reason to believe that libsecp256k1 is better tested and more thoroughly reviewed than the implementation in OpenSSL”.</description></item><item><title>OpenSSL bug discovery</title><link>https://btctranscripts.com/greg-maxwell/2015-01-08-openssl-bug/</link><pubDate>Thu, 08 Jan 2015 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/greg-maxwell/2015-01-08-openssl-bug/</guid><description>Topic: OpenSSL bug discovery
Location: Reddit
https://np.reddit.com/r/programming/comments/2rrc64/openssl_security_advisory_new_openssl_releases/cnilq2w/?context=3
OpenSSL bug discovery I contributed to the discovery and analysis of CVE-2014-3570 &amp;ldquo;Bignum squaring may produce incorrect results&amp;rdquo;. In this case, the issue was that one of the carry propagation conditions was missed. The bug was discovered as part of the development of libsecp256k1, a high performance (and hopefully high quality: correct, complete, side-channel resistant) implementation of the cryptographic operators used by Bitcoin, developed primarily by Bitcoin Core developer Pieter Wuille along with a number of other people.</description></item></channel></rss>