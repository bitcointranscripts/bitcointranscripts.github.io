<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>libsecp256k1 on ₿itcoin Transcripts</title><link>https://btctranscripts.com/tags/libsecp256k1/</link><description>Recent content in libsecp256k1 on ₿itcoin Transcripts</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 08 Apr 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://btctranscripts.com/tags/libsecp256k1/index.xml" rel="self" type="application/rss+xml"/><item><title>Silent Payments Libsecp Module</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/silent-payments-libsecp/</link><pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/silent-payments-libsecp/</guid><description>High level vs low level API:
Low level API could be more useful for multi-party SP implementation High level API is safer as it avoid managing SP state and staging secret data Rough consensus that high level API is preferable Responsibility of grouping and sorting recipients by scan key. Client vs library?
We need to assert grouping in the lib anyway to avoid catastrophic failure So it just makes sense for the lib to take care of the grouping Why we need grouping in the first place?</description></item><item><title>Libsecp256k1 Meeting</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/libsecp256k1-meeting/</link><pubDate>Wed, 20 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/libsecp256k1-meeting/</guid><description>Topics: Scope, Priorities Next release Dec 16th Scope: Informal agreeement currently What new modules to add? Needs a specification (whatever that means, Pseudocode etc.0 Should we formalize the agreement more? Should also not be too specific What are examples where this came up in the past? Exfill, Ecdh, Elswift, SIlent payments, musig, schnorr, adaptor sigs, half-agg How specific do we need to be? Tie it to examples to be more clear ECIES (Interesting in the future?</description></item><item><title>Libsec Panel</title><link>https://btctranscripts.com/bitcoin-review-podcast/libsec-panel/</link><pubDate>Fri, 08 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-review-podcast/libsec-panel/</guid><description>Intros NVK: I have an absolute rock star team here. So why don&amp;rsquo;t I start introducing the panel? Tim, hello! Do you want to tell a very brief what do you do?
Tim: Yes, so my name is Tim Ruffing. I am a maintainer of the libsecp256k1 library. I do work for Blockstream, who pay me to do this and also who pay me to do research on cryptography and all kinds of aspects related to Bitcoin.</description></item><item><title>Code Review and BIP324</title><link>https://btctranscripts.com/brink/the-bitcoin-development-podcast/code-review-and-bip324/</link><pubDate>Wed, 06 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/brink/the-bitcoin-development-podcast/code-review-and-bip324/</guid><description>Sebastian Falbesoner (theStack) and Mike Schmidt talk about Bitcoin Core code review, BIP324, and Sebastian&amp;rsquo;s plans for the next year.</description></item><item><title>Libsecp256k1 Maintainers Meeting</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10/2022-10-12-libsecp256k1/</link><pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10/2022-10-12-libsecp256k1/</guid><description>Q: Why C89? When I asked you this question a few years ago, I think you said gmaxwell.
A: There are a number of embedded devices that only support C89 and it&amp;rsquo;d be good to support those devices. That was the answer back then at least.
Q: Is it a large cost to keep doing C89?
A: The only cost is for the context stuff we want to make threadlocal. The CPUid or the x86-specific things.</description></item><item><title>Schnorr Signatures and Libsecp256k1</title><link>https://btctranscripts.com/bitcoin-explained/the-libsecp256k1-library/</link><pubDate>Sat, 18 Sep 2021 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-explained/the-libsecp256k1-library/</guid><description>In the episode of The Van Wirdum Sjorsnado, Aaron and Sjors discuss what the libsecp256k1 library is, why it matters for Bitcoin, and what it means that Schnorr signature support was merged.</description></item><item><title>libsecp256k1 testing</title><link>https://btctranscripts.com/greg-maxwell/2015-01-08-libsecp256k1-testing/</link><pubDate>Thu, 08 Jan 2015 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/greg-maxwell/2015-01-08-libsecp256k1-testing/</guid><description>Today OpenSSL de-embargoed CVE-2014-3570 &amp;ldquo;Bignum squaring may produce incorrect results&amp;rdquo;. That particular security advisory is not a concern for Bitcoin users, but it allows me to explain some of the context behind a slightly cryptic statement I made in the release notes for the upcoming Bitcoin Core 0.10: “we have reason to believe that libsecp256k1 is better tested and more thoroughly reviewed than the implementation in OpenSSL”. Part of that “reason to believe” was our discovery of this OpenSSL flaw.</description></item><item><title>OpenSSL bug discovery</title><link>https://btctranscripts.com/greg-maxwell/2015-01-08-openssl-bug/</link><pubDate>Thu, 08 Jan 2015 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/greg-maxwell/2015-01-08-openssl-bug/</guid><description>I contributed to the discovery and analysis of CVE-2014-3570 &amp;ldquo;Bignum squaring may produce incorrect results&amp;rdquo;. In this case, the issue was that one of the carry propagation conditions was missed. The bug was discovered as part of the development of libsecp256k1, a high performance (and hopefully high quality: correct, complete, side-channel resistant) implementation of the cryptographic operators used by Bitcoin, developed primarily by Bitcoin Core developer Pieter Wuille along with a number of other people.</description></item><item><title>Cryptography Audit</title><link>https://btctranscripts.com/grincon/2019/cryptography-audit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/grincon/2019/cryptography-audit/</guid><description>libsecp256k1-zkp audit
It&amp;rsquo;s a real treat to be able to be a part of this.
Why bother? Just a high-level, why are we taking community resources to spend time on audits? There are some perspectives&amp;ndash; it&amp;rsquo;s good for the community and it&amp;rsquo;s what you do.
Bitcoin had on professional security audits and did just fine. But it launched in a very different environment, and it did get audits eventually.
Beyond just covering your ass, it&amp;rsquo;s good to have these audits because if there&amp;rsquo;s a vulnerability then you can have someone with liability.</description></item></channel></rss>