<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>FROST on ₿itcoin Transcripts</title><link>https://btctranscripts.com/tags/frost/</link><description>Recent content in FROST on ₿itcoin Transcripts</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 14 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://btctranscripts.com/tags/frost/index.xml" rel="self" type="application/rss+xml"/><item><title>ROAST - Robust asynchronous Schnorr threshold signatures (2022-10-14)</title><link>https://btctranscripts.com/tabconf/2022/2022-10-14-roast/</link><pubDate>Fri, 14 Oct 2022 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/tabconf/2022/2022-10-14-roast/</guid><description>paper: https://ia.cr/2022/550
slides: https://slides.com/real-or-random/roast-tabconf22/
Hey. Hello. My name is Tim and I work at Blockstream. This is some academic work in joint with some of my coworkers.
Schnorr signatures in Bitcoin We recently got support for Schnorr signatures in bitcoin, introduced as part of bip340 which was activated as part of the taproot soft-fork. There are three main reasons why we want Schnorr signatures and prefer them over ECDSA bitcoin signatures which can still be used: one is that Schnorr signatures have provable security and give the theory guys more confidence; Schnorr signatures are more efficient; and the main thing is that we can get easier constructions of advanced signing protocols.</description></item><item><title>FROST (2022-10-11)</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10-11-frost/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10-11-frost/</guid><description>Introduction I am going to be going over the FROST implementation. I also have an early draft of the BIP. I am going to be focusing on the differences between the paper and the RFC and the overall scheme. This is meant to be an open discussion so feel free to jump in.
Distributed key generation Maybe one good place to start is to look at the example file in the PR.</description></item></channel></rss>