<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>build-system on ₿itcoin Transcripts</title><link>https://btctranscripts.com/tags/build-system/</link><description>Recent content in build-system on ₿itcoin Transcripts</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 10 Apr 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://btctranscripts.com/tags/build-system/index.xml" rel="self" type="application/rss+xml"/><item><title>Kernel</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/kernel/</link><pubDate>Wed, 10 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/kernel/</guid><description>The kernel project is just about done with its first stage (separating the validation logic into a separate library), so a discussion about the second stage of the project, giving the library a usable external API was held. Arguments around two questions were collected and briefly debated.
Should a C API for the kernel library be developed with the goal of eventually shipping with releases? There are a bunch of tools that can translate C++ headers, but they have downsides due to the name mangling.</description></item><item><title>CMake Update</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/cmake/</link><pubDate>Thu, 21 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/cmake/</guid><description>Update Hebasto has a branch he has been PRing into his own repo. Opened a huge CMake PR for Bitcoin core.
Introducing it chunk by chunk on his own repo
QT and GUIX is after that
Next steps How to get this into Core?
We don’t have something clean. Still have something wonky and how and what to do with autotools.
Ideally introduce CMake for a full cycle. It might still be a little too rough to ship on day 1 of the v27 cycle.</description></item><item><title>Kernel Planning</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/kernel-planning/</link><pubDate>Wed, 20 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/kernel-planning/</guid><description>Undecided on where to take this next
Carl purposely didn&amp;rsquo;t plan beyond what we have
Options: Look for who the users currently are of kernel code and polish those interfaces. We&amp;rsquo;ll end up with a bunch of trade-offs. And I don&amp;rsquo;t see us piecemeal extracting something that is useable to core and someone on the outside.
The GUI much high level to be on this list. The GUI uses a node interface, it doesn&amp;rsquo;t call an validation right now.</description></item><item><title>Kernel Update</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/kernel-update/</link><pubDate>Mon, 18 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/kernel-update/</guid><description>Original roadmap decided by carl was:
Stage 1
Step 1 Introduce bitcoin-chainstate &amp;ldquo;kitchen sink&amp;rdquo; Step 2 (wrapped up ~2mon ago) remove non-valiation code
Step 3 (where we are rn) remove non-validation headers from bitcoin-chainstate
We have mostly implemented Step 4 integrate libbitcoinkernel as a static library
Have the implementation on personal repo Need to look into breaking up files or live with code organization not being super logical Stage 2 (we should talk about this now) improve libbitcoinkernel interface</description></item><item><title>Libbitcoin kernel</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-26-libbitcoin-kernel/</link><pubDate>Wed, 26 Apr 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-26-libbitcoin-kernel/</guid><description>Questions and Answers Q: bitcoind and bitcoin-qt linked against kernel the libary in the future?
presenter: yes, that is a / the goal Q: Have you looked at an electrum implementation using libbitcoinkernel?
audience: yes, would be good to have something like this! audience: Also could do the long proposed address index with that? audience: not only address index, other indexes too. Q: Other use-cases:
audience: be able to run stuff on iOS Q: Should the mempool be in the kernel?</description></item><item><title>libbitcoinkernel</title><link>https://btctranscripts.com/misc/2022-04-12-carl-dong-libbitcoinkernel/</link><pubDate>Tue, 12 Apr 2022 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/misc/2022-04-12-carl-dong-libbitcoinkernel/</guid><description>Tracking issue in Bitcoin Core: https://github.com/bitcoin/bitcoin/issues/24303
Pieter Wuille on Chaincode podcast discussing consensus rules: https://btctranscripts.com/chaincode-labs/chaincode-podcast/2020-01-28-pieter-wuille/#part-2
Intro Hi everyone. I’m Carl Dong from Chaincode Labs and I’m here to talk about libbitcoinkernel, a project I’ve been working on that aims to extract Bitcoin Core’s consensus engine. When we download and run Bitcoin Core it is nicely packaged into a single bundle, a single application. However those of us who have studied the blade know that Bitcoin Core just like most applications is in fact a collection of subsystems.</description></item><item><title>Modularizing the Bitcoin Consensus Engine</title><link>https://btctranscripts.com/chaincode-labs/chaincode-podcast/modularizing-the-bitcoin-consensus-engine/</link><pubDate>Tue, 15 Dec 2020 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/chaincode-labs/chaincode-podcast/modularizing-the-bitcoin-consensus-engine/</guid><description>AJ: Do you want to talk about isolating the consensus engine?
CD: Sure. More recently I have dove into the codebase a little bit more. That started with looking at Matt’s async ProcessNewBlock work and playing around with that. Learning from that how do you make a change to the core engine of Bitcoin Core.
Matt Corallo’s PR on async ProcessNewBlock https://github.com/bitcoin/bitcoin/pull/16175
AJ: Can you talk about that PR a little bit and what it would do?</description></item><item><title>Bitcoin Toolchain, Unit Testing And Deterministic Builds</title><link>https://btctranscripts.com/edgedevplusplus/2018/bitcoin-toolchain-unit-testing-and-deterministic-builds/</link><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/edgedevplusplus/2018/bitcoin-toolchain-unit-testing-and-deterministic-builds/</guid><description>https://twitter.com/kanzure/status/1048103693885759489
Introduction Just to continue on what James said about the build system on Bitcoin Core&amp;hellip; I am going to talk about deterministic builds. I am MarcoFalke and I also work at Chaincode Labs in NYC.
Bitcoin Core Build System The build system is based on autotools, so it should just work anywhere where autotools runs. Just run ./autogen.sh ./configure and then make, that&amp;rsquo;s it.
We recently added support for MSVC builds mostly for Windows developers to do native builds not having to switch between Linux and Windows all the time.</description></item><item><title>Bitcoin Build System Security</title><link>https://btctranscripts.com/breaking-bitcoin/2019/bitcoin-build-system/</link><pubDate>Fri, 08 Jun 2018 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/breaking-bitcoin/2019/bitcoin-build-system/</guid><description>Alternative video without the Q&amp;amp;A session: https://www.youtube.com/watch?v=I2iShmUTEl8
https://twitter.com/kanzure/status/1137347937426661376
I couldn&amp;rsquo;t make it to Amsterdam this year, but I hope the graphics I have prepared for this talk can make up for my absence. Let&amp;rsquo;s say you want to be a good bitcoin citizen and start to run your own bitcoin node. Say you go to bitcoincore.org, you click the download button, and you open the disk image and you double click on Bitcoin Core.</description></item></channel></rss>