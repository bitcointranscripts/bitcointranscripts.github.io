<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>bitcoin-core on ₿itcoin Transcripts</title><link>https://btctranscripts.com/tags/bitcoin-core/</link><description>Recent content in bitcoin-core on ₿itcoin Transcripts</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 31 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://btctranscripts.com/tags/bitcoin-core/index.xml" rel="self" type="application/rss+xml"/><item><title>Discussing 0.21.0 Bitcoin Core Vulnerability Disclosures</title><link>https://btctranscripts.com/brink/the-bitcoin-development-podcast/discussing-0-21-0-bitcoin-core-vulnerability-disclosures/</link><pubDate>Wed, 31 Jul 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/brink/the-bitcoin-development-podcast/discussing-0-21-0-bitcoin-core-vulnerability-disclosures/</guid><description>Brink engineers Gloria Zhao and Niklas Gögge talk through the recently disclosed Bitcoin Core 0.21.0 vulnerabilities.</description></item><item><title>Discussing Pre-0.21.0 Bitcoin Core Vulnerability Disclosures</title><link>https://btctranscripts.com/brink/the-bitcoin-development-podcast/discussing-pre-0-21-0-bitcoin-core-vulnerability-disclosures/</link><pubDate>Thu, 11 Jul 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/brink/the-bitcoin-development-podcast/discussing-pre-0-21-0-bitcoin-core-vulnerability-disclosures/</guid><description>Brink engineers Gloria Zhao and Niklas Gögge talk through the recently disclosed Bitcoin Core pre-0.21.0 vulnerabilities.</description></item><item><title>ASMap</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/asmap/</link><pubDate>Thu, 11 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/asmap/</guid><description>From virtu&amp;rsquo;s presentation Distribution of nodes in ASes is low 8k reachable clearnet nodes / 30k unreachable A contributor has different statistics that show a lot more nodes, not sure which numbers are (more) correct. These numbers are would mean that some of the simulations are already a reality. Most nodes from Hetzner and AWS Shift compute and bandwidth to nodes in small ASes Unreachable nodes cannot sustain ten outbound connections Discussions Ignore AS for blocks-only connections?</description></item><item><title>assumeUTXO Mainnet Readiness</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/assumeutxo-mainnet-readiness/</link><pubDate>Wed, 10 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/assumeutxo-mainnet-readiness/</guid><description>Conceptual discussion about the point raised by Sjors in the Tracking issue: https://github.com/bitcoin/bitcoin/issues/29616#issuecomment-1988390944 The outcome is pretty much the same as in the issue: Some people think it’s better to keep the params, and the rest agree that at least it’s better to keep them for now A perspective on the options: With the params, it puts more responsibility (and potentially pressure) on the maintainers, if they are removed the users have to do much more due diligence which snapshot is ok to use.</description></item><item><title>Bitcoin Core 27.0</title><link>https://btctranscripts.com/bitcoin-explained/bitcoin-core-27-0/</link><pubDate>Wed, 10 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-explained/bitcoin-core-27-0/</guid><description>In this episode of Bitcoin, Explained, Aaron and Sjors explain what new features are included in the upcoming Bitcoin Core 27.0 release.</description></item><item><title>GUI Discussions</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/gui-discussions/</link><pubDate>Wed, 10 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/gui-discussions/</guid><description>QML GUI Slides
Q&amp;amp;A
Current GUI and QML progress seems slow? Code review / build system involvement? Will there be a test suite? Test suite yes, No fuzzing planned Why not RPC based? RPC not currently capable of building this UI on top of Is there a QML dependency graph? More dependencies required for sure May have to abandon depends approach Blocking calls historically an issue A consideration, but more to talk about here Integrated GUI Cost/Benefit Slides</description></item><item><title>Kernel</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/kernel/</link><pubDate>Wed, 10 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/kernel/</guid><description>The kernel project is just about done with its first stage (separating the validation logic into a separate library), so a discussion about the second stage of the project, giving the library a usable external API was held. Arguments around two questions were collected and briefly debated.
Should a C API for the kernel library be developed with the goal of eventually shipping with releases? There are a bunch of tools that can translate C++ headers, but they have downsides due to the name mangling.</description></item><item><title>Signet/Testnet4</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/signet-testnet4/</link><pubDate>Wed, 10 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/signet-testnet4/</guid><description>Signet Reset is less of a priority right now because the faucet is running again, still seeing huge number of requests Should still reset because of money making from signet coins Participants agree that getting coins doesn’t seem to be that hard, just need to ask on IRC or so Some people get repetitive messages about coins Signet can be reorged easily with a more work chain, that is actually shorter.</description></item><item><title>P2P Monitoring</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/p2p-monitoring/</link><pubDate>Tue, 09 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/p2p-monitoring/</guid><description>Slides
Started working on this about 2 years ago; in 2021. After we accidentally observed the address flooding anomaly/attack Primarily uses https://github.com/0xB10C/peer-observer to extract data from Bitcoin Core nodes with tracepoints. The infrastructure also includes a fork-observer connected to each node as well as an addrman-observer for each node. Additionally, detailed Bitcoin Core debug logs are avaliable. The main part are the Grafana dashboards. There’s a public version at public.peer.observer, which is redacted to not leak honeynode IP addresses.</description></item><item><title>Silent Payment Descriptors</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/silent-payment-descriptors/</link><pubDate>Tue, 09 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/silent-payment-descriptors/</guid><description>Silent payments properties:
two ECDH with each scan key cost of scanning increases with number of scan keys multiple address = tweak spend key with label We wouldn’t wanna flip that because then the spend key would be common, reducing anonymity and adding extra scanning work
BIP352 recommends NOT using with xpubs, it’s really difficult to have same public key with different chain codes.
Use case question: with silent payments, let&amp;rsquo;s say I make a legacy wallet and want to use one of my existing pubkeys and just combine it with a scan key, is that something that someone could make up.</description></item><item><title>Coin Selection</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/coin-selection/</link><pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/coin-selection/</guid><description>Todo: Overview PR that states goal of replacing Knapsack Introduce Sand Compactor Demonstrate via Simulations that situation is improved vs Knapsack Potential privacy leak: all algorithms would be deterministic, but feels insignificant or at least would not make it worse Should we clear out negative effective value UTXOs? Users seem to indicate that they would prefer to empty wallets completely even if they pay more General agreement that we should continue to spend negative effective value UTXOs SRD and SandCompactor will allow spending them, maybe below discardfeerate, maybe below 5 s/vB, maybe even below 10 s/vB Fallback mechanisms if no other solution found There is a gap between changeless solutions and minChange No don’t fall back to Lowest Larger CoinGrinder Pick whole wallet Should we fall back to CoinGrinder when fees are large compared to recipient amount?</description></item><item><title>Cross Input Signature Aggregation</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/cross-input-signature-aggregation/</link><pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/cross-input-signature-aggregation/</guid><description>cisaresearch.org, put together by fjahr Documents progress of half and full agg (theory, implementation and deployment) Provides collection of CISA-related resources (ML posts, papers, videos/podcasts, etc.) Should provide guidance for further development/open todos for contributors to grab HRF announces CISA Research Fellowship Seeks to answer questions how CISA will affect privacy, cost-savings, and much more during a four-month period for a total of .5BTC More: https://nostr.com/note1h4fdw5ttqmjwf3eqr0s5lqzjhdvwcayl0hrfnv726cw4eeag6phs9xszpw Will coordinate with them to align cisaresearch.</description></item><item><title>Great Consensus Cleanup</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/great-consensus-cleanup/</link><pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/great-consensus-cleanup/</guid><description>How bad are the bugs?
How good are the mitigations?
Improvements to mitigations in the last 5 years?
Anything else to fix?
The talk is a summary of https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710 .
Time warp What is it? Off by one in the retargeting period 2015 blocks instead of 2016 Impact Spam (since difficulty is 1 and block times are what restricts tx) UXTO set growth for the same reason 40 days to kill the chain Empowers 51% attacker Political games (users individually incentivized short-term to benefit from more block space, miners individually incentivized short-term to benefit of more subsidy) Minority miners not incentivized to try but it doesn’t cost anything Original mitigation is good Mandating new restrictions on the timestamp of the first block of a retarget period in relation to last blocks timestamp Merkle tree attacks w/64 byte txs Fake SPV inclusion &amp;lt;visual merkle tree diagram illustrating issue&amp;gt; Years ago the attack required more work than proof of work, so was less of a concern, not so now Arbitrary confs, less work Simple mitigation Require the coinbase transaction too, as all transactions on the same level of the merkle tree Block malleability Separate but similar attack Fork nodes Simple mitigation Dont cache context-less checks BIP’s original Mitigation Forbid &amp;lt;=64 byte transactions No need to disable &amp;lt;64 bytes transactions, since 64 is the issue Concern about existing, unbroadcasted 64 byte transaction?</description></item><item><title>Private tx broadcast</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/private-tx-broadcast/</link><pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/private-tx-broadcast/</guid><description>Updates:
TX is validated before broadcast (using mempool test). The sender ignores incoming messages from the receiver (except the handshake and PONG), so the sender cannot send back the tx before disconnection. When it receives the tx back, it becomes &amp;ldquo;just a tx in mempool&amp;rdquo;. TODO/NICE TO HAVE
Check if the wallet is going to rebroadcast a tx it has created but has been broadcast via private broadcast and if yes, prevent that.</description></item><item><title>Silent Payments Libsecp Module</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/silent-payments-libsecp/</link><pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/silent-payments-libsecp/</guid><description>High level vs low level API:
Low level API could be more useful for multi-party SP implementation High level API is safer as it avoid managing SP state and staging secret data Rough consensus that high level API is preferable Responsibility of grouping and sorting recipients by scan key. Client vs library?
We need to assert grouping in the lib anyway to avoid catastrophic failure So it just makes sense for the lib to take care of the grouping Why we need grouping in the first place?</description></item><item><title>Stratum v2</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/stratumv2/</link><pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/stratumv2/</guid><description>I explained the various stratum v2 roles described in the images here: https://stratumprotocol.org
Described the three layers of my main PR: https://github.com/bitcoin/bitcoin/pull/29432
Noise protocol Transport based on the TransportV1 / TransportV2 class Application layer (listens on new port, sv2 apps connect to it) Discussion point: the Job Declarator client role typically runs on the same machine as the template provider, so technically we don’t need noise encryption. However, we may in the future want to “take over” some of the Job Declarator client work, at which point we would need it.</description></item><item><title>Weak Blocks</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/weak-blocks/</link><pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/weak-blocks/</guid><description>Weak blocks: propagate stuff with low PoW as you are building it
use cases / why you wouldn’t hear of stuff nonstandard to you somehow didn’t propagate to you miner’s prioritisetransaction stuff with no fees why is this coming up now? more mempool heterogeneity “accelerate nonstandard transactions” services poc code: submits to mempool, rejected ones are stored in separate cache Questions
why would a miner do this? (similar to compact blocks?</description></item><item><title>The Block 1, 983, 702 Problem</title><link>https://btctranscripts.com/bitcoin-explained/the-block-1-983-702-problem/</link><pubDate>Thu, 21 Dec 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-explained/the-block-1-983-702-problem/</guid><description>&lt;p>The episode from &amp;ldquo;Bitcoin Explained&amp;rdquo; podcast, hosted by Aaron van Wirdum and Sjors Provoost, discusses a complex issue in the Bitcoin protocol known as the &amp;ldquo;Block 1, 983, 702 Problem.&amp;rdquo; The dialogue delves into the historical bug in Bitcoin&amp;rsquo;s protocol that allowed for the existence of duplicate transactions, leading to potential consensus failure and the loss of Bitcoin for miners. This problem, stemming from an &amp;ldquo;OG Satoshi bug, &amp;quot; has been partially addressed over time through various Bitcoin Improvement Proposals (BIPs), specifically BIP30 and BIP34, which aimed to prevent duplicate transactions by ensuring unique coinbase transactions in each block.&lt;/p>
&lt;p>However, a subsequent realization highlighted a loophole: early blocks (pre-BIP34) could contain numerical sequences in their coinbase transactions that might accidentally be replicated in future blocks, posing a potential risk of creating duplicate transactions again. This issue, dubbed the &amp;ldquo;Block 1, 983, 702 Problem, &amp;quot; could theoretically allow an attacker to exploit this loophole, though it would require significant resources and specific conditions to be feasible.&lt;/p>
&lt;p>To mitigate this risk, a temporary fix was implemented in 2018, deciding to reinstate BIP30 checks from block 1, 983, 702 onwards, giving the Bitcoin community time to find a more permanent solution. Several potential fixes are discussed, including making SegWit mandatory for all blocks, which would inherently prevent the duplication issue by ensuring a unique identifier in each block that was not present in pre-BIP34 blocks.&lt;/p>
&lt;p>Throughout the conversation, Provoost and van Wirdum explore the technical nuances of the problem, the historical context of its discovery, and the implications for Bitcoin&amp;rsquo;s security and consensus mechanism. They emphasize the importance of proactive problem-solving in the Bitcoin community while acknowledging the complexities involved in implementing changes to the protocol.&lt;/p></description></item><item><title>Bitcoin Core 26.0 (And F2Pool's OFAC Compliant Mining Policy)</title><link>https://btctranscripts.com/bitcoin-explained/bitcoin-core-26-0-and-f2pool-s-ofac-compliant-mining-policy/</link><pubDate>Thu, 23 Nov 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-explained/bitcoin-core-26-0-and-f2pool-s-ofac-compliant-mining-policy/</guid><description>In this episode of Bitcoin, Explained, Aaron and Sjors explain what new features are included in the upcoming Bitcoin Core 0.26 release. They also briefly discuss recent developments concerning the transaction inclusion policy of mining pool F2Pool, which appears to have been compliant with the OFAC sanctions list.</description></item><item><title>CMake Update</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/cmake/</link><pubDate>Thu, 21 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/cmake/</guid><description>Update Hebasto has a branch he has been PRing into his own repo. Opened a huge CMake PR for Bitcoin core.
Introducing it chunk by chunk on his own repo
QT and GUIX is after that
Next steps How to get this into Core?
We don’t have something clean. Still have something wonky and how and what to do with autotools.
Ideally introduce CMake for a full cycle. It might still be a little too rough to ship on day 1 of the v27 cycle.</description></item><item><title>Remove the legacy wallet and updating descriptors</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/wallet-legacy-upgrade/</link><pubDate>Thu, 21 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/wallet-legacy-upgrade/</guid><description>Wallet migration + legacy wallet removal The long-term goal targeted for v29 is to delete BDB and drop the legacy wallet. The migration PR for the GUI was just merged recently, so that will be possible for the next release v26. The &amp;ldquo;Drop migratewallet experimental warning&amp;rdquo; PR (#28037) should also go in before v26. Migrating without BDB should be possible for v27 (PRs &amp;ldquo;Independent BDB&amp;rdquo; #26606 and &amp;ldquo;Migrate without BDB&amp;rdquo; #26596).</description></item><item><title>Signature Aggregation Update</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/signature-aggregation/</link><pubDate>Thu, 21 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/signature-aggregation/</guid><description>The status of the Half-Agg BIP? TODOs but also no use cases upcoming so adding it to the BIP repo doesn&amp;rsquo;t seem useful
BIP Half-agg TODOs for BIP
Consider setting z_0 = 1
Reconsider maximum number of signatures
Add failing verification test vectors that exercise edge cases.
Add signing test vectors (passing and failing, including edge cases)
Test latest version of hacspec (run through checker)
Half-agg BIP has a max number of signatures (2^16), making testing easy</description></item><item><title>AssumeUTXO Update</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/assumeutxo-update/</link><pubDate>Wed, 20 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/assumeutxo-update/</guid><description>One remaining PR
#27596 Adds loadtxoutset and getchainstate RPC, documentation, scripts, tests Adds critical functionality needed for assumeutxo validation to work: net processing updates, validation interface updates, verifydb bugfix, cache rebalancing Makes other improvements so pruning, indexing, -reindex features are compatible with assumeutxo and work nicely Adds hardcoded assumeutxo hash at height 788,000 Probably this should be moved to separate PR? Questions about initial next steps (unanswered):
Which release is this PR targeted for?</description></item><item><title>Kernel Planning</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/kernel-planning/</link><pubDate>Wed, 20 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/kernel-planning/</guid><description>Undecided on where to take this next
Carl purposely didn&amp;rsquo;t plan beyond what we have
Options: Look for who the users currently are of kernel code and polish those interfaces. We&amp;rsquo;ll end up with a bunch of trade-offs. And I don&amp;rsquo;t see us piecemeal extracting something that is useable to core and someone on the outside.
The GUI much high level to be on this list. The GUI uses a node interface, it doesn&amp;rsquo;t call an validation right now.</description></item><item><title>Libsecp256k1 Meeting</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/libsecp256k1-meeting/</link><pubDate>Wed, 20 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/libsecp256k1-meeting/</guid><description>Topics: Scope, Priorities Next release Dec 16th Scope: Informal agreeement currently What new modules to add? Needs a specification (whatever that means, Pseudocode etc.0 Should we formalize the agreement more? Should also not be too specific What are examples where this came up in the past? Exfill, Ecdh, Elswift, SIlent payments, musig, schnorr, adaptor sigs, half-agg How specific do we need to be? Tie it to examples to be more clear ECIES (Interesting in the future?</description></item><item><title>P2P Design Goals</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/p2p-design-goals/</link><pubDate>Wed, 20 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/p2p-design-goals/</guid><description>Guiding Questions What are we trying to achieve?
What are we trying to prevent?
How so we weight performance over privacy?
What is our tolerance level for net attacks?
Are we trying to add stuff to the network or are we trying to prevent people getting information?
Network topology: By design we are trying to prevent the topology being known Information creation, addresses, txs or blocks
We want blocks at tips fast - consensus critical information needs to be as fast as possible - ability to get the information - forgetting that there are multiple networks - the purpose is to know what the current most work chain tip is Even the addr relay network - everything falls apart if you can’t get that information The crux of the p2p network is to propagate what is the most work Txs can take much much longer but don’t want to leak the source of the origin The privacy implications of Txs makes it difficult Could give up fast propagations for privacy for txs that would be fine but not for blocks.</description></item><item><title>Package Relay Planning</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/package-relay-planning/</link><pubDate>Wed, 20 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/package-relay-planning/</guid><description>Package Relay Planning What can we do better, keep doing?
This is all the work that needs to be done for package relay -&amp;gt; big chart
Left part is mempool validation stuff. It’s how we decide if we put transactions in the mempool after receiving them “somehow”.
Right is peer to peer stuff
Current master is accepting parents-and-child packages(every tx but last must be a parent of child), one by one, then all at the same time.</description></item><item><title>Privacy Metrics for Coin Selection</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/privacy-metrics/</link><pubDate>Wed, 20 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/privacy-metrics/</guid><description>Goal: Get privacy consciousness into coin selection Configurability Privacy vs cost (waste) Privacy: weighted on a 0-5 scale Cost: weighted on a 0-5 scale Convert privacy preference (0-5) into satoshis to make it compatible with the waste score Combined score = PrivacyScoreWeight x PrivacyScore + CostWeight x WasteMetric 20-30 sats per privacy point as a gut feeling Privacy score example: sending to different script type than inputs of transaction We already match the change type to the recipient type, but that can still mean that we have differently typed inputs than outputs If we have two input sets, where one has the same type and the other has a different type, the one with the same type inputs should be preferred by the privacy metric Privacy score example: Preferring spending UTXOs of similar age E.</description></item><item><title>Discussion on open Coin Selection matters</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/wallet-coin-selection/</link><pubDate>Tue, 19 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/wallet-coin-selection/</guid><description>Topic: review of https://github.com/bitcoin/bitcoin/pull/27601 Problem statement: when doing manual RBF (without using bumpfee RPC) we treat previous change output as a receiver and thus create two outputs to the same address Proposal: combine amount on outputs to the same address What are valid use-cases for having the same address for change and output? Consolidation with payment Alternative: Use sendall with two outputs one with an amount and yours without an amount Payment and send at least X to yourself Consolidate with automatic coin selection of at least X Alternative: Implement &amp;ldquo;Send at least&amp;rdquo; as a separate and explicitly feature Consider just giving an error if change destination is the same with one of the outputs Should we do the enforcement only at RPC level?</description></item><item><title>P2P working session</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/p2p-working-session/</link><pubDate>Tue, 19 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/p2p-working-session/</guid><description>Erlay Gleb is active and ready to move forward - #21515 Are there people generally interested in review? I wanted first to convince myself that this is useful. I couldn&amp;rsquo;t reproduce the numbers from the paper - 5% was what I got with ~100 connections. My node is listening on a non-standard port. It may be that I don&amp;rsquo;t have a normal sample. There is a pull request that could add RPC stats to bitcoind - that might get better numbers.</description></item><item><title>Kernel Update</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/kernel-update/</link><pubDate>Mon, 18 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/kernel-update/</guid><description>Original roadmap decided by carl was:
Stage 1
Step 1 Introduce bitcoin-chainstate &amp;ldquo;kitchen sink&amp;rdquo; Step 2 (wrapped up ~2mon ago) remove non-valiation code
Step 3 (where we are rn) remove non-validation headers from bitcoin-chainstate
We have mostly implemented Step 4 integrate libbitcoinkernel as a static library
Have the implementation on personal repo Need to look into breaking up files or live with code organization not being super logical Stage 2 (we should talk about this now) improve libbitcoinkernel interface</description></item><item><title>Code Review and BIP324</title><link>https://btctranscripts.com/brink/the-bitcoin-development-podcast/code-review-and-bip324/</link><pubDate>Wed, 06 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/brink/the-bitcoin-development-podcast/code-review-and-bip324/</guid><description>Sebastian Falbesoner (theStack) and Mike Schmidt talk about Bitcoin Core code review, BIP324, and Sebastian&amp;rsquo;s plans for the next year.</description></item><item><title>Bitcoin Core 25.0</title><link>https://btctranscripts.com/bitcoin-explained/bitcoin-core-v25/</link><pubDate>Mon, 26 Jun 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-explained/bitcoin-core-v25/</guid><description>Aaron van Wirdum: 00:00:21
Live from Utrecht, this is Bitcoin&amp;hellip;
Sjors Provoost: 00:00:24
Explained.
Introduction Aaron van Wirdum: 00:00:24
Hey, Sjors, we&amp;rsquo;re back. We&amp;rsquo;re back in beautiful, sunny Utrecht after I spent some time in Miami and Prague. You spent some time in Prague, and more Prague, is that right?
Sjors Provoost: 00:00:38
Mostly Prague.
Aaron van Wirdum: 00:00:38
You were in Prague for a while. That&amp;rsquo;s where we recorded the previous episode about Stratum V2.</description></item><item><title>AssumeUTXO update</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-27-assumeutxo/</link><pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-27-assumeutxo/</guid><description>Goals allow nodes to get a utxo set quickly (1h) at the same time, no major security concessions Approach Provide serialized utxo snapshot get headers chain first, load snapshot and deserialize, sync to tip from that then start background verification with a 2nd snapshot finally, compare hashes when background IBD hits snapshot base Progress update lots of refactoring has been done; ChainStateManager was introduced, globals removed, mempool / blockstorage refactored init / shutdown logic changes have been merged wallet changes done p2p changes still under review (i.</description></item><item><title>Fuzzing</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-27-fuzzing/</link><pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-27-fuzzing/</guid><description>Slides: https://docs.google.com/presentation/d/1NlTw_n60z9bvqziZqU3H3Jw7Xs5slnQoehYXhEKrzOE
Fuzzing Fuzzing is done continuously. Fuzz targets can pay off even years later by finding newly introduced bugs. Example in slide about libFuzzer fuzzing a parse_json function which might crash on some weird input but won’t report invalid json inputs that pass parsing. libFuzzer does coverage guided feedback loop + helps with exploring control flow. Bug Oracles Assertions - Adding assertions is tricky for network code. We add Assume() when continuing is not worse than crashing.</description></item><item><title>Libbitcoin kernel</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-26-libbitcoin-kernel/</link><pubDate>Wed, 26 Apr 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-26-libbitcoin-kernel/</guid><description>Questions and Answers Q: bitcoind and bitcoin-qt linked against kernel the libary in the future?
presenter: yes, that is a / the goal Q: Have you looked at an electrum implementation using libbitcoinkernel?
audience: yes, would be good to have something like this! audience: Also could do the long proposed address index with that? audience: not only address index, other indexes too. Q: Other use-cases:
audience: be able to run stuff on iOS Q: Should the mempool be in the kernel?</description></item><item><title>Project Meta Discussion</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-26-meta-discussion/</link><pubDate>Wed, 26 Apr 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-26-meta-discussion/</guid><description>Part 1 What makes bitcoin core fun Intellectual challenge/problems Interesting, diverse, open source project collaborators Meaningful project goals Culturally the project is a meritocracy Scientific domain intersecting with real world problems Real world usage What makes bitcoin core not fun Long delivery cycles -&amp;gt; lack of shippers high Soft fork activation Antagonism (internal and external) Ambiguity of feature/code contribution usage Relationships Financial stability Unclear goals Part 2 Fitting rocks, pebbles, and sand in a jar analogy Time based releases vs feature based releases?</description></item><item><title>ASMap</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-27-asmap/</link><pubDate>Tue, 25 Apr 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-27-asmap/</guid><description>Should we ship it every Core release? The initial idea is shipping a map file every Core release. Fabian wrote an article about how would be integrated into the deployment (https://gist.github.com/fjahr/f879769228f4f1c49b49d348f80d7635). Some devs pointed out an option would be to have it separated to the release process, any regular contributor could update it whenever they like (who would do it? frequency?). Then when the release comes around one of the recent ones will be chosen.</description></item><item><title>Package Relay Primer</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-25-package-relay-primer/</link><pubDate>Tue, 25 Apr 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-25-package-relay-primer/</guid><description>Slides: https://docs.google.com/presentation/d/12YPlmmaCiNNL83b3FDmYwa7FKHP7yD0krzkEzM-tkTM
Problems CPFP Doesn’t Work When Mempool Min Feerate Rises Bad for users who want to use CPFP and L2s, but also a glaring limitation in our ability to assess transaction incentive compatibility
Pinning being able to feebump transaction is a pinning concern counterpart can intentionally censor your transactions, and in L2 that can mean stealing your money because you didn’t meet the timelock Pinning examples ANYONECANPAY -&amp;gt; anyonecanpin: add input that comes from huge unconfirmed low-fee rate tx -&amp;gt; absolute feerate needs to increase, so you&amp;rsquo;re paying more fees for the tx to confirm slower shared descendant limit can be monopolized descendant limit is 25 txs, so someone else can fill up that limit we have a carve-out for CPFP already to try and mitigate that RBF Rule 3 is gameable replacement fees must &amp;gt; all descendants, and they may be large, low feerate -&amp;gt; expensive most L2s have pinning problems, so we need to fix that Get rid of txid-based relay we want to avoid txid based relay can&amp;rsquo;t deduplicate txid and wtxid that correspond to the same tx can&amp;rsquo;t deduplicate txs that only differ in witness we still require txid-based relay for orphans, because txs specify prevouts by txid -&amp;gt; so we don&amp;rsquo;t know which wtxid to request Definitions pinning attack: a censorship attack on relay/mempool level, abusing policy</description></item><item><title>Refactors</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-25-refactors/</link><pubDate>Tue, 25 Apr 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-25-refactors/</guid><description>One take-away from the Chaincode residency in 2019 was: Don’t do refactors (unless you really need it)
A marked increase from 2019 to today (Chart on the increase of refactors)
The comments and PRs are steady but the refactors are increasing
Quibble about how regular reviewers are counted (should be higher than 5 comments)
Project reasons:
Ossification? Natural way mature projects progress/Boy Scout Rule Personal reasons:
Time commitment of large review may not be possible (extended period of singular focus) Merged PRs as proof of work, could help with the next grant Feels good to ship What is the effect?</description></item><item><title>Silent Payments</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-26-silent-payments/</link><pubDate>Tue, 25 Apr 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-26-silent-payments/</guid><description>BIP Overview Scanning key and spending key are different: better security. Silent payment transactions are indistinguishable from transactions with taproot outputs on-chain.
Q: Address labeling, why not create two silent payment addresses?
A: It doubles scanning costs.
Limited to taproot UTXOs (currently about 3% of transactions) but when it increases we should find ways to optimize scanning, even though it currently does not seem to be an issue.
Q: Why no P2PK</description></item><item><title>Peer-to-peer Encryption</title><link>https://btctranscripts.com/bitcoin-explained/peer-to-peer-encryption/</link><pubDate>Mon, 24 Apr 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-explained/peer-to-peer-encryption/</guid><description>In this episode of Bitcoin, Explained, Aaron and Sjors discuss BIP 324, the proposal by Dhruv, Pieter Wuille and Tim Ruffing to add peer-to-peer (P2P) encryption to the Bitcoin protocol. They explain why this is needed, how it would work, and which problems it would, and wouldn’t solve.</description></item><item><title>The Bitcoin Core Wallet</title><link>https://btctranscripts.com/chaincode-labs/chaincode-podcast/the-bitcoin-core-wallet/</link><pubDate>Thu, 09 Mar 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/chaincode-labs/chaincode-podcast/the-bitcoin-core-wallet/</guid><description>The discussion with Andrew Chow explores the evolution of the Bitcoin Core wallet, emphasizing significant developments like descriptor wallets and PSBT for enhancing functionality and interoperability. The conversation highlights the continuous efforts to refactor and improve the wallet&amp;rsquo;s codebase, addressing challenges and introducing innovations in coin selection and transaction management. The importance of maintaining high security and review standards is underscored, reflecting the wallet&amp;rsquo;s role in supporting Bitcoin&amp;rsquo;s core principles. Future directions include improving the wallet&amp;rsquo;s performance, user experience, and GUI.</description></item><item><title>Demystifying and Understanding Bitcoin Core Development</title><link>https://btctranscripts.com/bitcoin-review-podcast/demystifying-and-understanding-bitcoin-core-development/</link><pubDate>Wed, 22 Feb 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-review-podcast/demystifying-and-understanding-bitcoin-core-development/</guid><description>Intro NVK: 00:00:40
Today, we&amp;rsquo;re going to be talking about Bitcoin Core development and trying to demystify it, maybe sort of like shed some light. So, some of the FUD goes away and new FUD comes in maybe, who knows?
Guest introductions NVK: 00:00:51
I have this awesome panel with me. I have a James O&amp;rsquo;Beirne. Hi James.
James O&amp;rsquo;Beirne: 00:00:56
Hi, good to be here.
NVK: 00:00:58
Thanks for coming.</description></item><item><title>Bitcoin Core 24.0 Bug</title><link>https://btctranscripts.com/bitcoin-explained/bitcoin-core-v24-bug/</link><pubDate>Thu, 29 Dec 2022 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-explained/bitcoin-core-v24-bug/</guid><description>Introduction Aaron van Wirdum: 00:00:20
Live from Utrecht, this is Bitcoin Explained. Sjors, welcome back. I saw you were promoting your book everywhere in the world over the past couple of weeks. Where did you go?
Sjors Provoost: 00:00:31
Absolutely. I went to a place called New York, a place called Nashville and a place called Austin and those are all in the United States.
Aaron van Wirdum: 00:00:39
That sounds very exotic.</description></item><item><title>How to get started contributing sustainably to Bitcoin Core</title><link>https://btctranscripts.com/adopting-bitcoin/2022/how-to-get-started-contributing-sustainably-to-bitcoin-core/</link><pubDate>Fri, 11 Nov 2022 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/adopting-bitcoin/2022/how-to-get-started-contributing-sustainably-to-bitcoin-core/</guid><description>Introduction Host: 00:00:00
Now we are going to have a panel conversation; a kind of fireside chat between Stephan Livera and Jon Atack and the name is how to get started contributing sustainably to Bitcoin Core so if you are a dev and are looking to start to contribute to Bitcoin Core, this is your talk.
Stephan: 00:00:32
Okay, so thank you for having us and thank you for joining us.</description></item><item><title>The Bitcoin Core wallet and wrangling bitcoin data</title><link>https://btctranscripts.com/chaincode-labs/chaincode-podcast/the-bitcoin-core-wallet-and-wrangling-bitcoin-data/</link><pubDate>Fri, 21 Oct 2022 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/chaincode-labs/chaincode-podcast/the-bitcoin-core-wallet-and-wrangling-bitcoin-data/</guid><description>In this conversation, Adam Jonas and Mark Erhardt discuss their work with Josie Baker on Bitcoin data analysis, focusing on mempool data collection and Bitcoin Core wallet improvements. Josie explains his work in standardizing and cleaning mempool data to create a comprehensive, open-source dataset. This dataset will facilitate research and development in areas such as fee estimation and transaction propagation. They also delve into Bitcoin Core wallet enhancements, including privacy improvements and efficient coin selection methods. The conversation highlights the importance of reproducibility, empirical analysis, and open-source collaboration in advancing Bitcoin technology. Josie’s efforts emphasize the value of making Bitcoin data accessible and fostering a community of contributors in the Bitcoin development ecosystem.</description></item><item><title>Strategies for getting stuff merged</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10/2022-10-12-merging/</link><pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10/2022-10-12-merging/</guid><description>Introduction I wanted to talk about things that have been leaking out over other conversations because sometimes people get frustrated that their stuff doesn&amp;rsquo;t get merged. This is not a new problem. It&amp;rsquo;s an issue that has been going on for a long time. It can be frustrating. I don&amp;rsquo;t have the answer. This is going to be more discussion based and I&amp;rsquo;ve asked a few folks to talk about strategies that have worked for them.</description></item><item><title>Bitcoin Core and GitHub</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10/2022-10-11-github/</link><pubDate>Tue, 11 Oct 2022 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10/2022-10-11-github/</guid><description>Bitcoin Core and GitHub
I think at this point it&amp;rsquo;s quite clear that it&amp;rsquo;s not necessarily a &amp;ldquo;if&amp;rdquo; we get off github, but a when and how. The question would be, how would we do that? This isn&amp;rsquo;t really a presentation. It&amp;rsquo;s more of a discussion. There&amp;rsquo;s a few things to keep in mind, like the bitcoin-gh-meta repo, which captures all the issues, comments and pull requests. It&amp;rsquo;s quite good. The ability to reconstruct what&amp;rsquo;s inside of here on another platform doesn&amp;rsquo;t really seem possible in its entirety.</description></item><item><title>Fee Market</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10/2022-10-11-fee-market/</link><pubDate>Tue, 11 Oct 2022 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10/2022-10-11-fee-market/</guid><description>Fee market
There are two times we have had sustained fees: late 2017 and early 2021. In late 2017 we saw lots of things break because people hadn&amp;rsquo;t written software to deal with variable fees or anything. I don&amp;rsquo;t know if that was as big of a problem in 2021. I do worry that this will start to become a thing. If you have no variable fee market, and you can just throw in 1 sat/vbyte for several years then it will just work until it doesn&amp;rsquo;t.</description></item><item><title>Package Relay BIP, implementation, V3, and package RBF proposals</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10/2022-10-11-package-relay/</link><pubDate>Tue, 11 Oct 2022 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10/2022-10-11-package-relay/</guid><description>Notes on Package Relay BIP, implementation, V3, and package RBF proposals from Core Dev in Atlanta.
Also at https://gist.github.com/glozow/8469dc9c3a003c7046033a92dd504329.
Ancestor Package Relay BIP BIP updated to be receiver-initiated ancestor packages only. Sender-initiated vs receiver-initiated package relay. Receiver-intiated package relay enables a node to ask for more information when they suspect they are missing something (i.e. to resolve orphans). Sender-initiated package relay should, theoretically, save a round trip by notifying the receiver ahead of time that &amp;ldquo;hey, this is going to be a package, so make sure you download and submit these transactions together.</description></item><item><title>Stratum V2</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10/2022-10-11-stratum-v2/</link><pubDate>Tue, 11 Oct 2022 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10/2022-10-11-stratum-v2/</guid><description>Introduction There was an announcement earlier this morning that announced the open-source project implementing Stratum v2 is ready for testing now. Spiral has been contributing to this project for a few years. There&amp;rsquo;s a few other companies funding it as well. It&amp;rsquo;s finally ready for testing.
History About 4 years ago or so, Matt proposed BetterHash which focused on enabling miners to be able to do their own transaction selection. There was an independent effort from Braaains that they called stratum v2 which added encryption and authentication between miners and pools and other improvements over stratum v1 like switching from JSON to binary and some other optimizations that were needed over the past 10 years.</description></item><item><title>BIP324 - Version 2 of p2p encrypted transport protocol</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10/2022-10-10-p2p-encryption/</link><pubDate>Mon, 10 Oct 2022 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10/2022-10-10-p2p-encryption/</guid><description>Previous talks https://btctranscripts.com/scalingbitcoin/milan-2016/bip151-peer-encryption/
https://btctranscripts.com/sf-bitcoin-meetup/2017-09-04-jonas-schnelli-bip150-bip151/
https://btctranscripts.com/bitcoin-core-dev-tech/2019-06-07-p2p-encryption/
https://btctranscripts.com/breaking-bitcoin/2019/p2p-encryption/
Introduction and motivation Can we turn down the lights? &amp;ldquo;Going dark&amp;rdquo; is a nice theme for the talk. I also have dark coffee. Okay.
We&amp;rsquo;re going to talk a little bit about bip324. This is a BIP that has had a long history. We even have a page about the history. It all started more than 6 years ago&amp;hellip; Bitcoin p2p traffic is unencrypted. It always has been.</description></item><item><title>Misc</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10/2022-10-10-misc/</link><pubDate>Mon, 10 Oct 2022 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10/2022-10-10-misc/</guid><description>Web of Trust Some of the public key server operators interpreted GDPR to mean that they can&amp;rsquo;t operate public key infrastructure anymore. There needs to be another solution for p2p distribution of keys and Web-of-Trust.
&amp;lt;bitcoin-otc.com&amp;gt; continues to be the longest operating PGP web-of-trust using public key infrastructure. Rumplepay might be able to bootstrap a web-of-trust over time.
Stealth addresses and silent payments Here&amp;rsquo;s something controversial. Say you keep an in-memory map of all addresses that have already been used.</description></item><item><title>Bitcoin Core 24.0</title><link>https://btctranscripts.com/bitcoin-explained/bitcoin-core-v24/</link><pubDate>Fri, 07 Oct 2022 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-explained/bitcoin-core-v24/</guid><description>Intro Aaron van Wirdum: 00:00:20
Live from Utrecht, this is Bitcoin
Sjors Provoost: 00:00:23
Explained.
Aaron van Wirdum: 00:00:24
Hey Sjors.
Sjors Provoost: 00:00:25
What&amp;rsquo;s up?
Aaron van Wirdum: 00:00:26
I&amp;rsquo;m good.
Sjors Provoost: 00:00:27
How do you like the weather?
Aaron van Wirdum: 00:00:29
It was too hot all summer and then it was nice for about a week and now we&amp;rsquo;re back to too cold.
Sjors Provoost: 00:00:36</description></item><item><title>Tradeoffs in Permissionless Systems</title><link>https://btctranscripts.com/mit-bitcoin-expo/mit-bitcoin-expo-2022/tradeoffs-in-permissionless-systems/</link><pubDate>Tue, 05 Jul 2022 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/mit-bitcoin-expo/mit-bitcoin-expo-2022/tradeoffs-in-permissionless-systems/</guid><description>Introduction Hello. I wanted to make a talk about what I work on because I consider it the, well, the area of code that I work in, because I considered it to be one of the most fascinating and definitely the most underrated part of Bitcoin that no one ever talks about. And the reason is I kind of see it as where one of the most important ideological goals of Bitcoin translates into technical challenges, which also happens to be very, very interesting.</description></item><item><title>Address Relay</title><link>https://btctranscripts.com/chaincode-labs/chaincode-podcast/address-relay/</link><pubDate>Fri, 13 May 2022 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/chaincode-labs/chaincode-podcast/address-relay/</guid><description>Martin Zumsande joins us to tell us about the address spam in the summer of 2021 and his interests in AddrRelay and Bitcoin Core development.</description></item><item><title>Bitcoin Core 23.0</title><link>https://btctranscripts.com/bitcoin-explained/bitcoin-core-v23/</link><pubDate>Sun, 24 Apr 2022 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-explained/bitcoin-core-v23/</guid><description>Intro Aaron van Wirdum: 00:00:20
Live from Utrecht, this is Bitcoin Explained. Sjors, are we still making a bi-weekly podcast?
Sjors Provoost: 00:00:28
I mean, it depends on what you mean by bi. It&amp;rsquo;s more like a feeling, right?
Aaron van Wirdum: 00:00:32
We make a podcast when we feel about it these days. Is that the rule?
Sjors Provoost: 00:00:36
No, it&amp;rsquo;s also when we&amp;rsquo;re not traveling or sick or whatever.</description></item><item><title>Block Building</title><link>https://btctranscripts.com/chaincode-labs/chaincode-podcast/block-building/</link><pubDate>Tue, 01 Feb 2022 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/chaincode-labs/chaincode-podcast/block-building/</guid><description>Postdoc Researcher Clara joins Murch to discuss their block building research. They cover their proposal, which outlines suggested improvements to the current Bitcoin Core block building algorithm using candidate sets</description></item><item><title>Onboarding Bitcoin and Lightning Developers</title><link>https://btctranscripts.com/adopting-bitcoin/2021/onboarding-bitcoin-and-lightning-developers/</link><pubDate>Tue, 16 Nov 2021 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/adopting-bitcoin/2021/onboarding-bitcoin-and-lightning-developers/</guid><description>Introductions Introducer: 00:00:15
The next talk is going to be Onboarding Bitcoin and Lightning Developers with Will Clark, Gloria Zhao, Josie - Bitcoin Core contributor, Jonas Nick, please come to the stage.
Pablo Fernandez: 00:00:32
Hey, guys, how are you doing? Welcome. So we are going to be talking about onboarding Bitcoin and Lightning developers. Do you guys want to introduce yourselves? I think all of you have been on stage already, but want to do a quick round?</description></item><item><title>Bitcoin Was Under ATTACK!</title><link>https://btctranscripts.com/bitcoin-explained/bitcoin-was-under-attack/</link><pubDate>Thu, 11 Nov 2021 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-explained/bitcoin-was-under-attack/</guid><description>&lt;p>Hosts Aaron van Wirdum and Sjors Provoost finally met in Utrecht again to record Bitcoin, Explained. In this episode, they discuss a recent attack on the Bitcoin network, where some nodes were flooding peers with fake IP-addresses.&lt;/p>
&lt;p>As previously discussed in episode 13, Bitcoin nodes connect to peers on the network through IP-addresses, which they learn from their existing peers. Nodes on the network essentially share the IP-addresses of other nodes.&lt;/p>
&lt;p>Recently, however, some Bitcoin nodes shared large amounts of IP-addresses that weren’t associated with real Bitcoin nodes at all. While this attack did not do very much damage, it did waste resources from nodes on the network. On top of that, Aaron and Sjors explain, the attack could offer the attacker insight into Bitcoin’s network topology by analyzing how the fake IP-addresses spread through the network.&lt;/p>
&lt;p>Finally, Aaron and Sjors discuss how the attack was solved by rate limiting the amount of IP-addresses than any node will allow its peers to be shared. Further, they consider how in free and open source software development, fixing problems is not always as straightforward as it may seem…&lt;/p></description></item><item><title>The P2P network</title><link>https://btctranscripts.com/chaincode-labs/chaincode-podcast/the-p2p-network/</link><pubDate>Mon, 18 Oct 2021 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/chaincode-labs/chaincode-podcast/the-p2p-network/</guid><description>In this episode of the Chaincode Podcast, Amiti Uttarwar discusses the intricacies of peer-to-peer (P2P) networks in Bitcoin with hosts Adam Jonas and Mark Erhardt. Amiti explains her fascination with P2P due to its logical yet complex interactions across the global network of nodes. She outlines five key principles for designing effective P2P networks: reliability, timeliness, accessibility, privacy, and upgradeability. The conversation delves into specific challenges, such as Eclipse attacks, address relay, and the role of the address manager (AddrMan) in maintaining network integrity. Amiti also highlights the delicate balance between ensuring privacy and achieving network reliability. Overall, the discussion emphasizes the importance of continuous collaboration and innovation in Bitcoin&amp;rsquo;s P2P network development.</description></item><item><title>Bitcoin Core 22.0 Explained</title><link>https://btctranscripts.com/bitcoin-explained/bitcoin-core-v22-explained/</link><pubDate>Mon, 13 Sep 2021 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-explained/bitcoin-core-v22-explained/</guid><description>Intro Aaron: 00:00:20
Welcome to Bitcoin Explained, the podcast with the most boring name in Bitcoin. Hey Sjors.
Sjors: 00:00:27
What&amp;rsquo;s up? What&amp;rsquo;s with the new name?
Aaron: 00:00:29
So We&amp;rsquo;ve rebranded our podcast. What do you think?
Sjors: 00:00:33
Well, I think, you know, especially if you read it correctly, Bitcoin, explained. I think it&amp;rsquo;s an amazing name. I think the problem was that a lot of people have no idea what the hell a Van Weerdam Shores Nado is.</description></item><item><title>Replace-by-Fee Bug (CVE-2021-31876)</title><link>https://btctranscripts.com/bitcoin-explained/replace-by-fee-bug/</link><pubDate>Fri, 21 May 2021 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-explained/replace-by-fee-bug/</guid><description>Intro Aaron van Wirdum: 00:00:08
Live from Utrecht, Aruba and Utrecht, the Netherlands, this is The Van Wirdum Sjorsnado.
Sjors Provoost: 00:00:15
Hello, welcome, and listeners, sorry for the maybe not perfect sound quality, because we have to make do with the remote recording.
Aaron van Wirdum: 00:00:24
Yeah, for the second time since we&amp;rsquo;re making our show my laptop broke, so here I am on my phone.
Sjors Provoost: 00:00:32</description></item><item><title>Hardware Wallet Integration in Bitcoin Core and HWI</title><link>https://btctranscripts.com/bitcoin-explained/hardware-wallet-integration-in-bitcoin-core-and-hwi/</link><pubDate>Fri, 05 Mar 2021 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-explained/hardware-wallet-integration-in-bitcoin-core-and-hwi/</guid><description>Aaron van Wirdum: 00:01:46
Live from Utrecht this is The Van Wirdum Sjorsnado. Hello! Are you running the BIP8 True independent client yet?
Sjors Provoost: 00:01:56
Negative. I did not even know there was one.
Aaron van Wirdum: 00:01:59
One has been launched, started. I don&amp;rsquo;t think it&amp;rsquo;s actually a client yet, a project has started.
Sjors Provoost: 00:02:05
Okay, a project has started, it&amp;rsquo;s not a binary or a code that you can compile.</description></item><item><title>Bitcoin Core 0.21.0</title><link>https://btctranscripts.com/bitcoin-explained/bitcoin-core-v0-21/</link><pubDate>Thu, 21 Jan 2021 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-explained/bitcoin-core-v0-21/</guid><description>Intro Aaron van Wirdum: 00:01:35
Live from Utrecht, this is The Van Wirdum Sjorsnado. Episode 24, we&amp;rsquo;re going to discuss Bitcoin Core 21.
Sjors Provost: 00:01:46
Hooray. Well, 0.21. We&amp;rsquo;re still in the age of the zero point releases.
Aaron van Wirdum: 00:01:51
Yes, which is ending now.
Sjors Provost: 00:01:53
Probably yes.
Aaron van Wirdum: 00:01:54
That&amp;rsquo;s what I understand. The next one, the 22 will actually be Bitcoin Core 22.</description></item><item><title>Why Open Source Matters For Bitcoin</title><link>https://btctranscripts.com/bitcoin-explained/why-open-source-matters-for-bitcoin/</link><pubDate>Fri, 18 Dec 2020 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-explained/why-open-source-matters-for-bitcoin/</guid><description>&lt;p>In this episode of &amp;ldquo;The Van Wirdum Sjorsnado, &amp;quot; hosts Aaron van Wirdum and Sjors Provoost discussed why it matters that Bitcoin software is open source and why even open-source software doesn&amp;rsquo;t necessarily solve all software-specific trust issues.&lt;/p>
&lt;p>In theory, the fact that most Bitcoin nodes, wallets and applications are open source should ensure that developers can’t include malicious code in the programs: anyone can inspect the source code for malware. In practice, however, the number of people with enough expertise to do this is limited, while the reliance of some Bitcoin projects on external code libraries (“dependencies”) makes it even harder.&lt;/p>
&lt;p>Furthermore, even if the open-source code is sound, this doesn’t guarantee that the binaries (computer code) really correspond with the open-source code. Van Wirdum and Provoost explain how this risk is largely mitigated in Bitcoin through a process called Gitian building, where several Bitcoin Core developers sign the binaries if, and only if, they all produced the exact same binaries from the same source code. This requires special compiler software.&lt;/p>
&lt;p>Finally, the hosts discuss Guix, a relatively new project that goes above and beyond the Gitian process to minimize the level of trust required to turn source code into binaries — including trust in the compiler itself.&lt;/p></description></item><item><title>Bitcoin Eclipse Attacks And How To Stop Them</title><link>https://btctranscripts.com/bitcoin-explained/bitcoin-eclipse-attacks-and-how-to-stop-them/</link><pubDate>Fri, 13 Nov 2020 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-explained/bitcoin-eclipse-attacks-and-how-to-stop-them/</guid><description>The discussion revolves around eclipse attacks against Bitcoin&amp;rsquo;s peer-to-peer network, as described in a 2015 paper. Eclipse attacks isolate a node, controlling its network connections to manipulate transaction visibility and block information. The transcript outlines the mechanism of these attacks, including the strategic overflow of a node&amp;rsquo;s address list and inducing node restarts. It also covers the potential for facilitating double-spend attacks and splitting the miner network. Mitigation strategies implemented in Bitcoin Core are discussed, including improvements in peer selection and connection management. These measures increase the resilience of the network against eclipse attacks by reducing attackers&amp;rsquo; ability to monopolize a node&amp;rsquo;s view of the blockchain, showcasing the ongoing efforts to secure Bitcoin against such vulnerabilities.</description></item><item><title>Sync Bitcoin Faster! Assume UTXO</title><link>https://btctranscripts.com/bitcoin-explained/sync-bitcoin-faster-assume-utxo/</link><pubDate>Fri, 23 Oct 2020 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-explained/sync-bitcoin-faster-assume-utxo/</guid><description>&lt;p>On this episode of The Van Wirdum Sjorsnado, Aaron and Sjors discuss “Assume UTXO, ” a proposal and project by Chaincode Labs alumnus James O’Beirne.&lt;/p>
&lt;p>One of the biggest, if not the biggest, bottlenecks for scaling Bitcoin is initial block download: the time it takes for a Bitcoin node to synchronize with the Bitcoin network, as it needs to process all historic transactions and blocks in order to construct the latest UTXO-set: the current state of bitcoin-ownership.&lt;/p>
&lt;p>Aaron and Sjors explain some of the ways sync-time has been sped up over time. First, sync-time was improved through “Headers First” synchronization, which ensures that new Bitcoin nodes don’t waste time validating (potentially) weaker blockchains. In recent years, sync-time has been improved with “Assume Valid, ” an optional shortcut that lets nodes skip signature verification of older transactions, instead trusting that the Bitcoin Core development process in combination with the resource-expensive nature of mining offers a reliable version of transaction history.&lt;/p>
&lt;p>Finally, they explain how the security assumptions underpinning Assume Valid could be extended to allow for the potential future upgrade Assume UTXO to offer new Bitcoin Core users a speedy solution to get up to speed with the Bitcoin network, sacrificing a minimal amount of security during the initial bootstrapping phase.&lt;/p></description></item><item><title>Bitcoin Core 0.21 Supports Tor V3</title><link>https://btctranscripts.com/bitcoin-explained/bitcoin-core-v21-supports-tor-v3/</link><pubDate>Thu, 15 Oct 2020 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-explained/bitcoin-core-v21-supports-tor-v3/</guid><description>Introduction Aaron van Wirdum: 00:00:07
Live from Utrecht, this is the Van Wirdum Sjorsnado. Sjors, you pointed out to me that Bitcoin Core has an amazing new feature merged into its repository.
Sjors Provoost: 00:00:19
Absolutely, we have bigger onions now.
Aaron van Wirdum: 00:00:24
Right, so I had basically no idea what it meant. You figured it out.
Sjors Provoost: 00:00:29
I did.
Aaron van Wirdum: 00:00:34
Yeah so let&amp;rsquo;s start at the beginning.</description></item><item><title>Learning Bitcoin Core Contribution &amp; Hosting PR Review Club</title><link>https://btctranscripts.com/stephan-livera-podcast/2020-10-02-gloria-zhao-bitcoin-core/</link><pubDate>Fri, 02 Oct 2020 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/stephan-livera-podcast/2020-10-02-gloria-zhao-bitcoin-core/</guid><description>podcast: https://stephanlivera.com/episode/216/
Stephan Livera:
Gloria. Welcome to the show.
Gloria Zhao:
Thank you so much for having me.
Stephan Livera:
So Gloria I’ve heard a few things about you and I was looking up what you’ve been doing. You’ve been doing some really interesting things. Can we hear a little bit about you and how you got into Bitcoin?
Gloria Zhao:
Yeah, well, I didn’t get into Bitcoin by choice. Actually it was by accident.</description></item><item><title>Bitcoin Core GUI introductory meeting</title><link>https://btctranscripts.com/bitcoin-design/misc/2020-08-20-bitcoin-core-gui/</link><pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-design/misc/2020-08-20-bitcoin-core-gui/</guid><description>Topic: Agenda link posted below
Location: Bitcoin Design (online)
Video: No video posted online
Agenda: https://github.com/BitcoinDesign/Meta/issues/8
The conversation has been anonymized by default to protect the identities of the participants. Those who have expressed a preference for their comments to be attributed are attributed. If you were a participant and would like your comments to be attributed please get in touch.
Bitcoin Core PR review There seems to be a lot to learn about the background of Bitcoin Core, how work gets done, what it should be, what it is right now, why it is the way it is right now.</description></item><item><title>What is Miniscript</title><link>https://btctranscripts.com/bitcoin-explained/what-is-miniscript/</link><pubDate>Fri, 31 Jul 2020 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-explained/what-is-miniscript/</guid><description>The podcast episode &amp;ldquo;What is Miniscript&amp;rdquo; delves into Miniscript, a simplified version of Bitcoin Script developed by Pieter Wuille, Andrew Poelstra, and Sanket Kanjalkar from Blockstream. Miniscript is described as a template of Bitcoin Script, aimed at making it easier to write, analyze, and reason about Bitcoin smart contracts. The discussion covers the basics of Bitcoin Script, its problems such as complexity and potential for errors, and how Miniscript addresses these issues by providing a standardized way to use a subset of Bitcoin Script&amp;rsquo;s functionality. The episode also introduces the concept of a policy language, a higher-level programming language that can be compiled into Miniscript, facilitating even easier script creation for developers. Additionally, the limitations of Miniscript and its place within the Bitcoin ecosystem are discussed, highlighting its role as a tool for developers rather than a consensus change.</description></item><item><title>Breaking Down Taproot Activation Options</title><link>https://btctranscripts.com/bitcoin-explained/breaking-down-taproot-activation-options/</link><pubDate>Sat, 25 Jul 2020 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-explained/breaking-down-taproot-activation-options/</guid><description>This podcast episode delves into the nuances of Bitcoin soft fork activation, with a particular focus on the upcoming Taproot activation. Hosts Aaron van Wirdum and Sjors Provoost discuss the history and mechanisms of soft fork activation, including the challenges faced during previous activations such as SegWit. They explore different proposals for activating Taproot, weighing the merits and drawbacks of methods like BIP 9, BIP 91, BIP 148 (UASF), and the newer BIP 8. The discussion highlights the importance of achieving consensus within the community and the complexities involved in coordinating upgrades across the decentralized Bitcoin network. The episode concludes with considerations for future soft fork activations, emphasizing patience, thorough review, and the potential for innovative solutions like &amp;ldquo;sporks&amp;rdquo; to address these challenges</description></item><item><title>Attacking Bitcoin Core</title><link>https://btctranscripts.com/la-bitdevs/2020-04-16-amiti-uttarwar-attacking-bitcoin-core/</link><pubDate>Thu, 16 Apr 2020 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/la-bitdevs/2020-04-16-amiti-uttarwar-attacking-bitcoin-core/</guid><description>Intro I’m going to talk to you today about attacking Bitcoin Core.
Bitcoin To start with the fundamentals. As we all know Bitcoin is a money and it is different to our existing centralized solution of money because instead we have nodes that are running all around the world.
Consensus Fundamentally what is required for this to work is the idea of consensus where all the nodes must agree on the same fundamental values.</description></item><item><title>Chaincode Decoded: UTXOs</title><link>https://btctranscripts.com/chaincode-labs/chaincode-podcast/utxos-chaincode-decoded/</link><pubDate>Wed, 26 Feb 2020 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/chaincode-labs/chaincode-podcast/utxos-chaincode-decoded/</guid><description>Introduction John Newbery: 00:00:00
If we go back in time to version 0.1, all that was stored was the blockchain and I think a marker saying whether that coin was spent or not. I mean that&amp;rsquo;s okay for your first version but it doesn&amp;rsquo;t really scale and it&amp;rsquo;s bad performance because every time you want to access a coin you need to read it from disk.
Adam Jonas: 00:00:28
Welcome back to the Chaincode Podcast.</description></item><item><title>AssumeUTXO</title><link>https://btctranscripts.com/chaincode-labs/chaincode-podcast/assumeutxo/</link><pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/chaincode-labs/chaincode-podcast/assumeutxo/</guid><description>Next in the studio, we caught James O&amp;rsquo;Beirne, who until recently was a co-worker of ours at Chaincode. We talked to James about his experience at the Chaincode residency, his most recent project AssumeUTXO and how he champions and effects change in Bitcoin Core.</description></item><item><title>Debugging Bitcoin Core Workshop</title><link>https://btctranscripts.com/advancing-bitcoin/2020/2020-02-07-fabian-jahr-debugging-workshop/</link><pubDate>Fri, 07 Feb 2020 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/advancing-bitcoin/2020/2020-02-07-fabian-jahr-debugging-workshop/</guid><description>Video: No video was posted online
Fabian presentation at Bitcoin Edge Dev++ 2019: https://diyhpl.us/wiki/transcripts/scalingbitcoin/tel-aviv-2019/edgedevplusplus/debugging-bitcoin/
Debugging Bitcoin Core doc: https://github.com/fjahr/debugging_bitcoin
Debugging Bitcoin Core Workshop: https://gist.github.com/fjahr/5bf65daaf9ff189a0993196195005386
Introduction First of all welcome to the debugging Bitcoin Core workshop. Everything I know more or less about using a debugger to learn from Bitcoin Core and to fix problems in Bitcoin Core. I didn’t go with traditional slides because I want to teach you how to use this tool, the debugger, in the context of Bitcoin Core.</description></item><item><title>Pieter Wuille (part 1 of 2)</title><link>https://btctranscripts.com/chaincode-labs/chaincode-podcast/2020-01-28-pieter-wuille-part1/</link><pubDate>Tue, 28 Jan 2020 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/chaincode-labs/chaincode-podcast/2020-01-28-pieter-wuille-part1/</guid><description>Part 2: https://www.youtube.com/watch?v=Q2lXSRcacAo
Jonas: Welcome to the podcast
John: Hi Pieter
Pieter: Hello John and Jonas
John: Thank you for being the first guest on our podcast.
Jonas: So far the most important guest we’ve had.
Pieter: That’s an amazing honor. Thank you so much for having me.
John: We’re here to talk about Bitcoin and Bitcoin Core development. We have Pieter Wuille as our guest who is a Bitcoin Core contributor of many years standing.</description></item><item><title>Pieter Wuille (part 2 of 2)</title><link>https://btctranscripts.com/chaincode-labs/chaincode-podcast/2020-01-28-pieter-wuille-part2/</link><pubDate>Tue, 28 Jan 2020 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/chaincode-labs/chaincode-podcast/2020-01-28-pieter-wuille-part2/</guid><description>Jonas: We are gonna pick up where we left off in episode 1 with a discussion of lessons learned from the 0.8 consensus failure. We then go on to cover libsecp and Pieter&amp;rsquo;s thoughts about Bitcoin in 2020. We hope you enjoy this as much as we did.
John: Ok I have a bunch of questions from that. One is what are the lessons from that?
Pieter: One of the things I think learned from that is specifying what your consensus rules is really hard.</description></item><item><title>Knowledge Aggregation And Propagation</title><link>https://btctranscripts.com/cryptoeconomic-systems/2019/knowledge-aggregation-and-propagation/</link><pubDate>Sun, 06 Oct 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/cryptoeconomic-systems/2019/knowledge-aggregation-and-propagation/</guid><description>Intro https://docs.google.com/document/d/1a1uRy10dBBcxrnzjdUaO2y03f5H34yFlxktOcanvVYE/edit
https://cess.pubpub.org/pub/knowledge-aggregation/branch/2/
I&amp;rsquo;ll be the contrarian - I think academia is awful and should be destroyed.
Reputation is completely independent of content and should not be the mechanism by which you judge the quality of research; your reputation is worthless to me. (laughter)
My perspective: [first, slidemaker&amp;rsquo;s regret! might have reorganized this] I&amp;rsquo;m a bitcoin core developer. Also worked at LedgerX (4 years). I also work on biotech on the hobbyist side, garage engineering &amp;ndash; what I was doing when bitcoin was launched.</description></item><item><title>Bitcoin Core Functional Test Framework</title><link>https://btctranscripts.com/edgedevplusplus/2019/bitcoin-core-functional-test-framework/</link><pubDate>Tue, 10 Sep 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/edgedevplusplus/2019/bitcoin-core-functional-test-framework/</guid><description>Slides: https://telaviv2019.bitcoinedge.org/files/test-framework-in-bitcoin-core.pdf
Transcript completed by: Bryan Bishop Edited by: Michael Folkson
https://twitter.com/kanzure/status/1171357556519952385
Introduction I am pretty sure you can tell but I am not James (Chiang). I am taking over the functional testing framework talk from James. He has already given several great talks. I took over this talk at very short notice from James. I’d like to give a hands on talk.
Content This is a brief introduction into the functional testing framework.</description></item><item><title>Rebroadcast logic in Core</title><link>https://btctranscripts.com/edgedevplusplus/2019/rebroadcasting/</link><pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/edgedevplusplus/2019/rebroadcasting/</guid><description>https://twitter.com/kanzure/status/1171042478088232960
Introduction Hi, my name is Amiti. Thank you for having me here today. I wanted to talk with you about rebroadcasting logic in Bitcoin Core. For some context, I&amp;rsquo;ve been working on improving it this summer. I wanted to tell you all about it.
What is rebroadcasting? We all know what a broadcast is. It&amp;rsquo;s hwen we send an INV message out to our peers and we let them know about a new transaction.</description></item><item><title>Transaction Rebroadcast</title><link>https://btctranscripts.com/chaincode-labs/chaincode-residency/2019-09-09-amiti-uttarwar-transaction-rebroadcast/</link><pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/chaincode-labs/chaincode-residency/2019-09-09-amiti-uttarwar-transaction-rebroadcast/</guid><description>https://twitter.com/kanzure/status/1199710296199385088
http://diyhpl.us/wiki/transcripts/scalingbitcoin/tel-aviv-2019/edgedevplusplus/rebroadcasting/
Introduction Hello. Thank you for joining me today. My name is Amiti and I’d like to tell you a bit about my Bitcoin journey.
Professional Background I graduated from Carnegie Mellon five years ago and ever since I’ve worked at a few different startups in San Francisco Bay Area. My adventures with blockchains began when I worked at Simbi. Simbi is a marketplace for trading and bartering services. Here I found a community of people who were living outside of their means.</description></item><item><title>Wallet Architecture in Bitcoin Core</title><link>https://btctranscripts.com/edgedevplusplus/2019/wallet-architecture/</link><pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/edgedevplusplus/2019/wallet-architecture/</guid><description>https://twitter.com/kanzure/status/1171018684816605185
Introduction Thanks Bryan for talking about HD wallets. I am going to be talking about wallet architecture in Bitcoin Core. Alright. Who am I? I work on Bitcoin Core. I&amp;rsquo;ve been writing code on Bitcoin Core for about 3 years. Lately I have been working on the wallet. I work for Chaincode Labs which is why I get to work on Bitcoin Core. We are a small research lab in New York.</description></item><item><title>Debugging Bitcoin Core</title><link>https://btctranscripts.com/chaincode-labs/chaincode-residency/2019-08-22-fabian-jahr-debugging/</link><pubDate>Thu, 22 Aug 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/chaincode-labs/chaincode-residency/2019-08-22-fabian-jahr-debugging/</guid><description>Slides: https://residency.chaincode.com/presentations/Debugging_Bitcoin.pdf
Repo: https://gist.github.com/fjahr/2cd23ad743a2ddfd4eed957274beca0f
https://twitter.com/kanzure/status/1165266077615632390
Introduction I’m talking about debugging Bitcoin and that means to me using loggers and debugging tools to work with Bitcoin and this is especially useful for somebody who is a beginner with Bitcoin development. Or even a beginner for C++ which I considered myself a couple of weeks ago actually. I’m going to tell the story of a fictional beginner to Bitcoin development. This disclaimer, while you may think you recognize some names just assume everything is made up because I made it all up.</description></item><item><title>Wallet Development in Bitcoin Core</title><link>https://btctranscripts.com/chaincode-labs/chaincode-residency/2019-06-19-john-newbery-wallet-development/</link><pubDate>Wed, 19 Jun 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/chaincode-labs/chaincode-residency/2019-06-19-john-newbery-wallet-development/</guid><description>Location: Chaincode Labs 2019 Residency
Slides: https://residency.chaincode.com/presentations/bitcoin/Wallet_Development.pdf
Intro I am going to talk to you about wallets. As for the previous presentation I have all of the links in this document which I will share with you. First of all why should we care about wallets? Kind of boring right? You’ve had all this fun stuff about peer-to-peer and consensus. Wallets are just on the edge. Maybe you’re not even interested in Bitcoin Core.</description></item><item><title>AssumeUTXO</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-07-assumeutxo/</link><pubDate>Fri, 07 Jun 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-07-assumeutxo/</guid><description>https://twitter.com/kanzure/status/1137008648620838912
Why assumeutxo assumeutxo is a spiritual continuation of assumevalid. Why do we want to do this in the first place? At the moment, it takes hours and days to do initial block download. Various projects in the community have been implementing meassures to speed this up. Casa I think bundles datadir with their nodes. Other projects like btcpay have various ways of bundling this up and signing things with gpg keys and these solutions are not quite half-baked but they are probably not desirable either.</description></item><item><title>P2P Encryption</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-07-p2p-encryption/</link><pubDate>Fri, 07 Jun 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-07-p2p-encryption/</guid><description>https://twitter.com/kanzure/status/1136939003666685952
https://github.com/bitcoin-core/bitcoin-devwiki/wiki/P2P-Design-Philosophy
&amp;ldquo;Elligator Squared: Uniform Points on Elliptic Curves of Prime Order as Uniform Random Strings&amp;rdquo; https://eprint.iacr.org/2014/043
Previous talks https://btctranscripts.com/scalingbitcoin/milan-2016/bip151-peer-encryption/
https://btctranscripts.com/sf-bitcoin-meetup/2017-09-04-jonas-schnelli-bip150-bip151/
Introduction This proposal has been in progress for years. Many ideas from sipa and gmaxwell went into bip151. Years ago I decided to try to move this forward. There is bip151 that again most of the ideas are not from myself but come from sipa and gmaxwell. The original proposal was withdrawn because we figured out ways to do it better.</description></item><item><title>Wallet Architecture</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-05-wallet-architecture/</link><pubDate>Wed, 05 Jun 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-05-wallet-architecture/</guid><description>Bitcoin Core wallet architecture + descriptors
https://twitter.com/kanzure/status/1136282460675878915
writeup: https://github.com/bitcoin/bitcoin/issues/16165
Wallet architecture discussion There are three main areas here. One is IsMine: how do I determine a particular output is affecting my wallet? What about asking for a new address, where is it coming from? That&amp;rsquo;s not just get new address, it&amp;rsquo;s get raw change address, it&amp;rsquo;s also change being created in fundrawtransaction. The third issue is wallet signing. Storage is not an entrypoint, it&amp;rsquo;s just a way of implementing these things.</description></item><item><title>Bitcoin Toolchain, Unit Testing And Deterministic Builds</title><link>https://btctranscripts.com/edgedevplusplus/2018/bitcoin-toolchain-unit-testing-and-deterministic-builds/</link><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/edgedevplusplus/2018/bitcoin-toolchain-unit-testing-and-deterministic-builds/</guid><description>https://twitter.com/kanzure/status/1048103693885759489
Introduction Just to continue on what James said about the build system on Bitcoin Core&amp;hellip; I am going to talk about deterministic builds. I am MarcoFalke and I also work at Chaincode Labs in NYC.
Bitcoin Core Build System The build system is based on autotools, so it should just work anywhere where autotools runs. Just run ./autogen.sh ./configure and then make, that&amp;rsquo;s it.
We recently added support for MSVC builds mostly for Windows developers to do native builds not having to switch between Linux and Windows all the time.</description></item><item><title>Overview Bitcoin Core Architecture</title><link>https://btctranscripts.com/edgedevplusplus/2018/overview-bitcoin-core-architecture/</link><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/edgedevplusplus/2018/overview-bitcoin-core-architecture/</guid><description>https://twitter.com/kanzure/status/1048098034234445824
slides: http://jameso.be/dev++2018/
Introduction Alright guys, how are you guys doing? You guys look tired. Given your brains are probably fried, I am delighted to tell you that this talk will be pretty high level. I am James O&amp;rsquo;Beirne, I work at Chaincode Labs. I&amp;rsquo;ve been working on Bitcoin Core since 2015. I am in New York most of the time.
Agenda Today we are going to talk about Bitcoin Core.</description></item><item><title>SIGHASH_NOINPUT (BIP118)</title><link>https://btctranscripts.com/edgedevplusplus/2018/sighash-noinput/</link><pubDate>Thu, 04 Oct 2018 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/edgedevplusplus/2018/sighash-noinput/</guid><description>SIGHASH_NOINPUT (BIP118)
https://twitter.com/kanzure/status/1049510702384173057
Hi, my name is Bryan, I&amp;rsquo;m going to be talking about SIGHASH NOINPUT. It was something that I was asked to speak about. It is currently not deployed, but it is an active proposal.
So, just really brief about who I am. I have a software development background. I just left LedgerX last week, so that is an exciting change in my life. Also, I contribute to bitcoin core, usually as code review.</description></item><item><title>Bitcoin Core Testing</title><link>https://btctranscripts.com/greg-maxwell/2018-09-23-greg-maxwell-bitcoin-core-testing/</link><pubDate>Sun, 23 Sep 2018 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/greg-maxwell/2018-09-23-greg-maxwell-bitcoin-core-testing/</guid><description>I believe slower would potentially result in less testing and not likely result in more at this point.
If we had an issue that newly introduced features were turning out to frequently have serious bugs that are discovered shortly after shipping there might be a case that it would improve the situation to delay improvements more before putting them into critical operation&amp;hellip; but I think we&amp;rsquo;ve been relatively free of such issues.</description></item><item><title>Bitcoin Core and hardware wallets</title><link>https://btctranscripts.com/london-bitcoin-devs/2018-09-19-sjors-provoost-core-hardware-wallet/</link><pubDate>Wed, 19 Sep 2018 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/london-bitcoin-devs/2018-09-19-sjors-provoost-core-hardware-wallet/</guid><description>Topic: Using Bitcoin Core with hardware wallets
Location: London Bitcoin Devs
Slides: https://github.com/Sjors/presentations/blob/master/2018-09-19%20London%20Bitcoin%20Devs/2018-09%20London%20Bitcoin%20Devs%200.5.pdf
Core, HWI docs: https://hwi.readthedocs.io/en/latest/examples/bitcoin-core-usage.html
Introduction I am Sjors, I am going to show you how to use, you probably shouldn’t try this at home, the Bitcoin Core wallet directly with a hardware wallet. Most of that work is done by Andrew Chow. I’m just showing how it works. I will have some thoughts of my own on how that could be made more user friendly.</description></item><item><title>Bitcoin CLI and Regtest</title><link>https://btctranscripts.com/austin-bitcoin-developers/2018-08-17-richard-bondi-bitcoin-cli-regtest/</link><pubDate>Fri, 17 Aug 2018 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/austin-bitcoin-developers/2018-08-17-richard-bondi-bitcoin-cli-regtest/</guid><description>Clone this repo to follow along: https://github.com/austin-bitcoin-developers/regtest-dev-environment
https://twitter.com/kanzure/status/1161266116293009408
Intro So the goal here as Justin said is to get the regtest environment set up. The advantages he mentioned, there is also the advantage that you can mine your own coins at will so you don’t have to mess around with testnet faucets. You can generate blocks as well so you don’t have to wait for six confirmations or whatever or even the ten minutes.</description></item><item><title>Bitcoin Core</title><link>https://btctranscripts.com/sf-bitcoin-meetup/2018-04-23-jeremy-rubin-bitcoin-core/</link><pubDate>Mon, 23 Apr 2018 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/sf-bitcoin-meetup/2018-04-23-jeremy-rubin-bitcoin-core/</guid><description>A hardCORE workout
Slides: https://drive.google.com/file/d/149Ta1WRXL5WEvnBdlL-HxmsFDXUbvFDy/view
https://twitter.com/kanzure/status/1152926849879760896
Intro Thank you very much for the warm welcome. So welcome to the hard core workout. It is not going to be that difficult but you can stretch if you need to. It is going to be a lot of material so I’m going to go a little bit fast. If you have any questions feel free to stop me in the middle. There’s a lot of material to get through so I might say “Hold it” or “Find me after” but if there is anything that would help your understanding fee free to classroom style raise your hand and I’ll try to answer it.</description></item><item><title>Bip150 Bip151</title><link>https://btctranscripts.com/sf-bitcoin-meetup/2017-09-04-jonas-schnelli-bip150-bip151/</link><pubDate>Mon, 04 Sep 2017 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/sf-bitcoin-meetup/2017-09-04-jonas-schnelli-bip150-bip151/</guid><description>bip150 and bip151: Bitcoin p2p network encryption and authentication
https://github.com/bitcoin/bips/blob/master/bip-0150.mediawiki
https://github.com/bitcoin/bips/blob/master/bip-0151.mediawiki
https://btctranscripts.com/scalingbitcoin/milan-2016/bip151-peer-encryption/
Introduction Alright guys.. take a seat. ((various mumblings)) Want to thank our sponsors, Digital Garage (applause). Second order of business, if you guys could&amp;hellip; trash away.. that would be awesome. There are trash cans in the back and right there and right next to the drinks. So at the end of the night, that would be great. Jonas Schnelli is a bitcoin core developer and he is here to talk about bitcoin encryption and authentication on the p2p network.</description></item><item><title>libsecp256k1 testing</title><link>https://btctranscripts.com/greg-maxwell/2015-01-08-libsecp256k1-testing/</link><pubDate>Thu, 08 Jan 2015 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/greg-maxwell/2015-01-08-libsecp256k1-testing/</guid><description>Today OpenSSL de-embargoed CVE-2014-3570 &amp;ldquo;Bignum squaring may produce incorrect results&amp;rdquo;. That particular security advisory is not a concern for Bitcoin users, but it allows me to explain some of the context behind a slightly cryptic statement I made in the release notes for the upcoming Bitcoin Core 0.10: “we have reason to believe that libsecp256k1 is better tested and more thoroughly reviewed than the implementation in OpenSSL”. Part of that “reason to believe” was our discovery of this OpenSSL flaw.</description></item><item><title>More Core Devs</title><link>https://btctranscripts.com/scalingbitcoin/montreal-2015/more-core-devs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/scalingbitcoin/montreal-2015/more-core-devs/</guid><description>10x the number of core devs
Objectives:
10x would only be like &amp;lt;1000 bitcoin developers 7000 fedora developers how do we grow developers? how many tor developers? how many linux developers?
poaching from each other is not cool
There&amp;rsquo;s not enough people with the necessary skills. There&amp;rsquo;s no clear way to train new people. Apprenticeship works, but it scales very very poorly. It&amp;rsquo;s better than a static fixed number of developers.</description></item><item><title>R&amp;D Goals &amp; Challenges</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2015-02/research-and-development-goals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2015-02/research-and-development-goals/</guid><description>We often see people saying they are testing the waters, they fixed a typo, they made a tiny little fix that doesn&amp;rsquo;t impact much, they are getting used to the process. They are finding that it&amp;rsquo;s really easy to contribut to Bitcoin Core. You code your changes, you submit your changes, there&amp;rsquo;s not much to it.
There&amp;rsquo;s a difference, and the lines are fuzzy and undefined, and you can make a change to Core that changes a spelling error or a change to policy or consensus rules, for those high-level things, for ecosystem-level things, there&amp;rsquo;s several mailing lists, the dev list gets the most traffic.</description></item><item><title>The State of Bitcoin Core Development</title><link>https://btctranscripts.com/bitcoin-magazine/bitcoin-2024/the-state-of-bitcoin-core-development/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-magazine/bitcoin-2024/the-state-of-bitcoin-core-development/</guid><description>Discover the latest developments in Bitcoin Core with our expert panel featuring key contributors to the project. This video delves into recent changes in security vulnerability disclosures, the challenges of funding open-source development, and the careful process of introducing new features to Bitcoin Core. Our panelists offer unique perspectives on the project&amp;rsquo;s priorities and the distinction between Bitcoin Core and protocol development.</description></item></channel></rss>