<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>core-dev-tech on ₿itcoin Transcripts</title><link>https://btctranscripts.com/categories/core-dev-tech/</link><description>Recent content in core-dev-tech on ₿itcoin Transcripts</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 11 Apr 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://btctranscripts.com/categories/core-dev-tech/index.xml" rel="self" type="application/rss+xml"/><item><title>ASMap</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/asmap/</link><pubDate>Thu, 11 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/asmap/</guid><description>From virtu&amp;rsquo;s presentation Distribution of nodes in ASes is low 8k reachable clearnet nodes / 30k unreachable A contributor has different statistics that show a lot more nodes, not sure which numbers are (more) correct. These numbers are would mean that some of the simulations are already a reality. Most nodes from Hetzner and AWS Shift compute and bandwidth to nodes in small ASes Unreachable nodes cannot sustain ten outbound connections Discussions Ignore AS for blocks-only connections?</description></item><item><title>assumeUTXO Mainnet Readiness</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/assumeutxo-mainnet-readiness/</link><pubDate>Wed, 10 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/assumeutxo-mainnet-readiness/</guid><description>Conceptual discussion about the point raised by Sjors in the Tracking issue: https://github.com/bitcoin/bitcoin/issues/29616#issuecomment-1988390944 The outcome is pretty much the same as in the issue: Some people think it’s better to keep the params, and the rest agree that at least it’s better to keep them for now A perspective on the options: With the params, it puts more responsibility (and potentially pressure) on the maintainers, if they are removed the users have to do much more due diligence which snapshot is ok to use.</description></item><item><title>GUI Discussions</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/gui-discussions/</link><pubDate>Wed, 10 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/gui-discussions/</guid><description>QML GUI Slides
Q&amp;amp;A
Current GUI and QML progress seems slow? Code review / build system involvement? Will there be a test suite? Test suite yes, No fuzzing planned Why not RPC based? RPC not currently capable of building this UI on top of Is there a QML dependency graph? More dependencies required for sure May have to abandon depends approach Blocking calls historically an issue A consideration, but more to talk about here Integrated GUI Cost/Benefit Slides</description></item><item><title>Kernel</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/kernel/</link><pubDate>Wed, 10 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/kernel/</guid><description>The kernel project is just about done with its first stage (separating the validation logic into a separate library), so a discussion about the second stage of the project, giving the library a usable external API was held. Arguments around two questions were collected and briefly debated.
Should a C API for the kernel library be developed with the goal of eventually shipping with releases? There are a bunch of tools that can translate C++ headers, but they have downsides due to the name mangling.</description></item><item><title>Signet/Testnet4</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/signet-testnet4/</link><pubDate>Wed, 10 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/signet-testnet4/</guid><description>Signet Reset is less of a priority right now because the faucet is running again, still seeing huge number of requests Should still reset because of money making from signet coins Participants agree that getting coins doesn’t seem to be that hard, just need to ask on IRC or so Some people get repetitive messages about coins Signet can be reorged easily with a more work chain, that is actually shorter.</description></item><item><title>P2P Monitoring</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/p2p-monitoring/</link><pubDate>Tue, 09 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/p2p-monitoring/</guid><description>Slides
Started working on this about 2 years ago; in 2021. After we accidentally observed the address flooding anomaly/attack Primarily uses https://github.com/0xB10C/peer-observer to extract data from Bitcoin Core nodes with tracepoints. The infrastructure also includes a fork-observer connected to each node as well as an addrman-observer for each node. Additionally, detailed Bitcoin Core debug logs are avaliable. The main part are the Grafana dashboards. There’s a public version at public.peer.observer, which is redacted to not leak honeynode IP addresses.</description></item><item><title>Silent Payment Descriptors</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/silent-payment-descriptors/</link><pubDate>Tue, 09 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/silent-payment-descriptors/</guid><description>Silent payments properties:
two ECDH with each scan key cost of scanning increases with number of scan keys multiple address = tweak spend key with label We wouldn’t wanna flip that because then the spend key would be common, reducing anonymity and adding extra scanning work
BIP352 recommends NOT using with xpubs, it’s really difficult to have same public key with different chain codes.
Use case question: with silent payments, let&amp;rsquo;s say I make a legacy wallet and want to use one of my existing pubkeys and just combine it with a scan key, is that something that someone could make up.</description></item><item><title>Coin Selection</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/coin-selection/</link><pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/coin-selection/</guid><description>Todo: Overview PR that states goal of replacing Knapsack Introduce Sand Compactor Demonstrate via Simulations that situation is improved vs Knapsack Potential privacy leak: all algorithms would be deterministic, but feels insignificant or at least would not make it worse Should we clear out negative effective value UTXOs? Users seem to indicate that they would prefer to empty wallets completely even if they pay more General agreement that we should continue to spend negative effective value UTXOs SRD and SandCompactor will allow spending them, maybe below discardfeerate, maybe below 5 s/vB, maybe even below 10 s/vB Fallback mechanisms if no other solution found There is a gap between changeless solutions and minChange No don’t fall back to Lowest Larger CoinGrinder Pick whole wallet Should we fall back to CoinGrinder when fees are large compared to recipient amount?</description></item><item><title>Cross Input Signature Aggregation</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/cross-input-signature-aggregation/</link><pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/cross-input-signature-aggregation/</guid><description>cisaresearch.org, put together by fjahr Documents progress of half and full agg (theory, implementation and deployment) Provides collection of CISA-related resources (ML posts, papers, videos/podcasts, etc.) Should provide guidance for further development/open todos for contributors to grab HRF announces CISA Research Fellowship Seeks to answer questions how CISA will affect privacy, cost-savings, and much more during a four-month period for a total of .5BTC More: https://nostr.com/note1h4fdw5ttqmjwf3eqr0s5lqzjhdvwcayl0hrfnv726cw4eeag6phs9xszpw Will coordinate with them to align cisaresearch.</description></item><item><title>Great Consensus Cleanup</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/great-consensus-cleanup/</link><pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/great-consensus-cleanup/</guid><description>How bad are the bugs?
How good are the mitigations?
Improvements to mitigations in the last 5 years?
Anything else to fix?
The talk is a summary of https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710 .
Time warp What is it? Off by one in the retargeting period 2015 blocks instead of 2016 Impact Spam (since difficulty is 1 and block times are what restricts tx) UXTO set growth for the same reason 40 days to kill the chain Empowers 51% attacker Political games (users individually incentivized short-term to benefit from more block space, miners individually incentivized short-term to benefit of more subsidy) Minority miners not incentivized to try but it doesn’t cost anything Original mitigation is good Mandating new restrictions on the timestamp of the first block of a retarget period in relation to last blocks timestamp Merkle tree attacks w/64 byte txs Fake SPV inclusion &amp;lt;visual merkle tree diagram illustrating issue&amp;gt; Years ago the attack required more work than proof of work, so was less of a concern, not so now Arbitrary confs, less work Simple mitigation Require the coinbase transaction too, as all transactions on the same level of the merkle tree Block malleability Separate but similar attack Fork nodes Simple mitigation Dont cache context-less checks BIP’s original Mitigation Forbid &amp;lt;=64 byte transactions No need to disable &amp;lt;64 bytes transactions, since 64 is the issue Concern about existing, unbroadcasted 64 byte transaction?</description></item><item><title>Private tx broadcast</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/private-tx-broadcast/</link><pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/private-tx-broadcast/</guid><description>Updates:
TX is validated before broadcast (using mempool test). The sender ignores incoming messages from the receiver (except the handshake and PONG), so the sender cannot send back the tx before disconnection. When it receives the tx back, it becomes &amp;ldquo;just a tx in mempool&amp;rdquo;. TODO/NICE TO HAVE
Check if the wallet is going to rebroadcast a tx it has created but has been broadcast via private broadcast and if yes, prevent that.</description></item><item><title>Silent Payments Libsecp Module</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/silent-payments-libsecp/</link><pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/silent-payments-libsecp/</guid><description>High level vs low level API:
Low level API could be more useful for multi-party SP implementation High level API is safer as it avoid managing SP state and staging secret data Rough consensus that high level API is preferable Responsibility of grouping and sorting recipients by scan key. Client vs library?
We need to assert grouping in the lib anyway to avoid catastrophic failure So it just makes sense for the lib to take care of the grouping Why we need grouping in the first place?</description></item><item><title>Stratum v2</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/stratumv2/</link><pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/stratumv2/</guid><description>I explained the various stratum v2 roles described in the images here: https://stratumprotocol.org
Described the three layers of my main PR: https://github.com/bitcoin/bitcoin/pull/29432
Noise protocol Transport based on the TransportV1 / TransportV2 class Application layer (listens on new port, sv2 apps connect to it) Discussion point: the Job Declarator client role typically runs on the same machine as the template provider, so technically we don’t need noise encryption. However, we may in the future want to “take over” some of the Job Declarator client work, at which point we would need it.</description></item><item><title>Weak Blocks</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/weak-blocks/</link><pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/weak-blocks/</guid><description>Weak blocks: propagate stuff with low PoW as you are building it
use cases / why you wouldn’t hear of stuff nonstandard to you somehow didn’t propagate to you miner’s prioritisetransaction stuff with no fees why is this coming up now? more mempool heterogeneity “accelerate nonstandard transactions” services poc code: submits to mempool, rejected ones are stored in separate cache Questions
why would a miner do this? (similar to compact blocks?</description></item><item><title>CMake Update</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/cmake/</link><pubDate>Thu, 21 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/cmake/</guid><description>Update Hebasto has a branch he has been PRing into his own repo. Opened a huge CMake PR for Bitcoin core.
Introducing it chunk by chunk on his own repo
QT and GUIX is after that
Next steps How to get this into Core?
We don’t have something clean. Still have something wonky and how and what to do with autotools.
Ideally introduce CMake for a full cycle. It might still be a little too rough to ship on day 1 of the v27 cycle.</description></item><item><title>Remove the legacy wallet and updating descriptors</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/wallet-legacy-upgrade/</link><pubDate>Thu, 21 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/wallet-legacy-upgrade/</guid><description>Wallet migration + legacy wallet removal The long-term goal targeted for v29 is to delete BDB and drop the legacy wallet. The migration PR for the GUI was just merged recently, so that will be possible for the next release v26. The &amp;ldquo;Drop migratewallet experimental warning&amp;rdquo; PR (#28037) should also go in before v26. Migrating without BDB should be possible for v27 (PRs &amp;ldquo;Independent BDB&amp;rdquo; #26606 and &amp;ldquo;Migrate without BDB&amp;rdquo; #26596).</description></item><item><title>Signature Aggregation Update</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/signature-aggregation/</link><pubDate>Thu, 21 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/signature-aggregation/</guid><description>The status of the Half-Agg BIP? TODOs but also no use cases upcoming so adding it to the BIP repo doesn&amp;rsquo;t seem useful
BIP Half-agg TODOs for BIP
Consider setting z_0 = 1
Reconsider maximum number of signatures
Add failing verification test vectors that exercise edge cases.
Add signing test vectors (passing and failing, including edge cases)
Test latest version of hacspec (run through checker)
Half-agg BIP has a max number of signatures (2^16), making testing easy</description></item><item><title>AssumeUTXO Update</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/assumeutxo-update/</link><pubDate>Wed, 20 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/assumeutxo-update/</guid><description>One remaining PR
#27596 Adds loadtxoutset and getchainstate RPC, documentation, scripts, tests Adds critical functionality needed for assumeutxo validation to work: net processing updates, validation interface updates, verifydb bugfix, cache rebalancing Makes other improvements so pruning, indexing, -reindex features are compatible with assumeutxo and work nicely Adds hardcoded assumeutxo hash at height 788,000 Probably this should be moved to separate PR? Questions about initial next steps (unanswered):
Which release is this PR targeted for?</description></item><item><title>Kernel Planning</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/kernel-planning/</link><pubDate>Wed, 20 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/kernel-planning/</guid><description>Undecided on where to take this next
Carl purposely didn&amp;rsquo;t plan beyond what we have
Options: Look for who the users currently are of kernel code and polish those interfaces. We&amp;rsquo;ll end up with a bunch of trade-offs. And I don&amp;rsquo;t see us piecemeal extracting something that is useable to core and someone on the outside.
The GUI much high level to be on this list. The GUI uses a node interface, it doesn&amp;rsquo;t call an validation right now.</description></item><item><title>Libsecp256k1 Meeting</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/libsecp256k1-meeting/</link><pubDate>Wed, 20 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/libsecp256k1-meeting/</guid><description>Topics: Scope, Priorities Next release Dec 16th Scope: Informal agreeement currently What new modules to add? Needs a specification (whatever that means, Pseudocode etc.0 Should we formalize the agreement more? Should also not be too specific What are examples where this came up in the past? Exfill, Ecdh, Elswift, SIlent payments, musig, schnorr, adaptor sigs, half-agg How specific do we need to be? Tie it to examples to be more clear ECIES (Interesting in the future?</description></item><item><title>P2P Design Goals</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/p2p-design-goals/</link><pubDate>Wed, 20 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/p2p-design-goals/</guid><description>Guiding Questions What are we trying to achieve?
What are we trying to prevent?
How so we weight performance over privacy?
What is our tolerance level for net attacks?
Are we trying to add stuff to the network or are we trying to prevent people getting information?
Network topology: By design we are trying to prevent the topology being known Information creation, addresses, txs or blocks
We want blocks at tips fast - consensus critical information needs to be as fast as possible - ability to get the information - forgetting that there are multiple networks - the purpose is to know what the current most work chain tip is Even the addr relay network - everything falls apart if you can’t get that information The crux of the p2p network is to propagate what is the most work Txs can take much much longer but don’t want to leak the source of the origin The privacy implications of Txs makes it difficult Could give up fast propagations for privacy for txs that would be fine but not for blocks.</description></item><item><title>Package Relay Planning</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/package-relay-planning/</link><pubDate>Wed, 20 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/package-relay-planning/</guid><description>Package Relay Planning What can we do better, keep doing?
This is all the work that needs to be done for package relay -&amp;gt; big chart
Left part is mempool validation stuff. It’s how we decide if we put transactions in the mempool after receiving them “somehow”.
Right is peer to peer stuff
Current master is accepting parents-and-child packages(every tx but last must be a parent of child), one by one, then all at the same time.</description></item><item><title>Privacy Metrics for Coin Selection</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/privacy-metrics/</link><pubDate>Wed, 20 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/privacy-metrics/</guid><description>Goal: Get privacy consciousness into coin selection Configurability Privacy vs cost (waste) Privacy: weighted on a 0-5 scale Cost: weighted on a 0-5 scale Convert privacy preference (0-5) into satoshis to make it compatible with the waste score Combined score = PrivacyScoreWeight x PrivacyScore + CostWeight x WasteMetric 20-30 sats per privacy point as a gut feeling Privacy score example: sending to different script type than inputs of transaction We already match the change type to the recipient type, but that can still mean that we have differently typed inputs than outputs If we have two input sets, where one has the same type and the other has a different type, the one with the same type inputs should be preferred by the privacy metric Privacy score example: Preferring spending UTXOs of similar age E.</description></item><item><title>Discussion on open Coin Selection matters</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/wallet-coin-selection/</link><pubDate>Tue, 19 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/wallet-coin-selection/</guid><description>Topic: review of https://github.com/bitcoin/bitcoin/pull/27601 Problem statement: when doing manual RBF (without using bumpfee RPC) we treat previous change output as a receiver and thus create two outputs to the same address Proposal: combine amount on outputs to the same address What are valid use-cases for having the same address for change and output? Consolidation with payment Alternative: Use sendall with two outputs one with an amount and yours without an amount Payment and send at least X to yourself Consolidate with automatic coin selection of at least X Alternative: Implement &amp;ldquo;Send at least&amp;rdquo; as a separate and explicitly feature Consider just giving an error if change destination is the same with one of the outputs Should we do the enforcement only at RPC level?</description></item><item><title>P2P working session</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/p2p-working-session/</link><pubDate>Tue, 19 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/p2p-working-session/</guid><description>Erlay Gleb is active and ready to move forward - #21515 Are there people generally interested in review? I wanted first to convince myself that this is useful. I couldn&amp;rsquo;t reproduce the numbers from the paper - 5% was what I got with ~100 connections. My node is listening on a non-standard port. It may be that I don&amp;rsquo;t have a normal sample. There is a pull request that could add RPC stats to bitcoind - that might get better numbers.</description></item><item><title>Kernel Update</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/kernel-update/</link><pubDate>Mon, 18 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/kernel-update/</guid><description>Original roadmap decided by carl was:
Stage 1
Step 1 Introduce bitcoin-chainstate &amp;ldquo;kitchen sink&amp;rdquo; Step 2 (wrapped up ~2mon ago) remove non-valiation code
Step 3 (where we are rn) remove non-validation headers from bitcoin-chainstate
We have mostly implemented Step 4 integrate libbitcoinkernel as a static library
Have the implementation on personal repo Need to look into breaking up files or live with code organization not being super logical Stage 2 (we should talk about this now) improve libbitcoinkernel interface</description></item><item><title>AssumeUTXO update</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-27-assumeutxo/</link><pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-27-assumeutxo/</guid><description>Goals allow nodes to get a utxo set quickly (1h) at the same time, no major security concessions Approach Provide serialized utxo snapshot get headers chain first, load snapshot and deserialize, sync to tip from that then start background verification with a 2nd snapshot finally, compare hashes when background IBD hits snapshot base Progress update lots of refactoring has been done; ChainStateManager was introduced, globals removed, mempool / blockstorage refactored init / shutdown logic changes have been merged wallet changes done p2p changes still under review (i.</description></item><item><title>Fuzzing</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-27-fuzzing/</link><pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-27-fuzzing/</guid><description>Slides: https://docs.google.com/presentation/d/1NlTw_n60z9bvqziZqU3H3Jw7Xs5slnQoehYXhEKrzOE
Fuzzing Fuzzing is done continuously. Fuzz targets can pay off even years later by finding newly introduced bugs. Example in slide about libFuzzer fuzzing a parse_json function which might crash on some weird input but won’t report invalid json inputs that pass parsing. libFuzzer does coverage guided feedback loop + helps with exploring control flow. Bug Oracles Assertions - Adding assertions is tricky for network code. We add Assume() when continuing is not worse than crashing.</description></item><item><title>Libbitcoin kernel</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-26-libbitcoin-kernel/</link><pubDate>Wed, 26 Apr 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-26-libbitcoin-kernel/</guid><description>Questions and Answers Q: bitcoind and bitcoin-qt linked against kernel the libary in the future?
presenter: yes, that is a / the goal Q: Have you looked at an electrum implementation using libbitcoinkernel?
audience: yes, would be good to have something like this! audience: Also could do the long proposed address index with that? audience: not only address index, other indexes too. Q: Other use-cases:
audience: be able to run stuff on iOS Q: Should the mempool be in the kernel?</description></item><item><title>Project Meta Discussion</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-26-meta-discussion/</link><pubDate>Wed, 26 Apr 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-26-meta-discussion/</guid><description>Part 1 What makes bitcoin core fun Intellectual challenge/problems Interesting, diverse, open source project collaborators Meaningful project goals Culturally the project is a meritocracy Scientific domain intersecting with real world problems Real world usage What makes bitcoin core not fun Long delivery cycles -&amp;gt; lack of shippers high Soft fork activation Antagonism (internal and external) Ambiguity of feature/code contribution usage Relationships Financial stability Unclear goals Part 2 Fitting rocks, pebbles, and sand in a jar analogy Time based releases vs feature based releases?</description></item><item><title>ASMap</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-27-asmap/</link><pubDate>Tue, 25 Apr 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-27-asmap/</guid><description>Should we ship it every Core release? The initial idea is shipping a map file every Core release. Fabian wrote an article about how would be integrated into the deployment (https://gist.github.com/fjahr/f879769228f4f1c49b49d348f80d7635). Some devs pointed out an option would be to have it separated to the release process, any regular contributor could update it whenever they like (who would do it? frequency?). Then when the release comes around one of the recent ones will be chosen.</description></item><item><title>Mempool Clustering</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-25-mempool-clustering/</link><pubDate>Tue, 25 Apr 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-25-mempool-clustering/</guid><description>Current Problems lot of problems in the mempool
eviction is broken mining algorithm is part of the problem, it’s not perfect RBF is like totally broken we complain all the time, sometimes we do/don&amp;rsquo;t RBF when we should/shouldn&amp;rsquo;t Eviction Eviction is when mempool is full, and we want to throw away the worst tx. Example, we think a tx is worst in mempool but it’s a descendant of a &amp;ldquo;good&amp;rdquo; tx.</description></item><item><title>Package Relay Primer</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-25-package-relay-primer/</link><pubDate>Tue, 25 Apr 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-25-package-relay-primer/</guid><description>Slides: https://docs.google.com/presentation/d/12YPlmmaCiNNL83b3FDmYwa7FKHP7yD0krzkEzM-tkTM
Problems CPFP Doesn’t Work When Mempool Min Feerate Rises Bad for users who want to use CPFP and L2s, but also a glaring limitation in our ability to assess transaction incentive compatibility
Pinning being able to feebump transaction is a pinning concern counterpart can intentionally censor your transactions, and in L2 that can mean stealing your money because you didn’t meet the timelock Pinning examples ANYONECANPAY -&amp;gt; anyonecanpin: add input that comes from huge unconfirmed low-fee rate tx -&amp;gt; absolute feerate needs to increase, so you&amp;rsquo;re paying more fees for the tx to confirm slower shared descendant limit can be monopolized descendant limit is 25 txs, so someone else can fill up that limit we have a carve-out for CPFP already to try and mitigate that RBF Rule 3 is gameable replacement fees must &amp;gt; all descendants, and they may be large, low feerate -&amp;gt; expensive most L2s have pinning problems, so we need to fix that Get rid of txid-based relay we want to avoid txid based relay can&amp;rsquo;t deduplicate txid and wtxid that correspond to the same tx can&amp;rsquo;t deduplicate txs that only differ in witness we still require txid-based relay for orphans, because txs specify prevouts by txid -&amp;gt; so we don&amp;rsquo;t know which wtxid to request Definitions pinning attack: a censorship attack on relay/mempool level, abusing policy</description></item><item><title>Refactors</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-25-refactors/</link><pubDate>Tue, 25 Apr 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-25-refactors/</guid><description>One take-away from the Chaincode residency in 2019 was: Don’t do refactors (unless you really need it)
A marked increase from 2019 to today (Chart on the increase of refactors)
The comments and PRs are steady but the refactors are increasing
Quibble about how regular reviewers are counted (should be higher than 5 comments)
Project reasons:
Ossification? Natural way mature projects progress/Boy Scout Rule Personal reasons:
Time commitment of large review may not be possible (extended period of singular focus) Merged PRs as proof of work, could help with the next grant Feels good to ship What is the effect?</description></item><item><title>Silent Payments</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-26-silent-payments/</link><pubDate>Tue, 25 Apr 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-26-silent-payments/</guid><description>BIP Overview Scanning key and spending key are different: better security. Silent payment transactions are indistinguishable from transactions with taproot outputs on-chain.
Q: Address labeling, why not create two silent payment addresses?
A: It doubles scanning costs.
Limited to taproot UTXOs (currently about 3% of transactions) but when it increases we should find ways to optimize scanning, even though it currently does not seem to be an issue.
Q: Why no P2PK</description></item><item><title>Silent Payments and Alternatives</title><link>https://btctranscripts.com/tabconf/2022/2022-10-15-silent-payments/</link><pubDate>Sat, 15 Oct 2022 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/tabconf/2022/2022-10-15-silent-payments/</guid><description>Introduction I will talk about silent payments but also in general the design space around what kind of constructs you can have to pay people in a non-interactive way. In the bitcoin world, there are a couple common ways of paying someone. Making a payment is such a basic thing. &amp;hellip; The alternative we have is that you can generate a single address and put it in your twitter profile and everyone can pay you, but that&amp;rsquo;s not private.</description></item><item><title>Provably bug-free BIPs and implementations using hac-spec</title><link>https://btctranscripts.com/tabconf/2022/2022-10-14-hac-spec/</link><pubDate>Fri, 14 Oct 2022 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/tabconf/2022/2022-10-14-hac-spec/</guid><description>https://nickler.ninja/
Alright. Strong crowd here, I can see. That&amp;rsquo;s very nice.
Introduction I am Jonas and I will talk about provably bug-free BIPs and implementations. I don&amp;rsquo;t have such a BIP nor such an implementation but if you lower your time-preference enough this could eventually be true at some point. This presentation is only 15 minutes so raise your hand if you have questions.
Just to set the stage. Specifications should be free of bugs, we want them easy to implement and hard to misinterpret.</description></item><item><title>Libsecp256k1 Maintainers Meeting</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10/2022-10-12-libsecp256k1/</link><pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10/2022-10-12-libsecp256k1/</guid><description>Q: Why C89? When I asked you this question a few years ago, I think you said gmaxwell.
A: There are a number of embedded devices that only support C89 and it&amp;rsquo;d be good to support those devices. That was the answer back then at least.
Q: Is it a large cost to keep doing C89?
A: The only cost is for the context stuff we want to make threadlocal. The CPUid or the x86-specific things.</description></item><item><title>Research wishlist</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10/2022-10-12-research-wishlist/</link><pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10/2022-10-12-research-wishlist/</guid><description>https://docs.google.com/document/d/1oRCeDzY3zH2ZY-BUYIVfJ1GMkvLlqKHWCFdtS62QWAo/edit
Introduction In spirit of the conversation happening today earlier, I&amp;rsquo;ll give some motivation. In general there is a disconnect between academic researchers and people who work in open-source software. It&amp;rsquo;s a pity because these two groups are interested in bitcoin, they love difficult questions and working on them, and somehow it seems like the choice of questions and spirit of work is sometimes not aligned to the best of bitcoin.</description></item><item><title>Strategies for getting stuff merged</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10/2022-10-12-merging/</link><pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10/2022-10-12-merging/</guid><description>Introduction I wanted to talk about things that have been leaking out over other conversations because sometimes people get frustrated that their stuff doesn&amp;rsquo;t get merged. This is not a new problem. It&amp;rsquo;s an issue that has been going on for a long time. It can be frustrating. I don&amp;rsquo;t have the answer. This is going to be more discussion based and I&amp;rsquo;ve asked a few folks to talk about strategies that have worked for them.</description></item><item><title>Bitcoin Core and GitHub</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10/2022-10-11-github/</link><pubDate>Tue, 11 Oct 2022 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10/2022-10-11-github/</guid><description>Bitcoin Core and GitHub
I think at this point it&amp;rsquo;s quite clear that it&amp;rsquo;s not necessarily a &amp;ldquo;if&amp;rdquo; we get off github, but a when and how. The question would be, how would we do that? This isn&amp;rsquo;t really a presentation. It&amp;rsquo;s more of a discussion. There&amp;rsquo;s a few things to keep in mind, like the bitcoin-gh-meta repo, which captures all the issues, comments and pull requests. It&amp;rsquo;s quite good. The ability to reconstruct what&amp;rsquo;s inside of here on another platform doesn&amp;rsquo;t really seem possible in its entirety.</description></item><item><title>Fee Market</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10/2022-10-11-fee-market/</link><pubDate>Tue, 11 Oct 2022 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10/2022-10-11-fee-market/</guid><description>Fee market
There are two times we have had sustained fees: late 2017 and early 2021. In late 2017 we saw lots of things break because people hadn&amp;rsquo;t written software to deal with variable fees or anything. I don&amp;rsquo;t know if that was as big of a problem in 2021. I do worry that this will start to become a thing. If you have no variable fee market, and you can just throw in 1 sat/vbyte for several years then it will just work until it doesn&amp;rsquo;t.</description></item><item><title>FROST</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10/2022-10-11-frost/</link><pubDate>Tue, 11 Oct 2022 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10/2022-10-11-frost/</guid><description>Introduction I am going to be going over the FROST implementation. I also have an early draft of the BIP. I am going to be focusing on the differences between the paper and the RFC and the overall scheme. This is meant to be an open discussion so feel free to jump in.
Distributed key generation Maybe one good place to start is to look at the example file in the PR.</description></item><item><title>High-assurance cryptography specifications (hac-spec)</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10/2022-10-11-hac-spec/</link><pubDate>Tue, 11 Oct 2022 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10/2022-10-11-hac-spec/</guid><description>See https://btctranscripts.com/tabconf/2022/2022-10-14-hac-spec/ instead for a full transcript of a similar talk.
Far far future In the far far future, we could get rid of this weird paper notation scheme and do a security proof directly for the specification. Presumably that is much harder than anything else in my slides. But this would rule out a lot of bugs.
Q: But the security proof itself is written in a paper?
A: The security proof itself would be written in hac-spec.</description></item><item><title>Package Relay BIP, implementation, V3, and package RBF proposals</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10/2022-10-11-package-relay/</link><pubDate>Tue, 11 Oct 2022 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10/2022-10-11-package-relay/</guid><description>Notes on Package Relay BIP, implementation, V3, and package RBF proposals from Core Dev in Atlanta.
Also at https://gist.github.com/glozow/8469dc9c3a003c7046033a92dd504329.
Ancestor Package Relay BIP BIP updated to be receiver-initiated ancestor packages only. Sender-initiated vs receiver-initiated package relay. Receiver-intiated package relay enables a node to ask for more information when they suspect they are missing something (i.e. to resolve orphans). Sender-initiated package relay should, theoretically, save a round trip by notifying the receiver ahead of time that &amp;ldquo;hey, this is going to be a package, so make sure you download and submit these transactions together.</description></item><item><title>Stratum V2</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10/2022-10-11-stratum-v2/</link><pubDate>Tue, 11 Oct 2022 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10/2022-10-11-stratum-v2/</guid><description>Introduction There was an announcement earlier this morning that announced the open-source project implementing Stratum v2 is ready for testing now. Spiral has been contributing to this project for a few years. There&amp;rsquo;s a few other companies funding it as well. It&amp;rsquo;s finally ready for testing.
History About 4 years ago or so, Matt proposed BetterHash which focused on enabling miners to be able to do their own transaction selection. There was an independent effort from Braaains that they called stratum v2 which added encryption and authentication between miners and pools and other improvements over stratum v1 like switching from JSON to binary and some other optimizations that were needed over the past 10 years.</description></item><item><title>BIP324 - Version 2 of p2p encrypted transport protocol</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10/2022-10-10-p2p-encryption/</link><pubDate>Mon, 10 Oct 2022 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10/2022-10-10-p2p-encryption/</guid><description>Previous talks https://btctranscripts.com/scalingbitcoin/milan-2016/bip151-peer-encryption/
https://btctranscripts.com/sf-bitcoin-meetup/2017-09-04-jonas-schnelli-bip150-bip151/
https://btctranscripts.com/bitcoin-core-dev-tech/2019-06-07-p2p-encryption/
https://btctranscripts.com/breaking-bitcoin/2019/p2p-encryption/
Introduction and motivation Can we turn down the lights? &amp;ldquo;Going dark&amp;rdquo; is a nice theme for the talk. I also have dark coffee. Okay.
We&amp;rsquo;re going to talk a little bit about bip324. This is a BIP that has had a long history. We even have a page about the history. It all started more than 6 years ago&amp;hellip; Bitcoin p2p traffic is unencrypted. It always has been.</description></item><item><title>Misc</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10/2022-10-10-misc/</link><pubDate>Mon, 10 Oct 2022 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2022-10/2022-10-10-misc/</guid><description>Web of Trust Some of the public key server operators interpreted GDPR to mean that they can&amp;rsquo;t operate public key infrastructure anymore. There needs to be another solution for p2p distribution of keys and Web-of-Trust.
&amp;lt;bitcoin-otc.com&amp;gt; continues to be the longest operating PGP web-of-trust using public key infrastructure. Rumplepay might be able to bootstrap a web-of-trust over time.
Stealth addresses and silent payments Here&amp;rsquo;s something controversial. Say you keep an in-memory map of all addresses that have already been used.</description></item><item><title>AssumeUTXO</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-07-assumeutxo/</link><pubDate>Fri, 07 Jun 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-07-assumeutxo/</guid><description>https://twitter.com/kanzure/status/1137008648620838912
Why assumeutxo assumeutxo is a spiritual continuation of assumevalid. Why do we want to do this in the first place? At the moment, it takes hours and days to do initial block download. Various projects in the community have been implementing meassures to speed this up. Casa I think bundles datadir with their nodes. Other projects like btcpay have various ways of bundling this up and signing things with gpg keys and these solutions are not quite half-baked but they are probably not desirable either.</description></item><item><title>Blind statechains: UTXO transfer with a blind signing server</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-07-statechains/</link><pubDate>Fri, 07 Jun 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-07-statechains/</guid><description>https://twitter.com/kanzure/status/1136992734953299970
&amp;ldquo;Formalizing Blind Statechains as a minimalistic blind signing server&amp;rdquo; https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-June/017005.html
overview: https://medium.com/@RubenSomsen/statechains-non-custodial-off-chain-bitcoin-transfer-1ae4845a4a39
statechains paper: https://github.com/RubenSomsen/rubensomsen.github.io/blob/master/img/statechains.pdf
previous transcript: http://diyhpl.us/wiki/transcripts/scalingbitcoin/tokyo-2018/statechains/
Introduction I am going to talk casually through the whole statechains thing. If you want to interject, please do. I&amp;rsquo;ll get started. The current idea is to make it completely blind. It&amp;rsquo;s blinded statechains. The goal is to allow people to transfer a UTXO without changing anything on-chain. The concept I use to describe it is a blind signing server.</description></item><item><title>Hardware Wallets</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-07-hardware-wallets/</link><pubDate>Fri, 07 Jun 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-07-hardware-wallets/</guid><description>https://twitter.com/kanzure/status/1136924010955104257
How much should Bitcoin Core do, and how much should other libraries do? Andrew Chow wrote the wonderful HWI tool. Right now we have a pull request to support external signers. The HWI script can talk to most major hardware wallets because it has all the drivers built in now, and it can get keys from it, and sign arbitrary transactions. That&amp;rsquo;s roughly what it does. It&amp;rsquo;s kind of manual, though.</description></item><item><title>P2P Encryption</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-07-p2p-encryption/</link><pubDate>Fri, 07 Jun 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-07-p2p-encryption/</guid><description>https://twitter.com/kanzure/status/1136939003666685952
https://github.com/bitcoin-core/bitcoin-devwiki/wiki/P2P-Design-Philosophy
&amp;ldquo;Elligator Squared: Uniform Points on Elliptic Curves of Prime Order as Uniform Random Strings&amp;rdquo; https://eprint.iacr.org/2014/043
Previous talks https://btctranscripts.com/scalingbitcoin/milan-2016/bip151-peer-encryption/
https://btctranscripts.com/sf-bitcoin-meetup/2017-09-04-jonas-schnelli-bip150-bip151/
Introduction This proposal has been in progress for years. Many ideas from sipa and gmaxwell went into bip151. Years ago I decided to try to move this forward. There is bip151 that again most of the ideas are not from myself but come from sipa and gmaxwell. The original proposal was withdrawn because we figured out ways to do it better.</description></item><item><title>Signet</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-07-signet/</link><pubDate>Fri, 07 Jun 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-07-signet/</guid><description>https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-March/016734.html
https://twitter.com/kanzure/status/1136980462524608512
Introduction I am going to talk a little bit about signet. Does anyone not know what signet is? The idea is to have a signature of the block or the previous block. The idea is that testnet is horribly broken for testing things, especially testing things for long-term. You have large reorgs on testnet. What about testnet with a less broken difficulty adjustment? Testnet is for miner testing really.</description></item><item><title>General discussion on SIGHASH_NOINPUT, OP_CHECKSIGFROMSTACK, and OP_SECURETHEBAG</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-06-noinput-etc/</link><pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-06-noinput-etc/</guid><description>SIGHASH_NOINPUT, ANYPREVOUT, OP_CHECKSIGFROMSTACK, OP_CHECKOUTPUTSHASHVERIFY, and OP_SECURETHEBAG
https://twitter.com/kanzure/status/1136636856093876225
There&amp;rsquo;s apparently some political messaging around OP_SECURETHEBAG and &amp;ldquo;secure the bag&amp;rdquo; might be an Andrew Yang thing.
SIGHASH_NOINPUT A bunch of us are familiar with NOINPUT. Does anyone need an explainer? What&amp;rsquo;s the difference from the original NOINPUT and the new one? NOINPUT is kind of scary to at least some people. If we just do NOINPUT, does that start causing problems in bitcoin?</description></item><item><title>Great Consensus Cleanup</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-06-great-consensus-cleanup/</link><pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-06-great-consensus-cleanup/</guid><description>https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-March/016714.html
https://twitter.com/kanzure/status/1136591286012698626
Introduction There&amp;rsquo;s not much new to talk about. Unclear about CODESEPARATOR. You want to make it a consensus rule that transactions can&amp;rsquo;t be larger than 100 kb. No reactions to that? Alright. Fine, we&amp;rsquo;re doing it. Let&amp;rsquo;s do it. Does everyone know what this proposal is?
Validation time for any block&amp;ndash; we were lazy about fixing this. Segwit was a first step to fixing this, by giving people a way to do this in a more efficient way.</description></item><item><title>Maintainers view of the Bitcoin Core project</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-06-maintainers/</link><pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-06-maintainers/</guid><description>https://twitter.com/kanzure/status/1136568307992158208
How do the maintainers think or feel everything is going? Are there any frustrations? Could contributors help eliminate these frustrations? That&amp;rsquo;s all I have.
It would be good to have better oversight or overview about who is working in what direction, to be more efficient. Sometimes I have seen people working on the same thing, and both make a similar pull request with a lot of overlap. This is more of a coordination issue.</description></item><item><title>Taproot</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-06-taproot/</link><pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-06-taproot/</guid><description>https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-May/016914.html
https://bitcoinmagazine.com/articles/taproot-coming-what-it-and-how-it-will-benefit-bitcoin/
previously: http://diyhpl.us/wiki/transcripts/bitcoin-core-dev-tech/2018-03-06-taproot-graftroot-etc/
https://twitter.com/kanzure/status/1136616356827283456
Introduction Okay, so, first question- who put my name on that list and what do they want? It wasn&amp;rsquo;t me. I&amp;rsquo;ll ask questions. I can give a summary, but there&amp;rsquo;s been a lot of talk already and I don&amp;rsquo;t know what to focus on. What would sipa like us to review in particular about it? What design decisions do you feel least confident about? Is there anything where you would like other people to investigate design decisions before charging ahead?</description></item><item><title>Utreexo</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-06-utreexo/</link><pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-06-utreexo/</guid><description>Utreexo: hash-based accumulator for bitcoin UTXOs
http://diyhpl.us/wiki/transcripts/bitcoin-core-dev-tech/2018-10-08-utxo-accumulators-and-utreexo/
http://diyhpl.us/wiki/transcripts/mit-bitcoin-expo-2019/utreexo/
Utreexo paper https://eprint.iacr.org/2019/611.pdf
https://github.com/mit-dci/utreexo
https://twitter.com/kanzure/status/1136560700187447297
Introduction You still download everything; instead of writing to your UTXO database, you modify your accumulator. You accept a proof that it&amp;rsquo;s in the UTXO accumulator, you put it in there yourself, you just don&amp;rsquo;t remember it anymore. The end result is that you store less than a kilobyte instead of 4 GB or so. But the downside is that you need all these proofs.</description></item><item><title>Code Review</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-05-code-review/</link><pubDate>Wed, 05 Jun 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-05-code-review/</guid><description>Code review survey and complaints https://twitter.com/kanzure/status/1136261311359324162
Introduction I wanted to talk about the code review process for Bitcoin Core. I have done no code reviews, but following along the project for the past year I&amp;rsquo;ve heard that this is a pain point for the project and I think most developers would love to see it improved. I&amp;rsquo;d like to help out in some way to help infuse some energy to help with code reviews.</description></item><item><title>Wallet Architecture</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-05-wallet-architecture/</link><pubDate>Wed, 05 Jun 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-05-wallet-architecture/</guid><description>Bitcoin Core wallet architecture + descriptors
https://twitter.com/kanzure/status/1136282460675878915
writeup: https://github.com/bitcoin/bitcoin/issues/16165
Wallet architecture discussion There are three main areas here. One is IsMine: how do I determine a particular output is affecting my wallet? What about asking for a new address, where is it coming from? That&amp;rsquo;s not just get new address, it&amp;rsquo;s get raw change address, it&amp;rsquo;s also change being created in fundrawtransaction. The third issue is wallet signing. Storage is not an entrypoint, it&amp;rsquo;s just a way of implementing these things.</description></item><item><title>Signmessage</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2018-10/2018-10-10-signmessage/</link><pubDate>Wed, 10 Oct 2018 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2018-10/2018-10-10-signmessage/</guid><description>kallewoof and others
https://twitter.com/kanzure/status/1049834659306061829
I am trying to make a new signmessage to do other things. Just use the signature system inside bitcoin to sign a message. Sign a message that someone wants. You can use proof-of-funds or whatever.
You could just have a signature and it&amp;rsquo;s a signature inside of a package and it&amp;rsquo;s small and easy. Another option is to have a .. that is invalid somehow. You do a transaction with some input, where the txid is the message hash or something.</description></item><item><title>Bitcoin Optech</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2018-10/2018-10-09-bitcoin-optech/</link><pubDate>Tue, 09 Oct 2018 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2018-10/2018-10-09-bitcoin-optech/</guid><description>https://twitter.com/kanzure/status/1049527415767101440
https://bitcoinops.org/
Bitcoin Optech is trying to encourage bitcoin businesses to adopt better scaling techniques and technologies, things like batching, segwit, down the line maybe Schnorr signatures, aggregatable signatures, maybe lightning. Right now we&amp;rsquo;re focusing on things that businesses could be doing right now. Exchanges could be batching, and some aren&amp;rsquo;t. We&amp;rsquo;re talking to those companies and listening to their concerns and what they&amp;rsquo;re doing, and just trying to nudge them in the right direction.</description></item><item><title>Wallet Stuff</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2018-10/2018-10-09-wallet-stuff/</link><pubDate>Tue, 09 Oct 2018 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2018-10/2018-10-09-wallet-stuff/</guid><description>https://twitter.com/kanzure/status/1049526667079643136
Maybe we can have the wallet PRs have a different review process so that there can be some specialization, even if the wallet is not ready to be split out. In the future, if the wallet was a separate project or repository, then that would be better. We need to be able to subdivide the work better than we already do, and the wallet is a good place to start doing it.</description></item><item><title>Efficient P2P Transaction Relay</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2018-10/2018-10-08-efficient-p2p-transaction-relay/</link><pubDate>Mon, 08 Oct 2018 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2018-10/2018-10-08-efficient-p2p-transaction-relay/</guid><description>p2p transaction relay protocol improvements with set reconciliation gleb
I don&amp;rsquo;t know if I need to motivate this problem. I presented a work in progress session at Scaling. The cost of relaying transactions or announcing a transaction in a network&amp;ndash; how many announcements do you have? Every link has an announcement in either direction right now, and then there&amp;rsquo;s the number of nodes multiplied by the number of connections per node.</description></item><item><title>Script Descriptors</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2018-10/2018-10-08-script-descriptors/</link><pubDate>Mon, 08 Oct 2018 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2018-10/2018-10-08-script-descriptors/</guid><description>https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md
I would like to talk about script descriptors. There&amp;rsquo;s a number of projects we&amp;rsquo;re working on and they are all kind of related. I&amp;rsquo;d like to clarify how things fit together.
Note: there is an earlier transcript that has not been published (needs review) about script descriptors.
Agenda History of script descriptors and how we came to this. What&amp;rsquo;s currently in Bitcoin Core v0.17 Wallet integration DESCRIPT About script descriptors The problem that I wanted to tackle was that currently in Bitcoin Core wallet we have a blob of public keys and private keys and HD chains and scripts and a bunch of other metadata and keypools.</description></item><item><title>UTXO accumulators, UTXO commitments, and Utreexo</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2018-10/2018-10-08-utxo-accumulators-and-utreexo/</link><pubDate>Mon, 08 Oct 2018 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2018-10/2018-10-08-utxo-accumulators-and-utreexo/</guid><description>https://twitter.com/kanzure/status/1049112390413897728
If people saw Benedikt&amp;rsquo;s talk, two days ago, it&amp;rsquo;s related. It&amp;rsquo;s a different construction but same goal. The basic idea is, and I think Cory kind of started to talk about this a few months ago on the mailing list&amp;hellip; instead of storing all UTXOs in leveldb, store the hash of each UTXO, and then it&amp;rsquo;s half the size, and then you could almost create it from the hash of the input, it&amp;rsquo;s like 10 bytes more.</description></item><item><title>Priorities</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2018-03/2018-03-07-priorities/</link><pubDate>Wed, 07 Mar 2018 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2018-03/2018-03-07-priorities/</guid><description>https://twitter.com/kanzure/status/972863994489901056
Priorities We&amp;rsquo;re going to wait until BlueMatt is here. Nobody knows what his priorities are. He says he might be in around noon.
There&amp;rsquo;s an ex-Google product director interested in helping with Bitcoin Core. He was asking about how to get involved. I told him to get involved by just diving in. He will be spending some time at Chaincode at the end of March. We&amp;rsquo;ll get a sense for what his skills are.</description></item><item><title>Merkleized Abstract Syntax Trees - MAST</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2018-03/2018-03-06-merkleized-abstract-syntax-trees-mast/</link><pubDate>Tue, 06 Mar 2018 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2018-03/2018-03-06-merkleized-abstract-syntax-trees-mast/</guid><description>https://twitter.com/kanzure/status/972120890279432192
See also http://diyhpl.us/wiki/transcripts/bitcoin-core-dev-tech/2017-09-07-merkleized-abstract-syntax-trees/
MAST stuff You could directly merkleize scripts if you switch from IF, IFNOT, ELSE with IFJUMP that has the number of bytes.
With graftroot and taproot, you never to do any scripts (which were a hack to get things started). But we&amp;rsquo;re doing validation and computation.
You take every single path it has; so instead, it becomes &amp;hellip; certain condition, or certain not conditions&amp;hellip; You take every possible ifs, you use this, you say it&amp;rsquo;s one of these, then you specify which one, and you show it and everyone else can validate this.</description></item><item><title>Taproot, Graftroot, Etc</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2018-03/2018-03-06-taproot-graftroot-etc/</link><pubDate>Tue, 06 Mar 2018 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2018-03/2018-03-06-taproot-graftroot-etc/</guid><description>https://twitter.com/kanzure/status/972468121046061056
Graftroot The idea of graftroot is that in every contract there is a superset of people that can spend the money. This assumption is not always true but it&amp;rsquo;s almost always true. Say you want to lock up these coins for a year, without any conditionals to it, then it doesn&amp;rsquo;t work. But assume you have&amp;ndash; pubkey recovery? No&amp;hellip; pubkey recovery is inherently incompatible with any form of aggregation, and aggregation is far superior.</description></item><item><title>Bellare-Neven</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2018-03/2018-03-05-bellare-neven/</link><pubDate>Mon, 05 Mar 2018 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2018-03/2018-03-05-bellare-neven/</guid><description>See also http://diyhpl.us/wiki/transcripts/bitcoin-core-dev-tech/2017-09-06-signature-aggregation/
It&amp;rsquo;s been published, it&amp;rsquo;s been around for a decade, and it&amp;rsquo;s widely cited. In Bellare-Neven, it&amp;rsquo;s itself, it&amp;rsquo;s a multi-signature scheme which means multiple pubkeys and one message. You should treat the individual authorizations to spend inputs, as individual messages. What we need is an interactive aggregate signature scheme. Bellare-Neven&amp;rsquo;s paper suggests a trivial way of building an aggregate signature scheme out of a multisig scheme where interactively everyone signs everyone&amp;rsquo;s message.</description></item><item><title>Cross Curve Atomic Swaps</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2018-03/2018-03-05-cross-curve-atomic-swaps/</link><pubDate>Mon, 05 Mar 2018 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2018-03/2018-03-05-cross-curve-atomic-swaps/</guid><description>https://twitter.com/kanzure/status/971827042223345664
Draft of an upcoming scriptless scripts paper. This was at the beginning of 2017. But now an entire year has gone by.
post-schnorr lightning transactions https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-February/001031.html
An adaptor signature.. if you have different generators, then the two secrets to reveal, you just give someone both of them, plus a proof of a discrete log, and then you say learn the secret to one that gets the reveal to be the same.</description></item><item><title>Merkleized Abstract Syntax Trees</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2017-09/2017-09-07-merkleized-abstract-syntax-trees/</link><pubDate>Thu, 07 Sep 2017 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2017-09/2017-09-07-merkleized-abstract-syntax-trees/</guid><description>https://twitter.com/kanzure/status/907075529534328832
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-September/014932.html
I am going to talk about the scheme I posted to the mailing list yesterday which is to implement MAST (merkleized abstract syntax trees) in bitcoin in a minimally invasive way as possible. It&amp;rsquo;s broken into two major consensus features that together gives us MAST. I&amp;rsquo;ll start with the last BIP.
This is tail-call evaluation. Can we generalize P2SH to give us more general capabilities, than just a single redeem script.</description></item><item><title>Signature Aggregation</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2017-09/2017-09-06-signature-aggregation/</link><pubDate>Wed, 06 Sep 2017 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2017-09/2017-09-06-signature-aggregation/</guid><description>https://twitter.com/kanzure/status/907065194463072258
Sipa, can you sign and verify ECDSA signatures by hand? No. Over GF(43), maybe. Inverses could take a little bit to compute. Over GF(2).
I think the first thing we should talk about is some definitions. I&amp;rsquo;d like to start by distinguishing between three things: Key aggregation, signature aggregation, and batch validation. Multi-signature later.
There are three different problems. Key aggregation is where there are a number of people with each their own key, they want to produce a combined key that can only sign when they come together.</description></item><item><title>Meeting Notes</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2017-09/2017-09-05-meeting-notes/</link><pubDate>Tue, 05 Sep 2017 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2017-09/2017-09-05-meeting-notes/</guid><description>coredev.tech september 2017
https://twitter.com/kanzure/status/907233490919464960
((As always, any errors are most likely my own. etc.))
Introduction There is significant concern regarding whether BlueMatt has become a misnomer.
Monday night presentation: https://btctranscripts.com/sf-bitcoin-meetup/2017-09-04-jonas-schnelli-bip150-bip151/
I think we should continue to use #bitcoin-core-dev for anything about changing Bitcoin Core and try to keep things open even though we&amp;rsquo;re together here today and tomorrow and the next.
Wallets and block pruning and rescans Nobody produces P2SH change when they have a native output.</description></item><item><title>Bitcoin Law For Developers</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2015-02/james-gatto-marco-santori-bitcoin-law-for-developers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2015-02/james-gatto-marco-santori-bitcoin-law-for-developers/</guid><description>We are going to be taking a 15 minute coffee break after our next two speakers. I want to introduce you to James Gatto and Marco Santori with Pilsbury. They will be spending some time talking about Bitcoin law. They have a room this afternoon and they are offering to talk with you one on one. So Marco and James.
You missed the introduction. Was it any good? (laughter)
We are here to talk about legal issues.</description></item><item><title>Gavinandresen</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2015-02/gavinandresen/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2015-02/gavinandresen/</guid><description>http://blog.circle.com/2015/02/10/devcore-livestream/
The instant transaction time.. you know I walk up to a cash register, I put my phone there, and in a second or two the transaction is confirmed and I walk away with my coffee. Anything beyond that, 10 minutes versus 1 minute doesn&amp;rsquo;t matter. So the problem you want to solve is how do we get instant confirmation.. there&amp;rsquo;s a bunch of ideas about this, like a trusted third party that promises to not double spend, have some coins locked up in a multisig wallet like Green Address.</description></item><item><title>R&amp;D Goals &amp; Challenges</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2015-02/research-and-development-goals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2015-02/research-and-development-goals/</guid><description>We often see people saying they are testing the waters, they fixed a typo, they made a tiny little fix that doesn&amp;rsquo;t impact much, they are getting used to the process. They are finding that it&amp;rsquo;s really easy to contribut to Bitcoin Core. You code your changes, you submit your changes, there&amp;rsquo;s not much to it.
There&amp;rsquo;s a difference, and the lines are fuzzy and undefined, and you can make a change to Core that changes a spelling error or a change to policy or consensus rules, for those high-level things, for ecosystem-level things, there&amp;rsquo;s several mailing lists, the dev list gets the most traffic.</description></item><item><title>Talk by the founders of Circle</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2015-02/jeremy-allaire-circle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2015-02/jeremy-allaire-circle/</guid><description>We are excited to be here and sponsoring this event. We have backgrounds in working on developer tools that goes back to the early days of something.
How do we mature the development of Bitcoin Core itself? One of the things that is useful is suss out the key components of it. In a standard you have a spec, it could be a whitepaper, and then you have a reference implementation, and then a test suite that enforces interoperability.</description></item></channel></rss>