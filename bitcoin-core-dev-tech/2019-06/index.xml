<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bitcoin Core Dev Tech 2019 on ₿itcoin Transcripts</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/</link><description>Recent content in Bitcoin Core Dev Tech 2019 on ₿itcoin Transcripts</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 07 Jun 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/index.xml" rel="self" type="application/rss+xml"/><item><title>AssumeUTXO</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-07-assumeutxo/</link><pubDate>Fri, 07 Jun 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-07-assumeutxo/</guid><description>https://twitter.com/kanzure/status/1137008648620838912
Why assumeutxo assumeutxo is a spiritual continuation of assumevalid. Why do we want to do this in the first place? At the moment, it takes hours and days to do initial block download. Various projects in the community have been implementing meassures to speed this up. Casa I think bundles datadir with their nodes. Other projects like btcpay have various ways of bundling this up and signing things with gpg keys and these solutions are not quite half-baked but they are probably not desirable either.</description></item><item><title>Blind statechains: UTXO transfer with a blind signing server</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-07-statechains/</link><pubDate>Fri, 07 Jun 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-07-statechains/</guid><description>https://twitter.com/kanzure/status/1136992734953299970
&amp;ldquo;Formalizing Blind Statechains as a minimalistic blind signing server&amp;rdquo; https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-June/017005.html
overview: https://medium.com/@RubenSomsen/statechains-non-custodial-off-chain-bitcoin-transfer-1ae4845a4a39
statechains paper: https://github.com/RubenSomsen/rubensomsen.github.io/blob/master/img/statechains.pdf
previous transcript: http://diyhpl.us/wiki/transcripts/scalingbitcoin/tokyo-2018/statechains/
Introduction I am going to talk casually through the whole statechains thing. If you want to interject, please do. I&amp;rsquo;ll get started. The current idea is to make it completely blind. It&amp;rsquo;s blinded statechains. The goal is to allow people to transfer a UTXO without changing anything on-chain. The concept I use to describe it is a blind signing server.</description></item><item><title>Hardware Wallets</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-07-hardware-wallets/</link><pubDate>Fri, 07 Jun 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-07-hardware-wallets/</guid><description>https://twitter.com/kanzure/status/1136924010955104257
How much should Bitcoin Core do, and how much should other libraries do? Andrew Chow wrote the wonderful HWI tool. Right now we have a pull request to support external signers. The HWI script can talk to most major hardware wallets because it has all the drivers built in now, and it can get keys from it, and sign arbitrary transactions. That&amp;rsquo;s roughly what it does. It&amp;rsquo;s kind of manual, though.</description></item><item><title>P2P Encryption</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-07-p2p-encryption/</link><pubDate>Fri, 07 Jun 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-07-p2p-encryption/</guid><description>https://twitter.com/kanzure/status/1136939003666685952
https://github.com/bitcoin-core/bitcoin-devwiki/wiki/P2P-Design-Philosophy
&amp;ldquo;Elligator Squared: Uniform Points on Elliptic Curves of Prime Order as Uniform Random Strings&amp;rdquo; https://eprint.iacr.org/2014/043
Previous talks https://btctranscripts.com/scalingbitcoin/milan-2016/bip151-peer-encryption/
https://btctranscripts.com/sf-bitcoin-meetup/2017-09-04-jonas-schnelli-bip150-bip151/
Introduction This proposal has been in progress for years. Many ideas from sipa and gmaxwell went into bip151. Years ago I decided to try to move this forward. There is bip151 that again most of the ideas are not from myself but come from sipa and gmaxwell. The original proposal was withdrawn because we figured out ways to do it better.</description></item><item><title>Signet</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-07-signet/</link><pubDate>Fri, 07 Jun 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-07-signet/</guid><description>https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-March/016734.html
https://twitter.com/kanzure/status/1136980462524608512
Introduction I am going to talk a little bit about signet. Does anyone not know what signet is? The idea is to have a signature of the block or the previous block. The idea is that testnet is horribly broken for testing things, especially testing things for long-term. You have large reorgs on testnet. What about testnet with a less broken difficulty adjustment? Testnet is for miner testing really.</description></item><item><title>General discussion on SIGHASH_NOINPUT, OP_CHECKSIGFROMSTACK, and OP_SECURETHEBAG</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-06-noinput-etc/</link><pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-06-noinput-etc/</guid><description>SIGHASH_NOINPUT, ANYPREVOUT, OP_CHECKSIGFROMSTACK, OP_CHECKOUTPUTSHASHVERIFY, and OP_SECURETHEBAG
https://twitter.com/kanzure/status/1136636856093876225
There&amp;rsquo;s apparently some political messaging around OP_SECURETHEBAG and &amp;ldquo;secure the bag&amp;rdquo; might be an Andrew Yang thing.
SIGHASH_NOINPUT A bunch of us are familiar with NOINPUT. Does anyone need an explainer? What&amp;rsquo;s the difference from the original NOINPUT and the new one? NOINPUT is kind of scary to at least some people. If we just do NOINPUT, does that start causing problems in bitcoin?</description></item><item><title>Great Consensus Cleanup</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-06-great-consensus-cleanup/</link><pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-06-great-consensus-cleanup/</guid><description>https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-March/016714.html
https://twitter.com/kanzure/status/1136591286012698626
Introduction There&amp;rsquo;s not much new to talk about. Unclear about CODESEPARATOR. You want to make it a consensus rule that transactions can&amp;rsquo;t be larger than 100 kb. No reactions to that? Alright. Fine, we&amp;rsquo;re doing it. Let&amp;rsquo;s do it. Does everyone know what this proposal is?
Validation time for any block&amp;ndash; we were lazy about fixing this. Segwit was a first step to fixing this, by giving people a way to do this in a more efficient way.</description></item><item><title>Maintainers view of the Bitcoin Core project</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-06-maintainers/</link><pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-06-maintainers/</guid><description>https://twitter.com/kanzure/status/1136568307992158208
How do the maintainers think or feel everything is going? Are there any frustrations? Could contributors help eliminate these frustrations? That&amp;rsquo;s all I have.
It would be good to have better oversight or overview about who is working in what direction, to be more efficient. Sometimes I have seen people working on the same thing, and both make a similar pull request with a lot of overlap. This is more of a coordination issue.</description></item><item><title>Taproot</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-06-taproot/</link><pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-06-taproot/</guid><description>https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-May/016914.html
https://bitcoinmagazine.com/articles/taproot-coming-what-it-and-how-it-will-benefit-bitcoin/
previously: http://diyhpl.us/wiki/transcripts/bitcoin-core-dev-tech/2018-03-06-taproot-graftroot-etc/
https://twitter.com/kanzure/status/1136616356827283456
Introduction Okay, so, first question- who put my name on that list and what do they want? It wasn&amp;rsquo;t me. I&amp;rsquo;ll ask questions. I can give a summary, but there&amp;rsquo;s been a lot of talk already and I don&amp;rsquo;t know what to focus on. What would sipa like us to review in particular about it? What design decisions do you feel least confident about? Is there anything where you would like other people to investigate design decisions before charging ahead?</description></item><item><title>Utreexo</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-06-utreexo/</link><pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-06-utreexo/</guid><description>Utreexo: hash-based accumulator for bitcoin UTXOs
http://diyhpl.us/wiki/transcripts/bitcoin-core-dev-tech/2018-10-08-utxo-accumulators-and-utreexo/
http://diyhpl.us/wiki/transcripts/mit-bitcoin-expo-2019/utreexo/
Utreexo paper https://eprint.iacr.org/2019/611.pdf
https://github.com/mit-dci/utreexo
https://twitter.com/kanzure/status/1136560700187447297
Introduction You still download everything; instead of writing to your UTXO database, you modify your accumulator. You accept a proof that it&amp;rsquo;s in the UTXO accumulator, you put it in there yourself, you just don&amp;rsquo;t remember it anymore. The end result is that you store less than a kilobyte instead of 4 GB or so. But the downside is that you need all these proofs.</description></item><item><title>Code Review</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-05-code-review/</link><pubDate>Wed, 05 Jun 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-05-code-review/</guid><description>Code review survey and complaints https://twitter.com/kanzure/status/1136261311359324162
Introduction I wanted to talk about the code review process for Bitcoin Core. I have done no code reviews, but following along the project for the past year I&amp;rsquo;ve heard that this is a pain point for the project and I think most developers would love to see it improved. I&amp;rsquo;d like to help out in some way to help infuse some energy to help with code reviews.</description></item><item><title>Wallet Architecture</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-05-wallet-architecture/</link><pubDate>Wed, 05 Jun 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2019-06/2019-06-05-wallet-architecture/</guid><description>Bitcoin Core wallet architecture + descriptors
https://twitter.com/kanzure/status/1136282460675878915
writeup: https://github.com/bitcoin/bitcoin/issues/16165
Wallet architecture discussion There are three main areas here. One is IsMine: how do I determine a particular output is affecting my wallet? What about asking for a new address, where is it coming from? That&amp;rsquo;s not just get new address, it&amp;rsquo;s get raw change address, it&amp;rsquo;s also change being created in fundrawtransaction. The third issue is wallet signing. Storage is not an entrypoint, it&amp;rsquo;s just a way of implementing these things.</description></item></channel></rss>