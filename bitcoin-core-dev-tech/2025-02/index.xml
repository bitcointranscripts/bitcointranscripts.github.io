<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bitcoin Core Dev Tech 2025 (Feb) on ₿itcoin Transcripts</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/</link><description>Recent content in Bitcoin Core Dev Tech 2025 (Feb) on ₿itcoin Transcripts</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 28 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/index.xml" rel="self" type="application/rss+xml"/><item><title>Fast IBD</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/fast-ibd/</link><pubDate>Fri, 28 Feb 2025 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/fast-ibd/</guid><description>Idea is to speed up IBD by giving &amp;ldquo;hints&amp;rdquo; to whoever does it
With Core, there would be some information that we give to every client that tells them whether or not an output is going to enter the utxo set
For simplicity take asssumevalid, you take the same points, the question is, once we reach that point, are the outputs gonna be in the utxo set, create a bitfield, 200mb of data, compressable because you have a bunch of 0s and very few 1s.</description></item><item><title>PR Review Club</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/asmap/</link><pubDate>Fri, 28 Feb 2025 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/asmap/</guid><description>Scribe 1: PR 23792: is the only PR that&amp;rsquo;s left for ASMAP (needs cmake changes first) - hope to get this into v30.0
How does ASMAP ends up in a Asmap file? Kartograph tool, based on rpki-client-nix () use tool from bitcoin Core encode and compress it multiple people will run the Kartograph tool How often should you refresh it? using an old one should be better than /16 but using a fresh asmap is better quality drops off slowly, probably five years or so.</description></item><item><title>PR Review Club</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/pr-review-club/</link><pubDate>Fri, 28 Feb 2025 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/pr-review-club/</guid><description>What are the goals of the review club? Helping newcomers learn, beyond the conceptual/protocol knowledge We all have PRs that we all want to review, and having people to bounce questions/ideas on is really helpful, so why don&amp;rsquo;t we all come together Are these goals compatible? They could be: to answer newbie&amp;rsquo;s questions, we also need experienced developers there to answer them.
Some attendees mentioned they learned a lot from review club in their early contributor days, both from attending as well as hosting clubs.</description></item><item><title>QML Update</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/qml-update/</link><pubDate>Fri, 28 Feb 2025 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/qml-update/</guid><description>Meta:
QML is only currently-supported QT framework Background:
Design team has put a lot of effort into constructing UI, including multisig and other features Goal: get parity to current UI. One-to-one, plus more There is a well documented &amp;lsquo;design framework&amp;rsquo; that goes with this, including Figma toolkits Design framework allows people to expand the featureset in a natural way, from a design-first way, which reduces engineering work Mobile-friendly designs available. QML flexible and can be deployed in different environments, so designers are taking advantage of that by supporting mobile, even if no immediate plans to do so in Bitcoin Core Main focus however is /not/ mobile, it&amp;rsquo;s the desktop version New contributors have been able to get involved quickly as a by-product of the Figma and design tooling available Current/Completed Development</description></item><item><title>Batch Validation + CheckQueue</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/batch-validation-checkqueue/</link><pubDate>Thu, 27 Feb 2025 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/batch-validation-checkqueue/</guid><description>Prior Batch Validation Work A pull request (PR) for libsecp256k1 to implement batch validation (Strauss) seems abandoned; Fabian has rebased and is maintaining a branch, along with a Bitcoin Core PR.
Batch Validation PR in secp by siv2r: bitcoin-core/secp256k1#1134 Rebased branch maintained by fjahr, supports cmake now: https://github.com/fjahr/secp256k1/tree/pr1134-rebase-2024 Batch Validation PR in Bitcoin Core by fjahr: bitcoin/bitcoin#29491 Novo created both a benchmark and a multithreading patch, but this approach may not be ideal long-term.</description></item><item><title>Block Validation Logic</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/block-validation/</link><pubDate>Thu, 27 Feb 2025 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/block-validation/</guid><description>There are multiple stages to validating a block:
1) Header Received 2) Receive full block 3) Connect block The three steps can happen in different orders. In IBD, we first receive all the headers up to Consensus::Params::nMinimumChainWork before we ask for any blocks. Then we download up to 1024 blocks ahead of time, so we may be missing a block&amp;rsquo;s predecessors. So the steps cannot be done sequentally. This is also why the IBD logs are &amp;ldquo;janky&amp;rdquo;: sometimes nothing happens for a few seconds (because blocks are being downloaded), and then suddenly a lot of blocks can be connected.</description></item><item><title>Consensus Cleanup</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/consensus-cleanup/</link><pubDate>Thu, 27 Feb 2025 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/consensus-cleanup/</guid><description>refresher on timewarp and Murch-Zawy attacks miners take ages to upgrade therefore we need to make preparatory changes asap to make sure they never create invalid once/if such a soft fork is activated tried to get feedback about whether they&amp;rsquo;d be comfortable doing so. Been told it&amp;rsquo;s fine but we need a BIP with concrete specs of potentially-coming soft fork first. concrete preparations: always respect the timewarp rule in the block template creator (done in 29.</description></item><item><title>Experimental Binaries</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/experimental-binaries/</link><pubDate>Thu, 27 Feb 2025 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/experimental-binaries/</guid><description>Multiprocess / IPC / Stratum V2 could be a good candidate for an experimental binary
These are experimental features and perhaps releasing experimental features in non-experimental binaries is what we are after. Disabled by a flag.
To be hosted on our website bitcoincore.org it must be guix buildable.
Auto-update is not a feature that would be considered allowable as an experimental feature. The experimental thing has to fit with our existing security expectations.</description></item><item><title>Historical CVE Stats</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/bug-analysis/</link><pubDate>Thu, 27 Feb 2025 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/bug-analysis/</guid><description>Vulnerability disclosures Method of finding bug Impact of bug Component of bug Bug introduction</description></item><item><title>Libbitcoinkernel - outstanding questions</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/libbitcoinkernel/</link><pubDate>Thu, 27 Feb 2025 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/libbitcoinkernel/</guid><description>BlockManager, Chainstate, ChainstateManager Chainstate keeps their own CChain class for keeping track of their chain of blocks, which is basically just BlockIndex entries, and manages the UTXO set.
ChainstateManager is there to orchestrate interactions between BlockManager and Chainstate and facilitate AssumeUTXO&amp;rsquo;s multiple chainstates.
Currently, only ChainstateManager is exposed in kernel API. Should we instead expose structures that allows users to implement AssumeUTXO functionality by themselves? We could expose a Chainstate and Blockmanager to facilitate that.</description></item><item><title>Low Level Networking</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/networking/</link><pubDate>Thu, 27 Feb 2025 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/networking/</guid><description>context Httpserver and p2p code have different event handling loops, p2p event handling lives in cconman, and http event handling uses libevent.
vasild opens pr to split the higher level p2p logic in cconmann and the event/sockets handling into sockman
Because libevent lacks support for unix sockets and that&amp;rsquo;s needed for stratum v2, pinheadmz has been evaluating dropping the libevent dependency from httpserver, and has recently been investigating reusing the event handling logic from vasild&amp;rsquo;s conman sockman split,</description></item><item><title>Multiprocess</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/multiprocess/</link><pubDate>Thu, 27 Feb 2025 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/multiprocess/</guid><description>Think of multiprocess in terms of the features it provides.
Multiprocess Features The first main feature is modularization. Having a separate binary for gui, wallet, node, that prevent lockups between processes. This also allows to e.g. spin up multiple GUIs to a single node, or a node without wallet, &amp;hellip;
The second feature is the -ipcbind feature. In addition to be able to spawn process, we can listen to a socket which anyone can connect to.</description></item><item><title>Orphan Handling + TxOrphanage</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/orphans/</link><pubDate>Thu, 27 Feb 2025 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/orphans/</guid><description>Discussion on p2p: improve TxOrphanage denial of service bounds and increase -maxorphantxs
TxOrphanage has 2 goals:
limit resource usage (DoS) resistance, both in terms of memory and computation try to guarantee usage / not to be easily censorable Today, we perform well on 1) and poorly on 2). The current TxOrphanage efforts aim to improve 2) while keeping 1).
Terminology count limit: number of orphans announcement limit: # of unique {orphan, peer} pairs memory limit: total weight of orphans -&amp;gt; deduplicated if an orphan is announced by multiple peers per-peer DoS score: max(CPU Score, Mem Score) - CPU Score = (# announcements by peer) / (# allowed per peer) - Mem Score = (non-deduplicated memory usage) / (allowed memory usage) Trimming logic: while orphanage exceeds limits, 1) pick DoSiest peer, then 2) delete randomoldest* announcement by peer.</description></item><item><title>Tx Relay Code Tour</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/tx-relay/</link><pubDate>Thu, 27 Feb 2025 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/tx-relay/</guid><description>part 1. tx download vs upload/broadcast are totally separate pieces of code and logic
download: deciding what to download from our peers. everything from receipt of invs to submitting to mempool. upload: deciding what to inv to peers (90% of the code), and responding to getdatas (just a few lines). where Erlay fits in here: BEFORE they send us an inv, we may do a sketch / set reconciliation before they decide what to inv us.</description></item><item><title>Bitcoin Core Project Scope</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/project-scope/</link><pubDate>Wed, 26 Feb 2025 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/project-scope/</guid><description>Note: this summary was drafted after the event on 2025-03-06
Duplication of project infrastructure? Yes, but the projects infra setup and ongoing work is essentially subsidized for the wallet and GUI now. So a separation would simply bring that to light and alleviate non GUI/wallet devs.
Discussion of wallet / GUI funding: If there isn&amp;rsquo;t funding for wallet or GUI, doesn&amp;rsquo;t that say something? But there is funding, it just goes mostly into non-Core wallets GUI has funding but not sure what tangible other show for it?</description></item><item><title>Building and download Bitcoin software in 30 years</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/software-distribution/</link><pubDate>Wed, 26 Feb 2025 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/software-distribution/</guid><description>Would be disappointed if told 10 years ago that today there would still be one single software project providing node and wallet and gui Ideal would be modular code, core would provide consensus library, there could be multiple nodes, wallets, guis built on top For example, there is not just one browser or operating system, but multiple projects, different languages, approaches Does not make sense a change to gui code goes through same process as change to consensus code Another downside of monolithic project is doesn’t encourage domain expertise, have to know everything to be productive Shouldn’t have to know about p2p to be a wallet developer for example And developers are usually not great at UI development, GUI experts not consensus experts Multiprocess project and kernel project should enable modularization Multiprocess can be seen like plugin system for alternate wallets/miners/p2p implementations Other work making code more modular: originally net code called consensus code, wallet code directly, now is split up original net split was more event ambitious, substituted libevent implementation, could be generalized questions what is ideal future?</description></item><item><title>Bus Factor</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/bus-factor/</link><pubDate>Wed, 26 Feb 2025 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/bus-factor/</guid><description>Many maintainers from 2019 are retired or gone.
Half a dozen OG devs left.
Code owners (dropped, probably not worth reviving)
Git blame works
Few people have deep and wide knowledge
Some people look at all things.
Out of band with OGs.
Examples Header sync (?) New steps added recently, but nobody has big picture. Check point removal? Do after release, hopefully someone notices it and brings up objections Test are knowledgle GUI tests Windows unit tests (?</description></item><item><title>Championing Projects</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/championing-projects/</link><pubDate>Wed, 26 Feb 2025 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/championing-projects/</guid><description>How to lead them? What makes people shy away from the topic? It shouldn&amp;rsquo;t be about command, it should be more about setting goals, provide space for people to contribute. It bleeds down to providing motivation. Leadership is both technical expertise, and managing people. One of the problems is hard to get people to review wallet code, even from working group members. While cmake, multiprocess, kernel have more participation. Critical mass is important.</description></item><item><title>How can we hold contributors accountable?</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/contributor-accountability/</link><pubDate>Wed, 26 Feb 2025 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/contributor-accountability/</guid><description>What is accountability? Do what you say you&amp;rsquo;re going to do Accountable to who funds you Accountable to the Bitcoin Core project as a whole Accountable to the project you worked on into the future Eventually we discussed the accountability comes down to ownership of a particular project or area of the codebase.
There was an observation that we don&amp;rsquo;t have enough resources to be accountable for all the things we need to be accountable for.</description></item><item><title>How did you decide what to work on?</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/picking-projects/</link><pubDate>Wed, 26 Feb 2025 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/picking-projects/</guid><description>One contributor delved into the code, found an issue, and started going from there. One contributor found things he could contribute straightaway given his expertise, like CI and CMake and ended up meeting other contributors and started working with them. One contributor looked at oldish issues that may need someone to take care of and thinks one of the issues is understanding what needs to be done, and “wasting” time working on small things that you may be familiar with but that are not really important.</description></item><item><title>How do we onboard new contributors?</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/onboarding-contributors/</link><pubDate>Wed, 26 Feb 2025 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/onboarding-contributors/</guid><description>what was your experience as a new contributor? Is there an onboarding, currently?
chaincode seminars, onboarding to bitcoin core document obbc useful for current engs as well, slightly out of date Started by jumping in and reverse engineering, not a great experience
New contributors are planes with bullet holes in the wings, not in the fusilage
There is a lot of fallout from the people just reading material, i.e. very few convert to writing code</description></item><item><title>Incentives for projects and pull requests</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/development-incentives/</link><pubDate>Wed, 26 Feb 2025 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/development-incentives/</guid><description>Early days mostly volunteers only couple paid developers
Features went in as passion projects
Work on tirelessly
Landscape has shifted to full time jobs
Publish or perish is the saying in academics
If you&amp;rsquo;re making a name for yourself as a professor you need published papers, getting citations, working to get grants. Feels like this now
If they&amp;rsquo;re working on something hard to tell if they&amp;rsquo;re working on it to stay employed, or whether it&amp;rsquo;s passion project.</description></item><item><title>Maintainers</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/maintainers/</link><pubDate>Wed, 26 Feb 2025 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/maintainers/</guid><description>a lot more than just a GPG key in the file want more of people taking ownership over knowledge, functions, sub-projects e.g. security, P2P, monitoring maintainers have responsibility for shipping code, and keeping it secure project doesn&amp;rsquo;t have a lot of definition of what maintainer is &amp;ldquo;a button pusher&amp;rdquo; actually make sure the release process is followed on time functioning website, upload the binaries for each release general repository maintenance assign PRs for review, close abandon or stale PRs if there&amp;rsquo;s sporadic CI failures, open new issues make sure projects set for release get in to that release do we need more maintainers?</description></item><item><title>Merge/PR Workflow/Process</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/pr-workflow/</link><pubDate>Wed, 26 Feb 2025 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/pr-workflow/</guid><description>Should we revisit / change the PR / merge PR workflow? In general, no major complaints general feeling that things are merged rather too quickly instead of too slow testing PRs are merged too slowly maybe people are more afraid of invalidating ACKs (not making changes / postponing to a follow-up) than necessary maintainers look at who gives the ACKs and weigh by their history/knowledge maintainer don&amp;rsquo;t usually merge their own PRs (Ci and Test may be exceptions) sometimes merging triggers review (maybe things that were not really ready were merged and this caused more review and them actually to get ready) - this is risky, but may have worked in the past how many ACKs are enough?</description></item><item><title>Non-development Contributions</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/non-development-contributions/</link><pubDate>Wed, 26 Feb 2025 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/non-development-contributions/</guid><description>Education / Outreach Optech Conference Saving Satoshi Fundraising Bitdevs User feedback Reproducing issues Priorities? Security Dep auditing CVE disclosure Mailing list Pen testing Dev Tooling CI Signet Fuzzing Drahtbot Corecheck,dev Bitcoin dev wiki Mentoring Developer hubs Review clubs Release Process Testing guide Building binaries Signing binaries translations Packaging for distro Monitoring b10c stuff etc Standardization BIPs Bolts etc Events Coredev Online communication channels Mailing list Delving IRC Twitter / etc Stack exchange bitcoincore.</description></item><item><title>Py-bitcoinkernel demo</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/py-bitcoinkernel/</link><pubDate>Wed, 26 Feb 2025 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/py-bitcoinkernel/</guid><description>Transcript No transcript of the conversation.
Demo The purpose of this demo was to showcase the py-bitcoinkernel Python libbitcoinkernel wrapper, with the specific focus on showing that this library makes it very low-barrier to explore and interact with the libbitcoinkernel interface. Specifically, on most platforms, the library can be installed from PyPI without dependencies, and basic interactions only take a few lines of code.
Wrapped demo The below script was demoed to show the &amp;ldquo;wrapped&amp;rdquo; version of the library.</description></item><item><title>Sender initiated packages (1p1c)</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/sender-initiated-packages/</link><pubDate>Wed, 26 Feb 2025 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/sender-initiated-packages/</guid><description>Goal: Make 1p1c more reliable In worst case currently is ability to protect 24 packages TRUC only? We know its 1p1c and also ~small child The whole idea is that sender initiated doesn&amp;rsquo;t relay on the orphanage “If we can avoid the orphanage, we should. If we can avoid it we have better propagation properties” Orphanage is less load bearing, less churn Handshake “I understand sender initiated” If we have not sent the parent, then send the package Packages are all chunks in a cluster mempool future?</description></item><item><title>Soft Forks</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/soft-forks/</link><pubDate>Wed, 26 Feb 2025 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/soft-forks/</guid><description>AJ&amp;rsquo;s recent publication &amp;ldquo;Bitcoin Forking Guide&amp;rdquo; used as a reference in this discussion
Five primary steps/phases:
Academic / R&amp;amp;D Prototyping Get it to industry - demonstrate use-cases Investors - you have the technicals, make sure everyone&amp;rsquo;s opinions are expressed and heard Merge/Activation Lessons from taproot: Did we ask these questions for taproot?
More practical attention to industry adoption required? No efforts towards specific implementations, although there was general attention from industry No tests in the BIP Not widely established that covenants are a good or bad idea?</description></item><item><title>When does Bitcoin Core ship things?</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/when-to-ship/</link><pubDate>Wed, 26 Feb 2025 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/when-to-ship/</guid><description>Core Principles Shipping requires merging first Sufficient review is essential Projects can span multiple releases Review time varies significantly (e.g., TxDownload: 5 months vs. leveldb changes: quick) Review Process Quality and source of ACKs matter Performance testing and reviews are important Need for more nuanced Concept ACKs/NACKs &amp;ldquo;Letting code bake&amp;rdquo; in master rarely uncovers major issues More RC testers could enable later-stage merges if we wanted Release Cycle Decisions Release scheduling influences merge timing Feature freeze cutoffs are typically maintainer decisions Time-based release cycle is somewhat flexible External Factors Project faces external pressure to ship features Some external pressure is considered healthy Project must balance external requests with maintenance burden Challenges Long review wait times Difficulty in getting explicit NACKs Balancing timely shipping with quality assurance</description></item><item><title>Future of Quantum Computing</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/quantum-computing/</link><pubDate>Tue, 25 Feb 2025 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/quantum-computing/</guid><description>BIP360
segwit 2.0 - new witness field just for QC signature data choose 1 (m?) of n schemes all the schemes are fixed size to prevent inscriptions ordinals etc fixed size for chosen sig type how do we know that any of these are resistant? once we have QC its too late EC might even be safe, just because you have QC doesn&amp;rsquo;t mean you can get the actual information out, it might still be exponential</description></item><item><title>IBD</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/ibd/</link><pubDate>Tue, 25 Feb 2025 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/ibd/</guid><description>There were two sessions about IBD, these notes are from the first of the two sessions.
Summary of what the facilitator presented:
The motivation for improving IBD performance is that it reduces the cost of a node reaching the tip of the network, and with each marginal reduction in cost, some new number of nodes or node operators that otherwise would not have joined the network because of the associated costs do so.</description></item><item><title>Macro Benchmarking</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/benchmarking/</link><pubDate>Tue, 25 Feb 2025 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/benchmarking/</guid><description>Add a macro benchmark suite with longer-running operations, exercising a different set of functionality that is performance-critical.
One of them could be the speed of an assumeUTXO load-and-dump (this would check block read/write and (de)serialization, but only part of validation). Another one could be an actual IBD for 840-880k blocks (small part of IBD, but should produce a representative comparison quickly). Another one would be a reindex-chainstate up to e.g. 880k blocks (more realistic, but takes long and doesn&amp;rsquo;t involve reading/writing blocks).</description></item><item><title>Release Process</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/release-process/</link><pubDate>Tue, 25 Feb 2025 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/release-process/</guid><description>A release process checklist was discussed.</description></item><item><title>Wallet / Chain tracking</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/wallet-chain-tracking/</link><pubDate>Tue, 25 Feb 2025 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2025-02/wallet-chain-tracking/</guid><description>There is a wallet crash that was observed on testnet (explained in #31824) Needs a combination of a reorg and an unclean shutdown to be triggered. Crash fixed in #31757, but even after, the wallet can have a wrong balance -&amp;gt; #30221 would resolve this Root issue: wallet transaction data is synced with disc continuously, best block locator only on chainstate flushes -&amp;gt; mixed state in case of unclean shutdowns Two ways to deal with it: It could be acceptable, but then we’d need a cleanup process in addition to rescanning that would iterate over all inactive / abandoned transaction on restart and check if they may actually be in the chain.</description></item></channel></rss>