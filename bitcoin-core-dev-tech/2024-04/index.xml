<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bitcoin Core Dev Tech 2024 (Apr) on ₿itcoin Transcripts</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/</link><description>Recent content in Bitcoin Core Dev Tech 2024 (Apr) on ₿itcoin Transcripts</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 11 Apr 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/index.xml" rel="self" type="application/rss+xml"/><item><title>ASMap</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/asmap/</link><pubDate>Thu, 11 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/asmap/</guid><description>From virtu&amp;rsquo;s presentation Distribution of nodes in ASes is low 8k reachable clearnet nodes / 30k unreachable A contributor has different statistics that show a lot more nodes, not sure which numbers are (more) correct. These numbers are would mean that some of the simulations are already a reality. Most nodes from Hetzner and AWS Shift compute and bandwidth to nodes in small ASes Unreachable nodes cannot sustain ten outbound connections Discussions Ignore AS for blocks-only connections?</description></item><item><title>assumeUTXO Mainnet Readiness</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/assumeutxo-mainnet-readiness/</link><pubDate>Wed, 10 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/assumeutxo-mainnet-readiness/</guid><description>Conceptual discussion about the point raised by Sjors in the Tracking issue: https://github.com/bitcoin/bitcoin/issues/29616#issuecomment-1988390944 The outcome is pretty much the same as in the issue: Some people think it’s better to keep the params, and the rest agree that at least it’s better to keep them for now A perspective on the options: With the params, it puts more responsibility (and potentially pressure) on the maintainers, if they are removed the users have to do much more due diligence which snapshot is ok to use.</description></item><item><title>GUI Discussions</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/gui-discussions/</link><pubDate>Wed, 10 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/gui-discussions/</guid><description>QML GUI Slides
Q&amp;amp;A
Current GUI and QML progress seems slow? Code review / build system involvement? Will there be a test suite? Test suite yes, No fuzzing planned Why not RPC based? RPC not currently capable of building this UI on top of Is there a QML dependency graph? More dependencies required for sure May have to abandon depends approach Blocking calls historically an issue A consideration, but more to talk about here Integrated GUI Cost/Benefit Slides</description></item><item><title>Kernel</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/kernel/</link><pubDate>Wed, 10 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/kernel/</guid><description>The kernel project is just about done with its first stage (separating the validation logic into a separate library), so a discussion about the second stage of the project, giving the library a usable external API was held. Arguments around two questions were collected and briefly debated.
Should a C API for the kernel library be developed with the goal of eventually shipping with releases? There are a bunch of tools that can translate C++ headers, but they have downsides due to the name mangling.</description></item><item><title>Signet/Testnet4</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/signet-testnet4/</link><pubDate>Wed, 10 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/signet-testnet4/</guid><description>Signet Reset is less of a priority right now because the faucet is running again, still seeing huge number of requests Should still reset because of money making from signet coins Participants agree that getting coins doesn’t seem to be that hard, just need to ask on IRC or so Some people get repetitive messages about coins Signet can be reorged easily with a more work chain, that is actually shorter.</description></item><item><title>P2P Monitoring</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/p2p-monitoring/</link><pubDate>Tue, 09 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/p2p-monitoring/</guid><description>Slides
Started working on this about 2 years ago; in 2021. After we accidentally observed the address flooding anomaly/attack Primarily uses https://github.com/0xB10C/peer-observer to extract data from Bitcoin Core nodes with tracepoints. The infrastructure also includes a fork-observer connected to each node as well as an addrman-observer for each node. Additionally, detailed Bitcoin Core debug logs are avaliable. The main part are the Grafana dashboards. There’s a public version at public.peer.observer, which is redacted to not leak honeynode IP addresses.</description></item><item><title>Silent Payment Descriptors</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/silent-payment-descriptors/</link><pubDate>Tue, 09 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/silent-payment-descriptors/</guid><description>Silent payments properties:
two ECDH with each scan key cost of scanning increases with number of scan keys multiple address = tweak spend key with label We wouldn’t wanna flip that because then the spend key would be common, reducing anonymity and adding extra scanning work
BIP352 recommends NOT using with xpubs, it’s really difficult to have same public key with different chain codes.
Use case question: with silent payments, let&amp;rsquo;s say I make a legacy wallet and want to use one of my existing pubkeys and just combine it with a scan key, is that something that someone could make up.</description></item><item><title>Coin Selection</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/coin-selection/</link><pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/coin-selection/</guid><description>Todo: Overview PR that states goal of replacing Knapsack Introduce Sand Compactor Demonstrate via Simulations that situation is improved vs Knapsack Potential privacy leak: all algorithms would be deterministic, but feels insignificant or at least would not make it worse Should we clear out negative effective value UTXOs? Users seem to indicate that they would prefer to empty wallets completely even if they pay more General agreement that we should continue to spend negative effective value UTXOs SRD and SandCompactor will allow spending them, maybe below discardfeerate, maybe below 5 s/vB, maybe even below 10 s/vB Fallback mechanisms if no other solution found There is a gap between changeless solutions and minChange No don’t fall back to Lowest Larger CoinGrinder Pick whole wallet Should we fall back to CoinGrinder when fees are large compared to recipient amount?</description></item><item><title>Cross Input Signature Aggregation</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/cross-input-signature-aggregation/</link><pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/cross-input-signature-aggregation/</guid><description>cisaresearch.org, put together by fjahr Documents progress of half and full agg (theory, implementation and deployment) Provides collection of CISA-related resources (ML posts, papers, videos/podcasts, etc.) Should provide guidance for further development/open todos for contributors to grab HRF announces CISA Research Fellowship Seeks to answer questions how CISA will affect privacy, cost-savings, and much more during a four-month period for a total of .5BTC More: https://nostr.com/note1h4fdw5ttqmjwf3eqr0s5lqzjhdvwcayl0hrfnv726cw4eeag6phs9xszpw Will coordinate with them to align cisaresearch.</description></item><item><title>Great Consensus Cleanup</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/great-consensus-cleanup/</link><pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/great-consensus-cleanup/</guid><description>How bad are the bugs?
How good are the mitigations?
Improvements to mitigations in the last 5 years?
Anything else to fix?
The talk is a summary of https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710 .
Time warp What is it? Off by one in the retargeting period 2015 blocks instead of 2016 Impact Spam (since difficulty is 1 and block times are what restricts tx) UXTO set growth for the same reason 40 days to kill the chain Empowers 51% attacker Political games (users individually incentivized short-term to benefit from more block space, miners individually incentivized short-term to benefit of more subsidy) Minority miners not incentivized to try but it doesn’t cost anything Original mitigation is good Mandating new restrictions on the timestamp of the first block of a retarget period in relation to last blocks timestamp Merkle tree attacks w/64 byte txs Fake SPV inclusion &amp;lt;visual merkle tree diagram illustrating issue&amp;gt; Years ago the attack required more work than proof of work, so was less of a concern, not so now Arbitrary confs, less work Simple mitigation Require the coinbase transaction too, as all transactions on the same level of the merkle tree Block malleability Separate but similar attack Fork nodes Simple mitigation Dont cache context-less checks BIP’s original Mitigation Forbid &amp;lt;=64 byte transactions No need to disable &amp;lt;64 bytes transactions, since 64 is the issue Concern about existing, unbroadcasted 64 byte transaction?</description></item><item><title>Private tx broadcast</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/private-tx-broadcast/</link><pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/private-tx-broadcast/</guid><description>Updates:
TX is validated before broadcast (using mempool test). The sender ignores incoming messages from the receiver (except the handshake and PONG), so the sender cannot send back the tx before disconnection. When it receives the tx back, it becomes &amp;ldquo;just a tx in mempool&amp;rdquo;. TODO/NICE TO HAVE
Check if the wallet is going to rebroadcast a tx it has created but has been broadcast via private broadcast and if yes, prevent that.</description></item><item><title>Silent Payments Libsecp Module</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/silent-payments-libsecp/</link><pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/silent-payments-libsecp/</guid><description>High level vs low level API:
Low level API could be more useful for multi-party SP implementation High level API is safer as it avoid managing SP state and staging secret data Rough consensus that high level API is preferable Responsibility of grouping and sorting recipients by scan key. Client vs library?
We need to assert grouping in the lib anyway to avoid catastrophic failure So it just makes sense for the lib to take care of the grouping Why we need grouping in the first place?</description></item><item><title>Stratum v2</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/stratumv2/</link><pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/stratumv2/</guid><description>I explained the various stratum v2 roles described in the images here: https://stratumprotocol.org
Described the three layers of my main PR: https://github.com/bitcoin/bitcoin/pull/29432
Noise protocol Transport based on the TransportV1 / TransportV2 class Application layer (listens on new port, sv2 apps connect to it) Discussion point: the Job Declarator client role typically runs on the same machine as the template provider, so technically we don’t need noise encryption. However, we may in the future want to “take over” some of the Job Declarator client work, at which point we would need it.</description></item><item><title>Weak Blocks</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/weak-blocks/</link><pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2024-04/weak-blocks/</guid><description>Weak blocks: propagate stuff with low PoW as you are building it
use cases / why you wouldn’t hear of stuff nonstandard to you somehow didn’t propagate to you miner’s prioritisetransaction stuff with no fees why is this coming up now? more mempool heterogeneity “accelerate nonstandard transactions” services poc code: submits to mempool, rejected ones are stored in separate cache Questions
why would a miner do this? (similar to compact blocks?</description></item></channel></rss>