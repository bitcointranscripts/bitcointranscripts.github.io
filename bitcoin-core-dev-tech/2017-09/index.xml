<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bitcoin Core Dev Tech 2017 on ₿itcoin Transcripts</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2017-09/</link><description>Recent content in Bitcoin Core Dev Tech 2017 on ₿itcoin Transcripts</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 07 Sep 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://btctranscripts.com/bitcoin-core-dev-tech/2017-09/index.xml" rel="self" type="application/rss+xml"/><item><title>Merkleized Abstract Syntax Trees</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2017-09/2017-09-07-merkleized-abstract-syntax-trees/</link><pubDate>Thu, 07 Sep 2017 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2017-09/2017-09-07-merkleized-abstract-syntax-trees/</guid><description>https://twitter.com/kanzure/status/907075529534328832
https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-September/014932.html
I am going to talk about the scheme I posted to the mailing list yesterday which is to implement MAST (merkleized abstract syntax trees) in bitcoin in a minimally invasive way as possible. It&amp;rsquo;s broken into two major consensus features that together gives us MAST. I&amp;rsquo;ll start with the last BIP.
This is tail-call evaluation. Can we generalize P2SH to give us more general capabilities, than just a single redeem script.</description></item><item><title>Signature Aggregation</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2017-09/2017-09-06-signature-aggregation/</link><pubDate>Wed, 06 Sep 2017 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2017-09/2017-09-06-signature-aggregation/</guid><description>https://twitter.com/kanzure/status/907065194463072258
Sipa, can you sign and verify ECDSA signatures by hand? No. Over GF(43), maybe. Inverses could take a little bit to compute. Over GF(2).
I think the first thing we should talk about is some definitions. I&amp;rsquo;d like to start by distinguishing between three things: Key aggregation, signature aggregation, and batch validation. Multi-signature later.
There are three different problems. Key aggregation is where there are a number of people with each their own key, they want to produce a combined key that can only sign when they come together.</description></item><item><title>Meeting Notes</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2017-09/2017-09-05-meeting-notes/</link><pubDate>Tue, 05 Sep 2017 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2017-09/2017-09-05-meeting-notes/</guid><description>coredev.tech september 2017
https://twitter.com/kanzure/status/907233490919464960
((As always, any errors are most likely my own. etc.))
Introduction There is significant concern regarding whether BlueMatt has become a misnomer.
Monday night presentation: https://btctranscripts.com/sf-bitcoin-meetup/2017-09-04-jonas-schnelli-bip150-bip151/
I think we should continue to use #bitcoin-core-dev for anything about changing Bitcoin Core and try to keep things open even though we&amp;rsquo;re together here today and tomorrow and the next.
Wallets and block pruning and rescans Nobody produces P2SH change when they have a native output.</description></item></channel></rss>