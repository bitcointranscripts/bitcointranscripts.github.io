<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bitcoin Core Dev Tech 2023 (Apr) on ₿itcoin Transcripts</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/</link><description>Recent content in Bitcoin Core Dev Tech 2023 (Apr) on ₿itcoin Transcripts</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 27 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/index.xml" rel="self" type="application/rss+xml"/><item><title>AssumeUTXO update</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-27-assumeutxo/</link><pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-27-assumeutxo/</guid><description>Goals allow nodes to get a utxo set quickly (1h) at the same time, no major security concessions Approach Provide serialized utxo snapshot get headers chain first, load snapshot and deserialize, sync to tip from that then start background verification with a 2nd snapshot finally, compare hashes when background IBD hits snapshot base Progress update lots of refactoring has been done; ChainStateManager was introduced, globals removed, mempool / blockstorage refactored init / shutdown logic changes have been merged wallet changes done p2p changes still under review (i.</description></item><item><title>Fuzzing</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-27-fuzzing/</link><pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-27-fuzzing/</guid><description>Slides: https://docs.google.com/presentation/d/1NlTw_n60z9bvqziZqU3H3Jw7Xs5slnQoehYXhEKrzOE
Fuzzing Fuzzing is done continuously. Fuzz targets can pay off even years later by finding newly introduced bugs. Example in slide about libFuzzer fuzzing a parse_json function which might crash on some weird input but won’t report invalid json inputs that pass parsing. libFuzzer does coverage guided feedback loop + helps with exploring control flow. Bug Oracles Assertions - Adding assertions is tricky for network code. We add Assume() when continuing is not worse than crashing.</description></item><item><title>Libbitcoin kernel</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-26-libbitcoin-kernel/</link><pubDate>Wed, 26 Apr 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-26-libbitcoin-kernel/</guid><description>Questions and Answers Q: bitcoind and bitcoin-qt linked against kernel the libary in the future?
presenter: yes, that is a / the goal Q: Have you looked at an electrum implementation using libbitcoinkernel?
audience: yes, would be good to have something like this! audience: Also could do the long proposed address index with that? audience: not only address index, other indexes too. Q: Other use-cases:
audience: be able to run stuff on iOS Q: Should the mempool be in the kernel?</description></item><item><title>Project Meta Discussion</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-26-meta-discussion/</link><pubDate>Wed, 26 Apr 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-26-meta-discussion/</guid><description>Part 1 What makes bitcoin core fun Intellectual challenge/problems Interesting, diverse, open source project collaborators Meaningful project goals Culturally the project is a meritocracy Scientific domain intersecting with real world problems Real world usage What makes bitcoin core not fun Long delivery cycles -&amp;gt; lack of shippers high Soft fork activation Antagonism (internal and external) Ambiguity of feature/code contribution usage Relationships Financial stability Unclear goals Part 2 Fitting rocks, pebbles, and sand in a jar analogy Time based releases vs feature based releases?</description></item><item><title>ASMap</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-27-asmap/</link><pubDate>Tue, 25 Apr 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-27-asmap/</guid><description>Should we ship it every Core release? The initial idea is shipping a map file every Core release. Fabian wrote an article about how would be integrated into the deployment (https://gist.github.com/fjahr/f879769228f4f1c49b49d348f80d7635). Some devs pointed out an option would be to have it separated to the release process, any regular contributor could update it whenever they like (who would do it? frequency?). Then when the release comes around one of the recent ones will be chosen.</description></item><item><title>Mempool Clustering</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-25-mempool-clustering/</link><pubDate>Tue, 25 Apr 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-25-mempool-clustering/</guid><description>Current Problems lot of problems in the mempool
eviction is broken mining algorithm is part of the problem, it’s not perfect RBF is like totally broken we complain all the time, sometimes we do/don&amp;rsquo;t RBF when we should/shouldn&amp;rsquo;t Eviction Eviction is when mempool is full, and we want to throw away the worst tx. Example, we think a tx is worst in mempool but it’s a descendant of a &amp;ldquo;good&amp;rdquo; tx.</description></item><item><title>Package Relay Primer</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-25-package-relay-primer/</link><pubDate>Tue, 25 Apr 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-25-package-relay-primer/</guid><description>Slides: https://docs.google.com/presentation/d/12YPlmmaCiNNL83b3FDmYwa7FKHP7yD0krzkEzM-tkTM
Problems CPFP Doesn’t Work When Mempool Min Feerate Rises Bad for users who want to use CPFP and L2s, but also a glaring limitation in our ability to assess transaction incentive compatibility
Pinning being able to feebump transaction is a pinning concern counterpart can intentionally censor your transactions, and in L2 that can mean stealing your money because you didn’t meet the timelock Pinning examples ANYONECANPAY -&amp;gt; anyonecanpin: add input that comes from huge unconfirmed low-fee rate tx -&amp;gt; absolute feerate needs to increase, so you&amp;rsquo;re paying more fees for the tx to confirm slower shared descendant limit can be monopolized descendant limit is 25 txs, so someone else can fill up that limit we have a carve-out for CPFP already to try and mitigate that RBF Rule 3 is gameable replacement fees must &amp;gt; all descendants, and they may be large, low feerate -&amp;gt; expensive most L2s have pinning problems, so we need to fix that Get rid of txid-based relay we want to avoid txid based relay can&amp;rsquo;t deduplicate txid and wtxid that correspond to the same tx can&amp;rsquo;t deduplicate txs that only differ in witness we still require txid-based relay for orphans, because txs specify prevouts by txid -&amp;gt; so we don&amp;rsquo;t know which wtxid to request Definitions pinning attack: a censorship attack on relay/mempool level, abusing policy</description></item><item><title>Refactors</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-25-refactors/</link><pubDate>Tue, 25 Apr 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-25-refactors/</guid><description>One take-away from the Chaincode residency in 2019 was: Don’t do refactors (unless you really need it)
A marked increase from 2019 to today (Chart on the increase of refactors)
The comments and PRs are steady but the refactors are increasing
Quibble about how regular reviewers are counted (should be higher than 5 comments)
Project reasons:
Ossification? Natural way mature projects progress/Boy Scout Rule Personal reasons:
Time commitment of large review may not be possible (extended period of singular focus) Merged PRs as proof of work, could help with the next grant Feels good to ship What is the effect?</description></item><item><title>Silent Payments</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-26-silent-payments/</link><pubDate>Tue, 25 Apr 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-26-silent-payments/</guid><description>BIP Overview Scanning key and spending key are different: better security. Silent payment transactions are indistinguishable from transactions with taproot outputs on-chain.
Q: Address labeling, why not create two silent payment addresses?
A: It doubles scanning costs.
Limited to taproot UTXOs (currently about 3% of transactions) but when it increases we should find ways to optimize scanning, even though it currently does not seem to be an issue.
Q: Why no P2PK</description></item></channel></rss>