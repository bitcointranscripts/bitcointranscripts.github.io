<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bitcoin Core Dev Tech 2023 (Sept) on ₿itcoin Transcripts</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/</link><description>Recent content in Bitcoin Core Dev Tech 2023 (Sept) on ₿itcoin Transcripts</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 21 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/index.xml" rel="self" type="application/rss+xml"/><item><title>CMake Update</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/cmake/</link><pubDate>Thu, 21 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/cmake/</guid><description>Update Hebasto has a branch he has been PRing into his own repo. Opened a huge CMake PR for Bitcoin core.
Introducing it chunk by chunk on his own repo
QT and GUIX is after that
Next steps How to get this into Core?
We don’t have something clean. Still have something wonky and how and what to do with autotools.
Ideally introduce CMake for a full cycle. It might still be a little too rough to ship on day 1 of the v27 cycle.</description></item><item><title>Remove the legacy wallet and updating descriptors</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/wallet-legacy-upgrade/</link><pubDate>Thu, 21 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/wallet-legacy-upgrade/</guid><description>Wallet migration + legacy wallet removal The long-term goal targeted for v29 is to delete BDB and drop the legacy wallet. The migration PR for the GUI was just merged recently, so that will be possible for the next release v26. The &amp;ldquo;Drop migratewallet experimental warning&amp;rdquo; PR (#28037) should also go in before v26. Migrating without BDB should be possible for v27 (PRs &amp;ldquo;Independent BDB&amp;rdquo; #26606 and &amp;ldquo;Migrate without BDB&amp;rdquo; #26596).</description></item><item><title>Signature Aggregation Update</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/signature-aggregation/</link><pubDate>Thu, 21 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/signature-aggregation/</guid><description>The status of the Half-Agg BIP? TODOs but also no use cases upcoming so adding it to the BIP repo doesn&amp;rsquo;t seem useful
BIP Half-agg TODOs for BIP
Consider setting z_0 = 1
Reconsider maximum number of signatures
Add failing verification test vectors that exercise edge cases.
Add signing test vectors (passing and failing, including edge cases)
Test latest version of hacspec (run through checker)
Half-agg BIP has a max number of signatures (2^16), making testing easy</description></item><item><title>AssumeUTXO Update</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/assumeutxo-update/</link><pubDate>Wed, 20 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/assumeutxo-update/</guid><description>One remaining PR
#27596 Adds loadtxoutset and getchainstate RPC, documentation, scripts, tests Adds critical functionality needed for assumeutxo validation to work: net processing updates, validation interface updates, verifydb bugfix, cache rebalancing Makes other improvements so pruning, indexing, -reindex features are compatible with assumeutxo and work nicely Adds hardcoded assumeutxo hash at height 788,000 Probably this should be moved to separate PR? Questions about initial next steps (unanswered):
Which release is this PR targeted for?</description></item><item><title>Kernel Planning</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/kernel-planning/</link><pubDate>Wed, 20 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/kernel-planning/</guid><description>Undecided on where to take this next
Carl purposely didn&amp;rsquo;t plan beyond what we have
Options: Look for who the users currently are of kernel code and polish those interfaces. We&amp;rsquo;ll end up with a bunch of trade-offs. And I don&amp;rsquo;t see us piecemeal extracting something that is useable to core and someone on the outside.
The GUI much high level to be on this list. The GUI uses a node interface, it doesn&amp;rsquo;t call an validation right now.</description></item><item><title>Libsecp256k1 Meeting</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/libsecp256k1-meeting/</link><pubDate>Wed, 20 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/libsecp256k1-meeting/</guid><description>Topics: Scope, Priorities Next release Dec 16th Scope: Informal agreeement currently What new modules to add? Needs a specification (whatever that means, Pseudocode etc.0 Should we formalize the agreement more? Should also not be too specific What are examples where this came up in the past? Exfill, Ecdh, Elswift, SIlent payments, musig, schnorr, adaptor sigs, half-agg How specific do we need to be? Tie it to examples to be more clear ECIES (Interesting in the future?</description></item><item><title>P2P Design Goals</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/p2p-design-goals/</link><pubDate>Wed, 20 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/p2p-design-goals/</guid><description>Guiding Questions What are we trying to achieve?
What are we trying to prevent?
How so we weight performance over privacy?
What is our tolerance level for net attacks?
Are we trying to add stuff to the network or are we trying to prevent people getting information?
Network topology: By design we are trying to prevent the topology being known Information creation, addresses, txs or blocks
We want blocks at tips fast - consensus critical information needs to be as fast as possible - ability to get the information - forgetting that there are multiple networks - the purpose is to know what the current most work chain tip is Even the addr relay network - everything falls apart if you can’t get that information The crux of the p2p network is to propagate what is the most work Txs can take much much longer but don’t want to leak the source of the origin The privacy implications of Txs makes it difficult Could give up fast propagations for privacy for txs that would be fine but not for blocks.</description></item><item><title>Package Relay Planning</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/package-relay-planning/</link><pubDate>Wed, 20 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/package-relay-planning/</guid><description>Package Relay Planning What can we do better, keep doing?
This is all the work that needs to be done for package relay -&amp;gt; big chart
Left part is mempool validation stuff. It’s how we decide if we put transactions in the mempool after receiving them “somehow”.
Right is peer to peer stuff
Current master is accepting parents-and-child packages(every tx but last must be a parent of child), one by one, then all at the same time.</description></item><item><title>Privacy Metrics for Coin Selection</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/privacy-metrics/</link><pubDate>Wed, 20 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/privacy-metrics/</guid><description>Goal: Get privacy consciousness into coin selection Configurability Privacy vs cost (waste) Privacy: weighted on a 0-5 scale Cost: weighted on a 0-5 scale Convert privacy preference (0-5) into satoshis to make it compatible with the waste score Combined score = PrivacyScoreWeight x PrivacyScore + CostWeight x WasteMetric 20-30 sats per privacy point as a gut feeling Privacy score example: sending to different script type than inputs of transaction We already match the change type to the recipient type, but that can still mean that we have differently typed inputs than outputs If we have two input sets, where one has the same type and the other has a different type, the one with the same type inputs should be preferred by the privacy metric Privacy score example: Preferring spending UTXOs of similar age E.</description></item><item><title>Discussion on open Coin Selection matters</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/wallet-coin-selection/</link><pubDate>Tue, 19 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/wallet-coin-selection/</guid><description>Topic: review of https://github.com/bitcoin/bitcoin/pull/27601 Problem statement: when doing manual RBF (without using bumpfee RPC) we treat previous change output as a receiver and thus create two outputs to the same address Proposal: combine amount on outputs to the same address What are valid use-cases for having the same address for change and output? Consolidation with payment Alternative: Use sendall with two outputs one with an amount and yours without an amount Payment and send at least X to yourself Consolidate with automatic coin selection of at least X Alternative: Implement &amp;ldquo;Send at least&amp;rdquo; as a separate and explicitly feature Consider just giving an error if change destination is the same with one of the outputs Should we do the enforcement only at RPC level?</description></item><item><title>P2P working session</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/p2p-working-session/</link><pubDate>Tue, 19 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/p2p-working-session/</guid><description>Erlay Gleb is active and ready to move forward - #21515 Are there people generally interested in review? I wanted first to convince myself that this is useful. I couldn&amp;rsquo;t reproduce the numbers from the paper - 5% was what I got with ~100 connections. My node is listening on a non-standard port. It may be that I don&amp;rsquo;t have a normal sample. There is a pull request that could add RPC stats to bitcoind - that might get better numbers.</description></item><item><title>Kernel Update</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/kernel-update/</link><pubDate>Mon, 18 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/kernel-update/</guid><description>Original roadmap decided by carl was:
Stage 1
Step 1 Introduce bitcoin-chainstate &amp;ldquo;kitchen sink&amp;rdquo; Step 2 (wrapped up ~2mon ago) remove non-valiation code
Step 3 (where we are rn) remove non-validation headers from bitcoin-chainstate
We have mostly implemented Step 4 integrate libbitcoinkernel as a static library
Have the implementation on personal repo Need to look into breaking up files or live with code organization not being super logical Stage 2 (we should talk about this now) improve libbitcoinkernel interface</description></item></channel></rss>