<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Duc V. Le on ₿itcoin Transcripts</title><link>https://btctranscripts.com/speakers/duc-v.-le/</link><description>Recent content in Duc V. Le on ₿itcoin Transcripts</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://btctranscripts.com/speakers/duc-v.-le/index.xml" rel="self" type="application/rss+xml"/><item><title>Scaling Oblivious Read Write</title><link>https://btctranscripts.com/scalingbitcoin/tel-aviv-2019/scaling-oblivious-read-write/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/scalingbitcoin/tel-aviv-2019/scaling-oblivious-read-write/</guid><description>A tale of two trees: One writes, and other reads, scaling oblivious accesses to large-scale blockchains
Introduction We are trying to get optimized oblivious accesses to large-scale blockchains. This is collaborative work with our colleagues.
Motivation As we all know, bitfcoin data has become too large to store in resource-constrained devices. It&amp;rsquo;s like 240 GB. The current solution today is bip37 + Nakamoto&amp;rsquo;s idea for simplified payment verification (SPV) clients which don&amp;rsquo;t run the bitcoin network rules.</description></item></channel></rss>