<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Benedikt Bünz on ₿itcoin Transcripts</title><link>https://btctranscripts.com/speakers/benedikt-b%C3%BCnz/</link><description>Recent content in Benedikt Bünz on ₿itcoin Transcripts</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 06 Oct 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://btctranscripts.com/speakers/benedikt-b%C3%BCnz/index.xml" rel="self" type="application/rss+xml"/><item><title>A Scalable Drop in Replacement for Merkle Trees</title><link>https://btctranscripts.com/scalingbitcoin/tokyo-2018/accumulators/</link><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/scalingbitcoin/tokyo-2018/accumulators/</guid><description>https://twitter.com/kanzure/status/1048454406755168257
Introduction Hello. Test. Okay. I am going to talk about accumulators for UTXOs. The previous two talks were a great setup for this. This is joint work with Ben Fisch who is also here today and Dan Boneh. I first want to advertise the Stanford Blockchain Conference (formerly known as BPASE) happening at the end of January 2019 at Stanford. Whether you give a talk or not, you should try to attend.</description></item><item><title>Accumulators for blockchains</title><link>https://btctranscripts.com/stanford-blockchain-conference/2019/accumulators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/stanford-blockchain-conference/2019/accumulators/</guid><description>https://twitter.com/kanzure/status/1090748293234094082
https://twitter.com/kanzure/status/1090741715059695617
https://diyhpl.us/wiki/transcripts/scalingbitcoin/tokyo-2018/accumulators/
paper: https://eprint.iacr.org/2018/1188
Introduction I am going to be talking about batching techniques for accumulators with applications to interactive oracle proofs and blockchains. I&amp;rsquo;ll maybe also talk about how to make these proofs even smaller. The main thing that we are going to focus on today is the bitcoin state and this application of accumulators to bitcoin and blockchain.
Bitcoin UTXO states The bitcoin state is the UTXO set.</description></item><item><title>Bulletproofs</title><link>https://btctranscripts.com/blockchain-protocol-analysis-security-engineering/2018/bulletproofs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/blockchain-protocol-analysis-security-engineering/2018/bulletproofs/</guid><description>https://twitter.com/kanzure/status/958881877896593410
http://web.stanford.edu/~buenz/pubs/bulletproofs.pdf
https://joinmarket.me/blog/blog/bulletpoints-on-bulletproofs/
https://crypto.stanford.edu/bulletproofs
Introduction Good morning everyone. I am Benedikt Bünz and I am going to talk about bulletproofs. This is joint work with myself, Jonathan Bootle, Dan Boneh, Andrew Poelstra, Pieter Wuille, and Greg Maxwell. Bulletproofs are short proofs that we designed originally with the goal of improving confidential transactions but I&amp;rsquo;ll talk about how they have many more applications and how they are short zero-knowledge proofs for arbitrary computations really.</description></item><item><title>Cryptography for Blockchains beyond ECDSA and sha256: Signatures and Zero-Knowledge Proofs</title><link>https://btctranscripts.com/scalingbitcoin/stanford-2017/state-of-cryptography/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/scalingbitcoin/stanford-2017/state-of-cryptography/</guid><description>Am going to talk about cryptography relevant to blockchains. I&amp;rsquo;ll talk about signatures and zero-knowledge proofs. It has a lot of applications to bitcoin. It turns out that bitcoin is pretty simple in terms of cryptography. It just uses a hash function (sha256) and,separately, ECDSA for signatures. I will be mentioning some other cryptography that bitcoin could use.
Let&amp;rsquo;s start with signatures. What do signatures do? If Bob wants to say, on every e-cash system, Bob says he is going to send 1 coin to Alice, but the problem is how does Alice know whether Bob said this or was this just from someone else or how does a third person verifyin miner check that actually Bob issued this transaction?</description></item><item><title>Flyclient: Super Light Client For Cryptocurrencies</title><link>https://btctranscripts.com/scalingbitcoin/stanford-2017/flyclient-super-light-clients-for-cryptocurrencies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/scalingbitcoin/stanford-2017/flyclient-super-light-clients-for-cryptocurrencies/</guid><description>As you know, the blockchain is a chain because each block connects to the previous block through these hashes. In the header of each block is a commitment to all the transactions. It&amp;rsquo;s using this merkle hash tree where at each level the parent node hashes to the children and this gives you some nice properties which I will talk about later. I need to check consistency though. The first thing I need to check is that the transactions don&amp;rsquo;t spend more than they have&amp;hellip; then I need to check that the tree was onstructed correctly.</description></item></channel></rss>