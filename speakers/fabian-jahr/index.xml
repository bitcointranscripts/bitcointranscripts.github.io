<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Fabian Jahr on ₿itcoin Transcripts</title><link>https://btctranscripts.com/speakers/fabian-jahr/</link><description>Recent content in Fabian Jahr on ₿itcoin Transcripts</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 07 Mar 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://btctranscripts.com/speakers/fabian-jahr/index.xml" rel="self" type="application/rss+xml"/><item><title>Newsletter #292 Recap</title><link>https://btctranscripts.com/bitcoinops/newsletter-292-recap/</link><pubDate>Thu, 07 Mar 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoinops/newsletter-292-recap/</guid><description>Mark Erhardt: 00:03:57
We are complete. Maybe we can start. So good morning. This is Optech Newsletter #292 Recap. And as you can hear, Mike is not here today and I&amp;rsquo;m filling in as the main host. Today we have four news items, two releases and release candidates, and four PRs to talk about in our notable code and documentation changes. I&amp;rsquo;m Merch and I work at Chaincode Labs and bring you weekly this OpTec newsletter recap.</description></item><item><title>ASMap</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-27-asmap/</link><pubDate>Tue, 25 Apr 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-27-asmap/</guid><description>Should we ship it every Core release? The initial idea is shipping a map file every Core release. Fabian wrote an article about how would be integrated into the deployment (https://gist.github.com/fjahr/f879769228f4f1c49b49d348f80d7635). Some devs pointed out an option would be to have it separated to the release process, any regular contributor could update it whenever they like (who would do it? frequency?). Then when the release comes around one of the recent ones will be chosen.</description></item><item><title>Refactors</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-25-refactors/</link><pubDate>Tue, 25 Apr 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-25-refactors/</guid><description>One take-away from the Chaincode residency in 2019 was: Don’t do refactors (unless you really need it)
A marked increase from 2019 to today (Chart on the increase of refactors)
The comments and PRs are steady but the refactors are increasing
Quibble about how regular reviewers are counted (should be higher than 5 comments)
Project reasons:
Ossification? Natural way mature projects progress/Boy Scout Rule Personal reasons:
Time commitment of large review may not be possible (extended period of singular focus) Merged PRs as proof of work, could help with the next grant Feels good to ship What is the effect?</description></item><item><title>Debugging Bitcoin Core Workshop</title><link>https://btctranscripts.com/advancing-bitcoin/2020/2020-02-07-fabian-jahr-debugging-workshop/</link><pubDate>Fri, 07 Feb 2020 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/advancing-bitcoin/2020/2020-02-07-fabian-jahr-debugging-workshop/</guid><description>Video: No video was posted online
Fabian presentation at Bitcoin Edge Dev++ 2019: https://diyhpl.us/wiki/transcripts/scalingbitcoin/tel-aviv-2019/edgedevplusplus/debugging-bitcoin/
Debugging Bitcoin Core doc: https://github.com/fjahr/debugging_bitcoin
Debugging Bitcoin Core Workshop: https://gist.github.com/fjahr/5bf65daaf9ff189a0993196195005386
Introduction First of all welcome to the debugging Bitcoin Core workshop. Everything I know more or less about using a debugger to learn from Bitcoin Core and to fix problems in Bitcoin Core. I didn’t go with traditional slides because I want to teach you how to use this tool, the debugger, in the context of Bitcoin Core.</description></item><item><title>Bitcoin Core Functional Test Framework</title><link>https://btctranscripts.com/edgedevplusplus/2019/bitcoin-core-functional-test-framework/</link><pubDate>Tue, 10 Sep 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/edgedevplusplus/2019/bitcoin-core-functional-test-framework/</guid><description>Slides: https://telaviv2019.bitcoinedge.org/files/test-framework-in-bitcoin-core.pdf
Transcript completed by: Bryan Bishop Edited by: Michael Folkson
https://twitter.com/kanzure/status/1171357556519952385
Introduction I am pretty sure you can tell but I am not James (Chiang). I am taking over the functional testing framework talk from James. He has already given several great talks. I took over this talk at very short notice from James. I’d like to give a hands on talk.
Content This is a brief introduction into the functional testing framework.</description></item><item><title>Debugging Bitcoin</title><link>https://btctranscripts.com/edgedevplusplus/2019/debugging-bitcoin/</link><pubDate>Tue, 10 Sep 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/edgedevplusplus/2019/debugging-bitcoin/</guid><description>Slides: https://telaviv2019.bitcoinedge.org/files/debugging-tools-for-bitcoin-core.pdf
Debugging Bitcoin Core: https://github.com/fjahr/debugging_bitcoin
Transcript completed by: Bryan Bishop Edited by: Michael Folkson
https://twitter.com/kanzure/status/1171024515490562048
Introduction I am going to talk about debugging Bitcoin. Of course if you want to contribute to Bitcoin there are a lot of conceptual things that you have to understand in order to do that. Most of the talks here today and tomorrow are about that. But actually writing code or fixing stuff, you will also have to learn some things on a practical level.</description></item><item><title>Debugging Bitcoin Core</title><link>https://btctranscripts.com/chaincode-labs/chaincode-residency/2019-08-22-fabian-jahr-debugging/</link><pubDate>Thu, 22 Aug 2019 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/chaincode-labs/chaincode-residency/2019-08-22-fabian-jahr-debugging/</guid><description>Slides: https://residency.chaincode.com/presentations/Debugging_Bitcoin.pdf
Repo: https://gist.github.com/fjahr/2cd23ad743a2ddfd4eed957274beca0f
https://twitter.com/kanzure/status/1165266077615632390
Introduction I’m talking about debugging Bitcoin and that means to me using loggers and debugging tools to work with Bitcoin and this is especially useful for somebody who is a beginner with Bitcoin development. Or even a beginner for C++ which I considered myself a couple of weeks ago actually. I’m going to tell the story of a fictional beginner to Bitcoin development. This disclaimer, while you may think you recognize some names just assume everything is made up because I made it all up.</description></item></channel></rss>