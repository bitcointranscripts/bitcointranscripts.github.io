<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>thecharlatan on ₿itcoin Transcripts</title><link>https://btctranscripts.com/speakers/thecharlatan/</link><description>Recent content in thecharlatan on ₿itcoin Transcripts</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 20 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://btctranscripts.com/speakers/thecharlatan/index.xml" rel="self" type="application/rss+xml"/><item><title>Kernel Planning</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/kernel-planning/</link><pubDate>Wed, 20 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/kernel-planning/</guid><description>Undecided on where to take this next
Carl purposely didn&amp;rsquo;t plan beyond what we have
Options: Look for who the users currently are of kernel code and polish those interfaces. We&amp;rsquo;ll end up with a bunch of trade-offs. And I don&amp;rsquo;t see us piecemeal extracting something that is useable to core and someone on the outside.
The GUI much high level to be on this list. The GUI uses a node interface, it doesn&amp;rsquo;t call an validation right now.</description></item><item><title>Kernel Update</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/kernel-update/</link><pubDate>Mon, 18 Sep 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-09/kernel-update/</guid><description>Original roadmap decided by carl was:
Stage 1
Step 1 Introduce bitcoin-chainstate &amp;ldquo;kitchen sink&amp;rdquo; Step 2 (wrapped up ~2mon ago) remove non-valiation code
Step 3 (where we are rn) remove non-validation headers from bitcoin-chainstate
We have mostly implemented Step 4 integrate libbitcoinkernel as a static library
Have the implementation on personal repo Need to look into breaking up files or live with code organization not being super logical Stage 2 (we should talk about this now) improve libbitcoinkernel interface</description></item><item><title>Libbitcoin kernel</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-26-libbitcoin-kernel/</link><pubDate>Wed, 26 Apr 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-26-libbitcoin-kernel/</guid><description>Questions and Answers Q: bitcoind and bitcoin-qt linked against kernel the libary in the future?
presenter: yes, that is a / the goal Q: Have you looked at an electrum implementation using libbitcoinkernel?
audience: yes, would be good to have something like this! audience: Also could do the long proposed address index with that? audience: not only address index, other indexes too. Q: Other use-cases:
audience: be able to run stuff on iOS Q: Should the mempool be in the kernel?</description></item></channel></rss>