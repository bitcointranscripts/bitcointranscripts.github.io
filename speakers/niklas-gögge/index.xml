<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Niklas Gögge on ₿itcoin Transcripts</title><link>https://btctranscripts.com/speakers/niklas-g%C3%B6gge/</link><description>Recent content in Niklas Gögge on ₿itcoin Transcripts</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 31 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://btctranscripts.com/speakers/niklas-g%C3%B6gge/index.xml" rel="self" type="application/rss+xml"/><item><title>Discussing 0.21.0 Bitcoin Core Vulnerability Disclosures</title><link>https://btctranscripts.com/brink/the-bitcoin-development-podcast/discussing-0-21-0-bitcoin-core-vulnerability-disclosures/</link><pubDate>Wed, 31 Jul 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/brink/the-bitcoin-development-podcast/discussing-0-21-0-bitcoin-core-vulnerability-disclosures/</guid><description>Brink engineers Gloria Zhao and Niklas Gögge talk through the recently disclosed Bitcoin Core 0.21.0 vulnerabilities.</description></item><item><title>Discussing Pre-0.21.0 Bitcoin Core Vulnerability Disclosures</title><link>https://btctranscripts.com/brink/the-bitcoin-development-podcast/discussing-pre-0-21-0-bitcoin-core-vulnerability-disclosures/</link><pubDate>Thu, 11 Jul 2024 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/brink/the-bitcoin-development-podcast/discussing-pre-0-21-0-bitcoin-core-vulnerability-disclosures/</guid><description>Brink engineers Gloria Zhao and Niklas Gögge talk through the recently disclosed Bitcoin Core pre-0.21.0 vulnerabilities.</description></item><item><title>Fuzzing</title><link>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-27-fuzzing/</link><pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/bitcoin-core-dev-tech/2023-04/2023-04-27-fuzzing/</guid><description>Slides: https://docs.google.com/presentation/d/1NlTw_n60z9bvqziZqU3H3Jw7Xs5slnQoehYXhEKrzOE
Fuzzing Fuzzing is done continuously. Fuzz targets can pay off even years later by finding newly introduced bugs. Example in slide about libFuzzer fuzzing a parse_json function which might crash on some weird input but won’t report invalid json inputs that pass parsing. libFuzzer does coverage guided feedback loop + helps with exploring control flow. Bug Oracles Assertions - Adding assertions is tricky for network code. We add Assume() when continuing is not worse than crashing.</description></item></channel></rss>