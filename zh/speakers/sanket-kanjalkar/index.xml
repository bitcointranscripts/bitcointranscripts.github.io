<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Sanket Kanjalkar on ₿itcoin 记录稿</title><link>https://btctranscripts.com/zh/speakers/sanket-kanjalkar/</link><description>Recent content in Sanket Kanjalkar on ₿itcoin 记录稿</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Thu, 03 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://btctranscripts.com/zh/speakers/sanket-kanjalkar/index.xml" rel="self" type="application/rss+xml"/><item><title>Miniscript</title><link>https://btctranscripts.com/zh/advancing-bitcoin/2022/2022-03-03-sanket-kanjalkar-miniscript/</link><pubDate>Thu, 03 Mar 2022 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/zh/advancing-bitcoin/2022/2022-03-03-sanket-kanjalkar-miniscript/</guid><description>题目：Miniscript：可组合、可分析、更智能的比特币脚本
Andrew Poelstra 论 Miniscript：https://btctranscripts.com/london-bitcoin-devs/2020-02-04-andrew-poelstra-miniscript/
开场（Jeff Gallas） 下一个演讲者是 Sanket。他在 Blockstream 工作，主要开发 Simplicity 和 Miniscript。Miniscript 也是他今天演讲的主题。欢迎 Sanket ！
引言（Sanket Kanjalkar） 各位早上好！今天我想聊聊 Miniscript，这是 Pieter Wuille、Andrew Poelstra 和我的一项工作，也汇集了来自许多比特币人的想法。从 2019 年夏天以来，它一直在变化。但现在，它已经到了一个非常稳定的状态，可以分享出来、让更多人部署了。我的演讲题目是：“Miniscript：可组合、可分析、更智能的比特币脚本”。这是一个简单的背景介绍，如果你对哪一些内容有兴趣，欢迎在演讲结束后联系我，我们可以聊聊。
比特币 Script 当前的问题 为了介绍开发 Miniscript 的动机，我要先讲讲当前的比特币 Script 语言的问题。从非常抽象的层面来说，在中本聪设计比特币时，“不，我不要给某一个人支付，我要给这个人可以使用的一个基于脚本的程序支付” 的想法可谓石破天惊。
（译者注：“脚本（script）” 和 “Script” 两者时常混用，但仔细区分的话，前者指的是比特币 UTXO 的一个部分，用于为 UTXO 设置花费条件；而 Script 指的是一种特定的编写的脚本的方式 —— 直接使用实际需要执行的指令来编写脚本。）
今天的比特币 Script 给大家一个关于脚本的概念，脚本就是一些可以执行的指令（可以运行的程序），由网络中的所有参与者各自运行、检查某一笔交易是不是有效的。但从原理上说，其设计有一些问题。首先，它很难分析。我知道我们很多的比特币人都正确地宣传了其表达能力有限的事实，但就是这样有限的表达能力，我们也不知道如何分析脚本。除非我们部署像 Miniscript 这样的东西（这是一种更为通用、可组合的框架），不然比特币就还是给某个人支付而已。它很难用，而且几乎所有的工具都难用 —— 从 xpub 钱包到多签名。当我们说多签名的时候，我们还要跟一个复杂的词语联系起来，真遗憾。概念上来说，它其实不那么复杂。而且，在 Miniscript 中你拥有所有的定制化工具。比如你要使用 3-of-5 多签名，你想改变其中的某一些东西，那么你需要一个比特币专家来帮你分析你的改动。这是一个来自 BOLT 3（闪电网络 HTLC 规范之一）的例子。
OP_IF # 用于惩罚交易 &amp;lt;revocationpubkey&amp;gt; OP_ELSE `to_self_delay` # 自主决定的时间锁长度 OP_CHECKSEQUENCEVERIFY OP_DROP &amp;lt;local_delayedpubkey&amp;gt; OP_ENDIF OP_CHECKSIG 我们后面会讲解这个例子，这是一份原样复制的脚本，你很难看出来它想干什么。专家可以看懂这段脚本想干什么，但分辨起来并不容易。</description></item></channel></rss>