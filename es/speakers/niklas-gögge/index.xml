<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Niklas Gögge on Transcripciones de ₿itcoin</title><link>https://btctranscripts.com/es/speakers/niklas-g%C3%B6gge/</link><description>Recent content in Niklas Gögge on Transcripciones de ₿itcoin</description><generator>Hugo -- gohugo.io</generator><language>es</language><lastBuildDate>Thu, 27 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://btctranscripts.com/es/speakers/niklas-g%C3%B6gge/index.xml" rel="self" type="application/rss+xml"/><item><title>Fuzzing</title><link>https://btctranscripts.com/es/bitcoin-core-dev-tech/2023-04/2023-04-27-fuzzing/</link><pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/es/bitcoin-core-dev-tech/2023-04/2023-04-27-fuzzing/</guid><description>Slides: https://docs.google.com/presentation/d/1NlTw_n60z9bvqziZqU3H3Jw7Xs5slnQoehYXhEKrzOE
Fuzzing El fuzzing se realiza de forma continua. Los objetivos del fuzzing pueden dar sus frutos incluso años más tarde encontrando nuevos bugs. Ejemplo en la diapositiva sobre libFuzzer fuzzing una función parse_json que podría bloquearse en alguna entrada extraña, pero no informará de entradas json no válidas que pasan el análisis. libFuzzer hace la cobertura de bucle de retroalimentación guiada + ayuda con la exploración del flujo de control.</description></item></channel></rss>