<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>core-dev-tech on Transcripciones de ₿itcoin</title><link>https://btctranscripts.com/es/categories/core-dev-tech/</link><description>Recent content in core-dev-tech on Transcripciones de ₿itcoin</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://btctranscripts.com/es/categories/core-dev-tech/index.xml" rel="self" type="application/rss+xml"/><item><title>Agregación de firmas (2017-09-06)</title><link>https://btctranscripts.com/es/bitcoin-core-dev-tech/2017-09-06-signature-aggregation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/es/bitcoin-core-dev-tech/2017-09-06-signature-aggregation/</guid><description>﻿https://twitter.com/kanzure/status/907065194463072258
Agregación de firmas Sipa, ¿puedes firmar y verificar firmas ECDSA a mano? No. Sobre GF(43), tal vez. Los inversos podrían tomar un poco de tiempo para computar. Sobre GF(2).
Creo que lo primero de lo que deberíamos hablar es de algunas definiciones. Me gustaría empezar distinguiendo entre tres cosas: Agregación de claves, agregación de firmas y validación de lotes. Más adelante, la multifirma.
Hay tres problemas diferentes. La agregación de claves es cuando hay un número de personas con su propia clave, que quieren producir una clave combinada que sólo puede firmar cuando se reúnen.</description></item><item><title>Árboles de sintaxis abstracta merkleizados - MAST (2018-03-06)</title><link>https://btctranscripts.com/es/bitcoin-core-dev-tech/2018-03-06-merkleized-abstract-syntax-trees-mast/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/es/bitcoin-core-dev-tech/2018-03-06-merkleized-abstract-syntax-trees-mast/</guid><description>https://twitter.com/kanzure/status/972120890279432192
Ver también http://diyhpl.us/wiki/transcripts/bitcoin-core-dev-tech/2017-09-07-merkleized-abstract-syntax-trees/
Cosas de MAST Podrías merkleizar directamente los scripts si cambias de IF, IFNOT, ELSE con IFJUMP que tiene el número de bytes.
Con graftroot y taproot, nunca para hacer cualquier scripts (que eran un hack para empezar las cosas). Pero estamos haciendo la validación y el cálculo.
Tomas todos los caminos que tiene; así que en lugar de eso, se convierte en &amp;hellip; cierta condición, o ciertas no condiciones&amp;hellip; Tomas todos los posibles ifs, usas esto, dices que es uno de estos, luego especificas cuál, y lo muestras y todos los demás pueden validar esto.</description></item><item><title>Árboles de sintaxis abstracta merkleizados (2017-09-07)</title><link>https://btctranscripts.com/es/bitcoin-core-dev-tech/2017-09-07-merkleized-abstract-syntax-trees/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/es/bitcoin-core-dev-tech/2017-09-07-merkleized-abstract-syntax-trees/</guid><description>﻿https://twitter.com/kanzure/status/907075529534328832
Árboles de sintaxis abstracta merkleizados (MAST) https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-September/014932.html
Voy a hablar del esquema que publiqué ayer en la lista de correo, que consiste en implementar MAST (árboles de sintaxis abstracta merkleizados) en bitcoin de la forma menos invasiva posible. Está dividido en dos grandes rasgos de consenso que juntos nos dan MAST. Empezaré con el último BIP.
Esto es la evaluación de la llamada de cola. Podemos generalizar P2SH para darnos capacidades más generales, que un solo script de redimensionamiento.</description></item><item><title>Bellare Neven (2018-03-05)</title><link>https://btctranscripts.com/es/bitcoin-core-dev-tech/2018-03-05-bellare-neven/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/es/bitcoin-core-dev-tech/2018-03-05-bellare-neven/</guid><description>Ver también http://diyhpl.us/wiki/transcripts/bitcoin-core-dev-tech/2017-09-06-signature-aggregation/
Bellare-Neven Se ha publicado, ha existido durante una década, y es ampliamente citado. En Bellare-Neven, es en sí mismo, es un esquema multi-firma que significa múltiples pubkeys y un mensaje. Debe tratar las autorizaciones individuales para gastar entradas, como mensajes individuales. Lo que necesitamos es un esquema de firma agregada interactiva. El artículo de Bellare-Neven sugiere una forma trivial de construir un esquema de firma agregada a partir de un esquema multisig donde interactivamente todos firman el mensaje de todos.</description></item><item><title>Cifrado P2P (2019-06-07)</title><link>https://btctranscripts.com/es/bitcoin-core-dev-tech/2019-06-07-p2p-encryption/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/es/bitcoin-core-dev-tech/2019-06-07-p2p-encryption/</guid><description>Cifrado p2p
https://twitter.com/kanzure/status/1136939003666685952
https://github.com/bitcoin-core/bitcoin-devwiki/wiki/P2P-Design-Philosophy
&amp;ldquo;Elligator al cuadrado: Puntos uniformes en curvas elípticas de orden primo como cadenas aleatorias uniformes&amp;rdquo; https://eprint.iacr.org/2014/043
Introducción Esta propuesta lleva años en marcha. Muchas ideas de sipa y gmaxwell fueron a parar al bip151. Hace años decidí intentar sacar esto adelante. Hay bip151 que de nuevo la mayoría de las ideas no son mías sino que vienen de sipa y gmaxwell. La propuesta original fue retirada porque descubrimos formas de hacerlo mejor.</description></item><item><title>Intercambios atómicos de curvas transversales (2018-03-05)</title><link>https://btctranscripts.com/es/bitcoin-core-dev-tech/2018-03-05-cross-curve-atomic-swaps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/es/bitcoin-core-dev-tech/2018-03-05-cross-curve-atomic-swaps/</guid><description>https://twitter.com/kanzure/status/971827042223345664
Borrador de un próximo documento de guiones sin guión. Esto fue a principios de 2017. Pero ya ha pasado todo un año.
transacciones lightning posteriores a schnorr https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-February/001031.html
Una firma adaptadora.. si tienes diferentes generadores, entonces los dos secretos a revelar, simplemente le das a alguien los dos, más una prueba de un log discreto, y entonces dices aprende el secreto a uno que consiga que la revelación sea la misma.</description></item><item><title>Libsecp256k1 Reunión de mantenedores (2022-10-12)</title><link>https://btctranscripts.com/es/bitcoin-core-dev-tech/2022-10-12-libsecp256k1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/es/bitcoin-core-dev-tech/2022-10-12-libsecp256k1/</guid><description>P: ¿Por qué C89? Cuando te hice esta pregunta hace unos años, creo que dijiste gmaxwell.
R: Hay una serie de dispositivos embebidos que sólo soportan C89 y sería bueno soportar esos dispositivos. Esa fue la respuesta de entonces, al menos.
P: ¿Es un gran coste seguir haciendo C89?
R: El único coste es para las cosas de contexto que queremos hacer threadlocal. El CPUid o las cosas específicas de x86.</description></item><item><title>Mercado de tarifas (2022-10-11)</title><link>https://btctranscripts.com/es/bitcoin-core-dev-tech/2022-10-11-fee-market/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/es/bitcoin-core-dev-tech/2022-10-11-fee-market/</guid><description>Mercado de tarifas Hay dos momentos en los que hemos tenido tasas sostenidas: a finales de 2017 y a principios de 2021. A finales de 2017 vimos que muchas cosas se rompían porque la gente no había escrito un software para hacer frente a las tasas variables o algo así. No sé si eso fue un problema tan grande en 2021. Lo que sí me preocupa es que esto empiece a ser una cosa.</description></item><item><title>Notas de la reunión (2017-09-05)</title><link>https://btctranscripts.com/es/bitcoin-core-dev-tech/2017-09-05-meeting-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/es/bitcoin-core-dev-tech/2017-09-05-meeting-notes/</guid><description>2017-09-05 - 2017-09-07
coredev.tech septiembre 2017
https://twitter.com/kanzure/status/907233490919464960
((Como siempre, cualquier error es probablemente mío, etc.))
Introducción Existe una gran preocupación sobre si BlueMatt se ha convertido en un nombre erróneo.
Presentación del lunes por la noche: https://btctranscripts.com/sf-bitcoin-meetup/2017-09-04-jonas-schnelli-bip150-bip151/
Creo que deberíamos seguir usando #bitcoin-core-dev para cualquier cosa relacionada con el cambio de Bitcoin Core y tratar de mantener las cosas abiertas aunque estemos juntos aquí hoy y mañana y el siguiente.</description></item><item><title>Taproot, Graftroot, Etc (2018-03-06)</title><link>https://btctranscripts.com/es/bitcoin-core-dev-tech/2018-03-06-taproot-graftroot-etc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://btctranscripts.com/es/bitcoin-core-dev-tech/2018-03-06-taproot-graftroot-etc/</guid><description>https://twitter.com/kanzure/status/972468121046061056
Graftroot La idea del graftroot es que en cada contrato hay un superconjunto de personas que pueden gastar el dinero. Esta suposición no siempre es cierta, pero casi siempre lo es. Digamos que quieres bloquear estas monedas durante un año, sin ninguna condición para ello, entonces no funciona. Pero suponga que tiene&amp;hellip; ¿recuperación pubkey? No&amp;hellip; la recuperación pubkey es inherentemente incompatible con cualquier forma de agregación, y la agregación es muy superior.</description></item></channel></rss>